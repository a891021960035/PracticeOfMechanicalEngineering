
PracticeOfMechanicalEngineering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce4  08004ce4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce4  08004ce4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce4  08004ce4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000020  08004d0c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004d0c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f20  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c4  00000000  00000000  00029f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016be3  00000000  00000000  0002cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b53d  00000000  00000000  00043acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bc8  00000000  00000000  0004f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5bd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  000d5c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c94 	.word	0x08004c94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08004c94 	.word	0x08004c94

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_frsub>:
 8000938:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800093c:	e002      	b.n	8000944 <__addsf3>
 800093e:	bf00      	nop

08000940 <__aeabi_fsub>:
 8000940:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000944 <__addsf3>:
 8000944:	0042      	lsls	r2, r0, #1
 8000946:	bf1f      	itttt	ne
 8000948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800094c:	ea92 0f03 	teqne	r2, r3
 8000950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000958:	d06a      	beq.n	8000a30 <__addsf3+0xec>
 800095a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000962:	bfc1      	itttt	gt
 8000964:	18d2      	addgt	r2, r2, r3
 8000966:	4041      	eorgt	r1, r0
 8000968:	4048      	eorgt	r0, r1
 800096a:	4041      	eorgt	r1, r0
 800096c:	bfb8      	it	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	2b19      	cmp	r3, #25
 8000972:	bf88      	it	hi
 8000974:	4770      	bxhi	lr
 8000976:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4240      	negne	r0, r0
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800098e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4249      	negne	r1, r1
 8000996:	ea92 0f03 	teq	r2, r3
 800099a:	d03f      	beq.n	8000a1c <__addsf3+0xd8>
 800099c:	f1a2 0201 	sub.w	r2, r2, #1
 80009a0:	fa41 fc03 	asr.w	ip, r1, r3
 80009a4:	eb10 000c 	adds.w	r0, r0, ip
 80009a8:	f1c3 0320 	rsb	r3, r3, #32
 80009ac:	fa01 f103 	lsl.w	r1, r1, r3
 80009b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b4:	d502      	bpl.n	80009bc <__addsf3+0x78>
 80009b6:	4249      	negs	r1, r1
 80009b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c0:	d313      	bcc.n	80009ea <__addsf3+0xa6>
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c6:	d306      	bcc.n	80009d6 <__addsf3+0x92>
 80009c8:	0840      	lsrs	r0, r0, #1
 80009ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ce:	f102 0201 	add.w	r2, r2, #1
 80009d2:	2afe      	cmp	r2, #254	; 0xfe
 80009d4:	d251      	bcs.n	8000a7a <__addsf3+0x136>
 80009d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009de:	bf08      	it	eq
 80009e0:	f020 0001 	biceq.w	r0, r0, #1
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	4770      	bx	lr
 80009ea:	0049      	lsls	r1, r1, #1
 80009ec:	eb40 0000 	adc.w	r0, r0, r0
 80009f0:	3a01      	subs	r2, #1
 80009f2:	bf28      	it	cs
 80009f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009f8:	d2ed      	bcs.n	80009d6 <__addsf3+0x92>
 80009fa:	fab0 fc80 	clz	ip, r0
 80009fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a02:	ebb2 020c 	subs.w	r2, r2, ip
 8000a06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0a:	bfaa      	itet	ge
 8000a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a10:	4252      	neglt	r2, r2
 8000a12:	4318      	orrge	r0, r3
 8000a14:	bfbc      	itt	lt
 8000a16:	40d0      	lsrlt	r0, r2
 8000a18:	4318      	orrlt	r0, r3
 8000a1a:	4770      	bx	lr
 8000a1c:	f092 0f00 	teq	r2, #0
 8000a20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a24:	bf06      	itte	eq
 8000a26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2a:	3201      	addeq	r2, #1
 8000a2c:	3b01      	subne	r3, #1
 8000a2e:	e7b5      	b.n	800099c <__addsf3+0x58>
 8000a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3e:	d021      	beq.n	8000a84 <__addsf3+0x140>
 8000a40:	ea92 0f03 	teq	r2, r3
 8000a44:	d004      	beq.n	8000a50 <__addsf3+0x10c>
 8000a46:	f092 0f00 	teq	r2, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	4770      	bx	lr
 8000a50:	ea90 0f01 	teq	r0, r1
 8000a54:	bf1c      	itt	ne
 8000a56:	2000      	movne	r0, #0
 8000a58:	4770      	bxne	lr
 8000a5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a5e:	d104      	bne.n	8000a6a <__addsf3+0x126>
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	bf28      	it	cs
 8000a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a6e:	bf3c      	itt	cc
 8000a70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a74:	4770      	bxcc	lr
 8000a76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	4770      	bx	lr
 8000a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a88:	bf16      	itet	ne
 8000a8a:	4608      	movne	r0, r1
 8000a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a90:	4601      	movne	r1, r0
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	bf06      	itte	eq
 8000a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9a:	ea90 0f01 	teqeq	r0, r1
 8000a9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ui2f>:
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <__aeabi_i2f+0x8>
 8000aaa:	bf00      	nop

08000aac <__aeabi_i2f>:
 8000aac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	bf48      	it	mi
 8000ab2:	4240      	negmi	r0, r0
 8000ab4:	ea5f 0c00 	movs.w	ip, r0
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	e01c      	b.n	8000b02 <__aeabi_l2f+0x2a>

08000ac8 <__aeabi_ul2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e00a      	b.n	8000aec <__aeabi_l2f+0x14>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_l2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_l2f+0x14>
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	ea5f 0c01 	movs.w	ip, r1
 8000af0:	bf02      	ittt	eq
 8000af2:	4684      	moveq	ip, r0
 8000af4:	4601      	moveq	r1, r0
 8000af6:	2000      	moveq	r0, #0
 8000af8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000afc:	bf08      	it	eq
 8000afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b06:	fabc f28c 	clz	r2, ip
 8000b0a:	3a08      	subs	r2, #8
 8000b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b10:	db10      	blt.n	8000b34 <__aeabi_l2f+0x5c>
 8000b12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b1c:	f1c2 0220 	rsb	r2, r2, #32
 8000b20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b24:	fa20 f202 	lsr.w	r2, r0, r2
 8000b28:	eb43 0002 	adc.w	r0, r3, r2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f102 0220 	add.w	r2, r2, #32
 8000b38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b44:	fa21 f202 	lsr.w	r2, r1, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_fmul>:
 8000b54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b62:	ea92 0f0c 	teqne	r2, ip
 8000b66:	ea93 0f0c 	teqne	r3, ip
 8000b6a:	d06f      	beq.n	8000c4c <__aeabi_fmul+0xf8>
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	bf18      	it	ne
 8000b76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7a:	d01e      	beq.n	8000bba <__aeabi_fmul+0x66>
 8000b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b88:	fba0 3101 	umull	r3, r1, r0, r1
 8000b8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b94:	bf3e      	ittt	cc
 8000b96:	0049      	lslcc	r1, r1, #1
 8000b98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b9c:	005b      	lslcc	r3, r3, #1
 8000b9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ba2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ba6:	2afd      	cmp	r2, #253	; 0xfd
 8000ba8:	d81d      	bhi.n	8000be6 <__aeabi_fmul+0x92>
 8000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc2:	bf08      	it	eq
 8000bc4:	0249      	lsleq	r1, r1, #9
 8000bc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bce:	3a7f      	subs	r2, #127	; 0x7f
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bda:	4770      	bxgt	lr
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	dc5d      	bgt.n	8000ca4 <__aeabi_fmul+0x150>
 8000be8:	f112 0f19 	cmn.w	r2, #25
 8000bec:	bfdc      	itt	le
 8000bee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bxle	lr
 8000bf4:	f1c2 0200 	rsb	r2, r2, #0
 8000bf8:	0041      	lsls	r1, r0, #1
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	f1c2 0220 	rsb	r2, r2, #32
 8000c02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0a:	f140 0000 	adc.w	r0, r0, #0
 8000c0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c12:	bf08      	it	eq
 8000c14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c18:	4770      	bx	lr
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c22:	bf02      	ittt	eq
 8000c24:	0040      	lsleq	r0, r0, #1
 8000c26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2a:	3a01      	subeq	r2, #1
 8000c2c:	d0f9      	beq.n	8000c22 <__aeabi_fmul+0xce>
 8000c2e:	ea40 000c 	orr.w	r0, r0, ip
 8000c32:	f093 0f00 	teq	r3, #0
 8000c36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0049      	lsleq	r1, r1, #1
 8000c3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c42:	3b01      	subeq	r3, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xe6>
 8000c46:	ea41 010c 	orr.w	r1, r1, ip
 8000c4a:	e78f      	b.n	8000b6c <__aeabi_fmul+0x18>
 8000c4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c50:	ea92 0f0c 	teq	r2, ip
 8000c54:	bf18      	it	ne
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d00a      	beq.n	8000c72 <__aeabi_fmul+0x11e>
 8000c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c60:	bf18      	it	ne
 8000c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c66:	d1d8      	bne.n	8000c1a <__aeabi_fmul+0xc6>
 8000c68:	ea80 0001 	eor.w	r0, r0, r1
 8000c6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f090 0f00 	teq	r0, #0
 8000c76:	bf17      	itett	ne
 8000c78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	f091 0f00 	teqne	r1, #0
 8000c82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c86:	d014      	beq.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c88:	ea92 0f0c 	teq	r2, ip
 8000c8c:	d101      	bne.n	8000c92 <__aeabi_fmul+0x13e>
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	d10f      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c92:	ea93 0f0c 	teq	r3, ip
 8000c96:	d103      	bne.n	8000ca0 <__aeabi_fmul+0x14c>
 8000c98:	024b      	lsls	r3, r1, #9
 8000c9a:	bf18      	it	ne
 8000c9c:	4608      	movne	r0, r1
 8000c9e:	d108      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000ca0:	ea80 0001 	eor.w	r0, r0, r1
 8000ca4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bx	lr
 8000cb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_fdiv>:
 8000cbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cca:	ea92 0f0c 	teqne	r2, ip
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d069      	beq.n	8000da8 <__aeabi_fdiv+0xec>
 8000cd4:	eba2 0203 	sub.w	r2, r2, r3
 8000cd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce2:	d037      	beq.n	8000d54 <__aeabi_fdiv+0x98>
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf38      	it	cc
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf24      	itt	cs
 8000d06:	1a5b      	subcs	r3, r3, r1
 8000d08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d1e:	bf24      	itt	cs
 8000d20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d2c:	bf24      	itt	cs
 8000d2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d3e:	d1e0      	bne.n	8000d02 <__aeabi_fdiv+0x46>
 8000d40:	2afd      	cmp	r2, #253	; 0xfd
 8000d42:	f63f af50 	bhi.w	8000be6 <__aeabi_fmul+0x92>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5c:	327f      	adds	r2, #127	; 0x7f
 8000d5e:	bfc2      	ittt	gt
 8000d60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d68:	4770      	bxgt	lr
 8000d6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	3a01      	subs	r2, #1
 8000d74:	e737      	b.n	8000be6 <__aeabi_fmul+0x92>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fdiv+0xc2>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xda>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e795      	b.n	8000cd4 <__aeabi_fdiv+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d108      	bne.n	8000dc4 <__aeabi_fdiv+0x108>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	f47f af7d 	bne.w	8000cb2 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	f47f af70 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e776      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	d104      	bne.n	8000dd4 <__aeabi_fdiv+0x118>
 8000dca:	024b      	lsls	r3, r1, #9
 8000dcc:	f43f af4c 	beq.w	8000c68 <__aeabi_fmul+0x114>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e76e      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	d1ca      	bne.n	8000d76 <__aeabi_fdiv+0xba>
 8000de0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de4:	f47f af5c 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000de8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	f47f af3c 	bne.w	8000c68 <__aeabi_fmul+0x114>
 8000df0:	e75f      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000df2:	bf00      	nop

08000df4 <__gesf2>:
 8000df4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000df8:	e006      	b.n	8000e08 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__lesf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	e002      	b.n	8000e08 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__cmpsf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e18:	bf18      	it	ne
 8000e1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e1e:	d011      	beq.n	8000e44 <__cmpsf2+0x40>
 8000e20:	b001      	add	sp, #4
 8000e22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e26:	bf18      	it	ne
 8000e28:	ea90 0f01 	teqne	r0, r1
 8000e2c:	bf58      	it	pl
 8000e2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e32:	bf88      	it	hi
 8000e34:	17c8      	asrhi	r0, r1, #31
 8000e36:	bf38      	it	cc
 8000e38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e3c:	bf18      	it	ne
 8000e3e:	f040 0001 	orrne.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e48:	d102      	bne.n	8000e50 <__cmpsf2+0x4c>
 8000e4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e4e:	d105      	bne.n	8000e5c <__cmpsf2+0x58>
 8000e50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e54:	d1e4      	bne.n	8000e20 <__cmpsf2+0x1c>
 8000e56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5a:	d0e1      	beq.n	8000e20 <__cmpsf2+0x1c>
 8000e5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <__aeabi_cfrcmple>:
 8000e64:	4684      	mov	ip, r0
 8000e66:	4608      	mov	r0, r1
 8000e68:	4661      	mov	r1, ip
 8000e6a:	e7ff      	b.n	8000e6c <__aeabi_cfcmpeq>

08000e6c <__aeabi_cfcmpeq>:
 8000e6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e6e:	f7ff ffc9 	bl	8000e04 <__cmpsf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e7c <__aeabi_fcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cfcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffd2 	bl	8000e64 <__aeabi_cfrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc8 	bl	8000e64 <__aeabi_cfrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_f2iz>:
 8000ee0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ee8:	d30f      	bcc.n	8000f0a <__aeabi_f2iz+0x2a>
 8000eea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d90d      	bls.n	8000f10 <__aeabi_f2iz+0x30>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	bf18      	it	ne
 8000f06:	4240      	negne	r0, r0
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2iz+0x3a>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d105      	bne.n	8000f26 <__aeabi_f2iz+0x46>
 8000f1a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f1e:	bf08      	it	eq
 8000f20:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f001 f9ec 	bl	800230c <HAL_Init>

  /* USER CODE BEGIN Init */
  pulse_servo1 = MIN_PULSE_LENGTH;
 8000f34:	4bb2      	ldr	r3, [pc, #712]	; (8001200 <main+0x2d4>)
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	601a      	str	r2, [r3, #0]
  pulse_servo2 = MIN_PULSE_LENGTH;
 8000f3c:	4bb1      	ldr	r3, [pc, #708]	; (8001204 <main+0x2d8>)
 8000f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f42:	601a      	str	r2, [r3, #0]
  pulse_servo3 = MIN_PULSE_LENGTH;
 8000f44:	4bb0      	ldr	r3, [pc, #704]	; (8001208 <main+0x2dc>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	601a      	str	r2, [r3, #0]
  pulse_BLDC = MIN_PULSE_LENGTH;
 8000f4c:	4baf      	ldr	r3, [pc, #700]	; (800120c <main+0x2e0>)
 8000f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f52:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f98e 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 fb96 	bl	8001688 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5c:	f000 f9e2 	bl	8001324 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f60:	f000 fa4c 	bl	80013fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f64:	f000 fae6 	bl	8001534 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f68:	f000 fb3e 	bl	80015e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	48a7      	ldr	r0, [pc, #668]	; (8001210 <main+0x2e4>)
 8000f72:	f002 f91f 	bl	80031b4 <HAL_GPIO_TogglePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                 // Servo 1
 8000f76:	2100      	movs	r1, #0
 8000f78:	48a6      	ldr	r0, [pc, #664]	; (8001214 <main+0x2e8>)
 8000f7a:	f002 ffbf 	bl	8003efc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                 // Servo 2
 8000f7e:	2104      	movs	r1, #4
 8000f80:	48a4      	ldr	r0, [pc, #656]	; (8001214 <main+0x2e8>)
 8000f82:	f002 ffbb 	bl	8003efc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);                 // Servo 3
 8000f86:	2108      	movs	r1, #8
 8000f88:	48a2      	ldr	r0, [pc, #648]	; (8001214 <main+0x2e8>)
 8000f8a:	f002 ffb7 	bl	8003efc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);                 //無刷馬達
 8000f8e:	2100      	movs	r1, #0
 8000f90:	48a1      	ldr	r0, [pc, #644]	; (8001218 <main+0x2ec>)
 8000f92:	f002 ffb3 	bl	8003efc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);                            //開啟中斷
 8000f96:	48a1      	ldr	r0, [pc, #644]	; (800121c <main+0x2f0>)
 8000f98:	f002 ff14 	bl	8003dc4 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); //無刷馬達下限轉速
 8000f9c:	4b9b      	ldr	r3, [pc, #620]	; (800120c <main+0x2e0>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b9d      	ldr	r3, [pc, #628]	; (8001218 <main+0x2ec>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  writeServo(90);
 8000fa6:	489e      	ldr	r0, [pc, #632]	; (8001220 <main+0x2f4>)
 8000fa8:	f000 fc36 	bl	8001818 <writeServo>
  brake();
 8000fac:	f000 fc98 	bl	80018e0 <brake>
  // unbrake();
  HAL_Delay(3000);
 8000fb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb4:	f001 fa0c 	bl	80023d0 <HAL_Delay>
  mode = 3;
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <main+0x2f8>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    switch (mode)
 8000fbe:	4b99      	ldr	r3, [pc, #612]	; (8001224 <main+0x2f8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d8fb      	bhi.n	8000fbe <main+0x92>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <main+0xa0>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fe5 	.word	0x08000fe5
 8000fd0:	08000fef 	.word	0x08000fef
 8000fd4:	08000ff7 	.word	0x08000ff7
 8000fd8:	0800116b 	.word	0x0800116b
 8000fdc:	08001197 	.word	0x08001197
 8000fe0:	080011a7 	.word	0x080011a7
    {
    case 0:
      setPower(0);
 8000fe4:	f04f 0000 	mov.w	r0, #0
 8000fe8:	f000 fc42 	bl	8001870 <setPower>
      break;
 8000fec:	e107      	b.n	80011fe <main+0x2d2>

    case 1:
      setPower(10);
 8000fee:	488e      	ldr	r0, [pc, #568]	; (8001228 <main+0x2fc>)
 8000ff0:	f000 fc3e 	bl	8001870 <setPower>
      break;
 8000ff4:	e103      	b.n	80011fe <main+0x2d2>

    case 2:
      // 起步
      setPower(power_BLDC);
 8000ff6:	4b8d      	ldr	r3, [pc, #564]	; (800122c <main+0x300>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc38 	bl	8001870 <setPower>
      HAL_Delay(2000);
 8001000:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001004:	f001 f9e4 	bl	80023d0 <HAL_Delay>
      unbrake();
 8001008:	f000 fc88 	bl	800191c <unbrake>

      // 第 1 段，轉彎至第一循跡線
      writeServo(71.3);
 800100c:	4888      	ldr	r0, [pc, #544]	; (8001230 <main+0x304>)
 800100e:	f000 fc03 	bl	8001818 <writeServo>
      while (trigger < 3)
 8001012:	e02d      	b.n	8001070 <main+0x144>
      {
        HAL_ADC_Start(&hadc1);
 8001014:	4887      	ldr	r0, [pc, #540]	; (8001234 <main+0x308>)
 8001016:	f001 fad7 	bl	80025c8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 800101a:	2101      	movs	r1, #1
 800101c:	4885      	ldr	r0, [pc, #532]	; (8001234 <main+0x308>)
 800101e:	f001 fb81 	bl	8002724 <HAL_ADC_PollForConversion>
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001022:	2102      	movs	r1, #2
 8001024:	4883      	ldr	r0, [pc, #524]	; (8001234 <main+0x308>)
 8001026:	f000 fbaf 	bl	8001788 <Board_Get_ADCChannelValue>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b82      	ldr	r3, [pc, #520]	; (8001238 <main+0x30c>)
 8001030:	601a      	str	r2, [r3, #0]
        if (value2 > 1000) //感測到黑色
 8001032:	4b81      	ldr	r3, [pc, #516]	; (8001238 <main+0x30c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103a:	dd19      	ble.n	8001070 <main+0x144>
        {
          while (value2 > 1000) //變成白色之前狀態不變
 800103c:	e00e      	b.n	800105c <main+0x130>
          {
            HAL_ADC_Start(&hadc1);
 800103e:	487d      	ldr	r0, [pc, #500]	; (8001234 <main+0x308>)
 8001040:	f001 fac2 	bl	80025c8 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 1);
 8001044:	2101      	movs	r1, #1
 8001046:	487b      	ldr	r0, [pc, #492]	; (8001234 <main+0x308>)
 8001048:	f001 fb6c 	bl	8002724 <HAL_ADC_PollForConversion>
            value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 800104c:	2102      	movs	r1, #2
 800104e:	4879      	ldr	r0, [pc, #484]	; (8001234 <main+0x308>)
 8001050:	f000 fb9a 	bl	8001788 <Board_Get_ADCChannelValue>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b77      	ldr	r3, [pc, #476]	; (8001238 <main+0x30c>)
 800105a:	601a      	str	r2, [r3, #0]
          while (value2 > 1000) //變成白色之前狀態不變
 800105c:	4b76      	ldr	r3, [pc, #472]	; (8001238 <main+0x30c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001064:	dceb      	bgt.n	800103e <main+0x112>
          }
          trigger += 1;
 8001066:	4b75      	ldr	r3, [pc, #468]	; (800123c <main+0x310>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a73      	ldr	r2, [pc, #460]	; (800123c <main+0x310>)
 800106e:	6013      	str	r3, [r2, #0]
      while (trigger < 3)
 8001070:	4b72      	ldr	r3, [pc, #456]	; (800123c <main+0x310>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	ddcd      	ble.n	8001014 <main+0xe8>
        }
      }

      // 第 4 段，第一段循跡
      lineFollower(3, 6, &trigger);
 8001078:	4a70      	ldr	r2, [pc, #448]	; (800123c <main+0x310>)
 800107a:	4971      	ldr	r1, [pc, #452]	; (8001240 <main+0x314>)
 800107c:	4871      	ldr	r0, [pc, #452]	; (8001244 <main+0x318>)
 800107e:	f000 fd47 	bl	8001b10 <lineFollower>
      lineFollower(1, 16, &trigger);
 8001082:	4a6e      	ldr	r2, [pc, #440]	; (800123c <main+0x310>)
 8001084:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001088:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800108c:	f000 fd40 	bl	8001b10 <lineFollower>

      // 第 5 段，變換車道
      setPower(13.5); // 根據電量調整
 8001090:	486d      	ldr	r0, [pc, #436]	; (8001248 <main+0x31c>)
 8001092:	f000 fbed 	bl	8001870 <setPower>
      writeServo(60);
 8001096:	486d      	ldr	r0, [pc, #436]	; (800124c <main+0x320>)
 8001098:	f000 fbbe 	bl	8001818 <writeServo>
      // HAL_Delay(950); //轉回黑線_往前
      HAL_Delay(900); //轉回黑線_往後，900~830
 800109c:	f44f 7061 	mov.w	r0, #900	; 0x384
 80010a0:	f001 f996 	bl	80023d0 <HAL_Delay>
      // 轉彎法
      setPower(13.5);
 80010a4:	4868      	ldr	r0, [pc, #416]	; (8001248 <main+0x31c>)
 80010a6:	f000 fbe3 	bl	8001870 <setPower>
      writeServo(90);
 80010aa:	485d      	ldr	r0, [pc, #372]	; (8001220 <main+0x2f4>)
 80010ac:	f000 fbb4 	bl	8001818 <writeServo>
      // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
      // writeServo(55);
      // HAL_Delay(1500);

      // 等到黑線停下
      waitBlack(2);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f000 fd01 	bl	8001ab8 <waitBlack>
      // // 轉回黑線_往前
      // writeServo(138);
      // waitBlack(1);
      // 轉回黑線_往後
      setPower(0);
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	f000 fbd9 	bl	8001870 <setPower>
      brake();
 80010be:	f000 fc0f 	bl	80018e0 <brake>
      HAL_Delay(800);
 80010c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80010c6:	f001 f983 	bl	80023d0 <HAL_Delay>
      // pulse_servo2 = 500 + 2000 * 115 / 180;
      // pulse_servo3 = 500 + 2000 * 120 / 180; // 130?
      writeServo(82);
 80010ca:	4861      	ldr	r0, [pc, #388]	; (8001250 <main+0x324>)
 80010cc:	f000 fba4 	bl	8001818 <writeServo>
      pulse_servo2 = 500 + 2000 * 115 / 180;
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <main+0x2d8>)
 80010d2:	f240 62f1 	movw	r2, #1777	; 0x6f1
 80010d6:	601a      	str	r2, [r3, #0]
      pulse_servo3 = 500 + 2000 * 130 / 180; // 130?
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <main+0x2dc>)
 80010da:	f44f 62f3 	mov.w	r2, #1944	; 0x798
 80010de:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <main+0x2d8>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <main+0x2e8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80010ea:	4b47      	ldr	r3, [pc, #284]	; (8001208 <main+0x2dc>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b49      	ldr	r3, [pc, #292]	; (8001214 <main+0x2e8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c
      waitBlack(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 fcdf 	bl	8001ab8 <waitBlack>
      brake();
 80010fa:	f000 fbf1 	bl	80018e0 <brake>
      HAL_Delay(500);
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f001 f965 	bl	80023d0 <HAL_Delay>
      unbrake();
 8001106:	f000 fc09 	bl	800191c <unbrake>

      // 第 7 段，第二循跡線上坡
      trigger = 0;
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <main+0x310>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
      // while (trigger < 2)
      // {
      //   lineFollower(100, 16.5, &trigger);
      // }
      // 向後轉正模式
      while (trigger < 2)
 8001110:	e004      	b.n	800111c <main+0x1f0>
      {
        lineFollower(100, 17.5, &trigger);
 8001112:	4a4a      	ldr	r2, [pc, #296]	; (800123c <main+0x310>)
 8001114:	494f      	ldr	r1, [pc, #316]	; (8001254 <main+0x328>)
 8001116:	4850      	ldr	r0, [pc, #320]	; (8001258 <main+0x32c>)
 8001118:	f000 fcfa 	bl	8001b10 <lineFollower>
      while (trigger < 2)
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <main+0x310>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	ddf6      	ble.n	8001112 <main+0x1e6>
      }
      writeServo(90);
 8001124:	483e      	ldr	r0, [pc, #248]	; (8001220 <main+0x2f4>)
 8001126:	f000 fb77 	bl	8001818 <writeServo>
      HAL_Delay(300);
 800112a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800112e:	f001 f94f 	bl	80023d0 <HAL_Delay>

      // 第 8 段，第一停止區
      setPower(0);
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f000 fb9b 	bl	8001870 <setPower>
      brake();
 800113a:	f000 fbd1 	bl	80018e0 <brake>
      HAL_Delay(3500);
 800113e:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001142:	f001 f945 	bl	80023d0 <HAL_Delay>
      unbrake();
 8001146:	f000 fbe9 	bl	800191c <unbrake>

      // 第 9 段，循跡至第二停止區
      lineFollowerBackward(5, 6.3, &trigger);
 800114a:	4a3c      	ldr	r2, [pc, #240]	; (800123c <main+0x310>)
 800114c:	4943      	ldr	r1, [pc, #268]	; (800125c <main+0x330>)
 800114e:	4844      	ldr	r0, [pc, #272]	; (8001260 <main+0x334>)
 8001150:	f000 fe72 	bl	8001e38 <lineFollowerBackward>
      lineFollowerBackward(4, 0, &trigger);
 8001154:	4a39      	ldr	r2, [pc, #228]	; (800123c <main+0x310>)
 8001156:	f04f 0100 	mov.w	r1, #0
 800115a:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800115e:	f000 fe6b 	bl	8001e38 <lineFollowerBackward>
      // brake();
      mode = 0;
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <main+0x2f8>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
      break;
 8001168:	e049      	b.n	80011fe <main+0x2d2>

    case 3: // 伺服測試
      pulse_servo2 = 500 + 2000 * 90 / 180;
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <main+0x2d8>)
 800116c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001170:	601a      	str	r2, [r3, #0]
      pulse_servo3 = pulse_servo2;
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <main+0x2d8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a24      	ldr	r2, [pc, #144]	; (8001208 <main+0x2dc>)
 8001178:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <main+0x2d8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <main+0x2e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <main+0x2dc>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <main+0x2e8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c
      writeServo(90);
 800118e:	4824      	ldr	r0, [pc, #144]	; (8001220 <main+0x2f4>)
 8001190:	f000 fb42 	bl	8001818 <writeServo>
      break;
 8001194:	e033      	b.n	80011fe <main+0x2d2>

    case 4: // 無刷測試
      HAL_Delay(3000);
 8001196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800119a:	f001 f919 	bl	80023d0 <HAL_Delay>
      setPower(13);
 800119e:	4831      	ldr	r0, [pc, #196]	; (8001264 <main+0x338>)
 80011a0:	f000 fb66 	bl	8001870 <setPower>
      // BLDC_test();
      break;
 80011a4:	e02b      	b.n	80011fe <main+0x2d2>

    case 5: // 類比輸入
      HAL_ADC_Start(&hadc1);
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <main+0x308>)
 80011a8:	f001 fa0e 	bl	80025c8 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1);
 80011ac:	2101      	movs	r1, #1
 80011ae:	4821      	ldr	r0, [pc, #132]	; (8001234 <main+0x308>)
 80011b0:	f001 fab8 	bl	8002724 <HAL_ADC_PollForConversion>
      value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	481f      	ldr	r0, [pc, #124]	; (8001234 <main+0x308>)
 80011b8:	f000 fae6 	bl	8001788 <Board_Get_ADCChannelValue>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <main+0x33c>)
 80011c2:	601a      	str	r2, [r3, #0]
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80011c4:	2101      	movs	r1, #1
 80011c6:	481b      	ldr	r0, [pc, #108]	; (8001234 <main+0x308>)
 80011c8:	f000 fade 	bl	8001788 <Board_Get_ADCChannelValue>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <main+0x340>)
 80011d2:	601a      	str	r2, [r3, #0]
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 80011d4:	2102      	movs	r1, #2
 80011d6:	4817      	ldr	r0, [pc, #92]	; (8001234 <main+0x308>)
 80011d8:	f000 fad6 	bl	8001788 <Board_Get_ADCChannelValue>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <main+0x30c>)
 80011e2:	601a      	str	r2, [r3, #0]
      value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 80011e4:	2103      	movs	r1, #3
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <main+0x308>)
 80011e8:	f000 face 	bl	8001788 <Board_Get_ADCChannelValue>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <main+0x344>)
 80011f2:	601a      	str	r2, [r3, #0]
      HAL_Delay(500);
 80011f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f8:	f001 f8ea 	bl	80023d0 <HAL_Delay>
      break;
 80011fc:	bf00      	nop
    switch (mode)
 80011fe:	e6de      	b.n	8000fbe <main+0x92>
 8001200:	20000150 	.word	0x20000150
 8001204:	20000154 	.word	0x20000154
 8001208:	20000158 	.word	0x20000158
 800120c:	2000015c 	.word	0x2000015c
 8001210:	40011000 	.word	0x40011000
 8001214:	2000006c 	.word	0x2000006c
 8001218:	200000b4 	.word	0x200000b4
 800121c:	200000fc 	.word	0x200000fc
 8001220:	42b40000 	.word	0x42b40000
 8001224:	20000160 	.word	0x20000160
 8001228:	41200000 	.word	0x41200000
 800122c:	20000010 	.word	0x20000010
 8001230:	428e999a 	.word	0x428e999a
 8001234:	2000003c 	.word	0x2000003c
 8001238:	20000008 	.word	0x20000008
 800123c:	2000016c 	.word	0x2000016c
 8001240:	40c00000 	.word	0x40c00000
 8001244:	40400000 	.word	0x40400000
 8001248:	41580000 	.word	0x41580000
 800124c:	42700000 	.word	0x42700000
 8001250:	42a40000 	.word	0x42a40000
 8001254:	418c0000 	.word	0x418c0000
 8001258:	42c80000 	.word	0x42c80000
 800125c:	40c9999a 	.word	0x40c9999a
 8001260:	40a00000 	.word	0x40a00000
 8001264:	41500000 	.word	0x41500000
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004
 8001270:	2000000c 	.word	0x2000000c

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fcfe 	bl	8004c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b2:	2301      	movs	r3, #1
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012c0:	2300      	movs	r3, #0
 80012c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 ffaf 	bl	800322c <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80012d4:	f000 fe78 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fa1c 	bl	8003730 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012fe:	f000 fe63 	bl	8001fc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001302:	2302      	movs	r3, #2
 8001304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fb93 	bl	8003a38 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001318:	f000 fe56 	bl	8001fc8 <Error_Handler>
  }
}
 800131c:	bf00      	nop
 800131e:	3750      	adds	r7, #80	; 0x50
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <MX_ADC1_Init+0xd4>)
 8001338:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_ADC1_Init+0xd0>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001342:	2200      	movs	r2, #0
 8001344:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001348:	2200      	movs	r2, #0
 800134a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <MX_ADC1_Init+0xd0>)
 800134e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001352:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_ADC1_Init+0xd0>)
 800135c:	2201      	movs	r2, #1
 800135e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001360:	4824      	ldr	r0, [pc, #144]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001362:	f001 f859 	bl	8002418 <HAL_ADC_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fe2c 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001374:	2301      	movs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	481c      	ldr	r0, [pc, #112]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001382:	f001 fae1 	bl	8002948 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800138c:	f000 fe1c 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /**Common config
   */
  hadc1.Instance = ADC1;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001392:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <MX_ADC1_Init+0xd4>)
 8001394:	601a      	str	r2, [r3, #0]
  //  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE; //扫描（多通道）模式=ENABLE、单次（单通道）模式=DISABLE 因为同时只采集一个通道 所以设置为DISABLE
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_ADC1_Init+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
                                              //  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
                                              //  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;    //连续=ENABLE、单次=DISABLE
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_ADC1_Init+0xd0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_ADC1_Init+0xd0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_ADC1_Init+0xd0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_ADC1_Init+0xd0>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_ADC1_Init+0xd0>)
 80013b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013ba:	61da      	str	r2, [r3, #28]
  //  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  //  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  //  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  //  hadc1.Init.BoostMode = DISABLE;
  //  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_ADC1_Init+0xd0>)
 80013be:	f001 f82b 	bl	8002418 <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80013c8:	f000 fdfe 	bl	8001fc8 <Error_Handler>
  }

  /**Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  //  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  //  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  //  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_ADC1_Init+0xd0>)
 80013de:	f001 fab3 	bl	8002948 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013e8:	f000 fdee 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2000003c 	.word	0x2000003c
 80013f8:	40012400 	.word	0x40012400

080013fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b092      	sub	sp, #72	; 0x48
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2220      	movs	r2, #32
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fc2c 	bl	8004c84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <MX_TIM1_Init+0x130>)
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <MX_TIM1_Init+0x134>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <MX_TIM1_Init+0x130>)
 8001434:	220f      	movs	r2, #15
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <MX_TIM1_Init+0x130>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <MX_TIM1_Init+0x130>)
 8001440:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b39      	ldr	r3, [pc, #228]	; (800152c <MX_TIM1_Init+0x130>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b37      	ldr	r3, [pc, #220]	; (800152c <MX_TIM1_Init+0x130>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <MX_TIM1_Init+0x130>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001458:	4834      	ldr	r0, [pc, #208]	; (800152c <MX_TIM1_Init+0x130>)
 800145a:	f002 fcff 	bl	8003e5c <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001464:	f000 fdb0 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001474:	4619      	mov	r1, r3
 8001476:	482d      	ldr	r0, [pc, #180]	; (800152c <MX_TIM1_Init+0x130>)
 8001478:	f003 fb24 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001482:	f000 fda1 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	; 0x60
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	481f      	ldr	r0, [pc, #124]	; (800152c <MX_TIM1_Init+0x130>)
 80014ae:	f002 fec9 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80014b8:	f000 fd86 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	2204      	movs	r2, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4819      	ldr	r0, [pc, #100]	; (800152c <MX_TIM1_Init+0x130>)
 80014c6:	f002 febd 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80014d0:	f000 fd7a 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	2208      	movs	r2, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_TIM1_Init+0x130>)
 80014de:	f002 feb1 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014e8:	f000 fd6e 	bl	8001fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM1_Init+0x130>)
 8001510:	f003 fb30 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800151a:	f000 fd55 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM1_Init+0x130>)
 8001520:	f000 fe1c 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3748      	adds	r7, #72	; 0x48
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000006c 	.word	0x2000006c
 8001530:	40012c00 	.word	0x40012c00

08001534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_TIM2_Init+0xb0>)
 8001558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_TIM2_Init+0xb0>)
 8001560:	220f      	movs	r2, #15
 8001562:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_TIM2_Init+0xb0>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_TIM2_Init+0xb0>)
 800156c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001570:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_TIM2_Init+0xb0>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_TIM2_Init+0xb0>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800157e:	4819      	ldr	r0, [pc, #100]	; (80015e4 <MX_TIM2_Init+0xb0>)
 8001580:	f002 fc6c 	bl	8003e5c <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800158a:	f000 fd1d 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4619      	mov	r1, r3
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <MX_TIM2_Init+0xb0>)
 800159e:	f003 fa91 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015a8:	f000 fd0e 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	; 0x60
 80015ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_TIM2_Init+0xb0>)
 80015c6:	f002 fe3d 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015d0:	f000 fcfa 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <MX_TIM2_Init+0xb0>)
 80015d6:	f000 fdc1 	bl	800215c <HAL_TIM_MspPostInit>

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200000b4 	.word	0x200000b4

080015e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  htim3.Instance = TIM3;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_TIM3_Init+0x98>)
 8001606:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <MX_TIM3_Init+0x9c>)
 8001608:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_TIM3_Init+0x98>)
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <MX_TIM3_Init+0x9c>)
 800160e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_TIM3_Init+0x98>)
 8001612:	220f      	movs	r2, #15
 8001614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_TIM3_Init+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM3_Init+0x98>)
 800161e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_TIM3_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_TIM3_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <MX_TIM3_Init+0x98>)
 8001632:	f002 fb77 	bl	8003d24 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 fcc4 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_TIM3_Init+0x98>)
 800164e:	f002 feb7 	bl	80043c0 <HAL_TIM_ConfigClockSource>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001658:	f000 fcb6 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_TIM3_Init+0x98>)
 800166a:	f003 fa2b 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001674:	f000 fca8 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200000fc 	.word	0x200000fc
 8001684:	40000400 	.word	0x40000400

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <MX_GPIO_Init+0xec>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a34      	ldr	r2, [pc, #208]	; (8001774 <MX_GPIO_Init+0xec>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <MX_GPIO_Init+0xec>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <MX_GPIO_Init+0xec>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <MX_GPIO_Init+0xec>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <MX_GPIO_Init+0xec>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <MX_GPIO_Init+0xec>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <MX_GPIO_Init+0xec>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <MX_GPIO_Init+0xec>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <MX_GPIO_Init+0xec>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <MX_GPIO_Init+0xec>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MX_GPIO_Init+0xec>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001702:	481d      	ldr	r0, [pc, #116]	; (8001778 <MX_GPIO_Init+0xf0>)
 8001704:	f001 fd3e 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2302      	movs	r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	4815      	ldr	r0, [pc, #84]	; (8001778 <MX_GPIO_Init+0xf0>)
 8001722:	f001 fbb3 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001726:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_GPIO_Init+0xf4>)
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <MX_GPIO_Init+0xf8>)
 800173c:	f001 fba6 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001740:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_GPIO_Init+0xfc>)
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4619      	mov	r1, r3
 8001754:	480a      	ldr	r0, [pc, #40]	; (8001780 <MX_GPIO_Init+0xf8>)
 8001756:	f001 fb99 	bl	8002e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2028      	movs	r0, #40	; 0x28
 8001760:	f001 fb5d 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001764:	2028      	movs	r0, #40	; 0x28
 8001766:	f001 fb76 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	40011000 	.word	0x40011000
 800177c:	10110000 	.word	0x10110000
 8001780:	40010c00 	.word	0x40010c00
 8001784:	10310000 	.word	0x10310000

08001788 <Board_Get_ADCChannelValue>:

/* USER CODE BEGIN 4 */
uint32_t Board_Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  ADC_ChannelConfTypeDef ADC_ChanConf;

  ADC_ChanConf.Channel = channel;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  ADC_ChanConf.Rank = ADC_REGULAR_RANK_1;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  //    ADC_ChanConf.SingleDiff = ADC_SINGLE_ENDED;
  //    ADC_ChanConf.OffsetNumber = ADC_OFFSET_NONE;
  //    ADC_ChanConf.Offset = 0;

  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 f8cf 	bl	8002948 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 ff0c 	bl	80025c8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10); //轮询转换
 80017b0:	210a      	movs	r1, #10
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 ffb6 	bl	8002724 <HAL_ADC_PollForConversion>
  return (uint16_t)HAL_ADC_GetValue(hadc);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f001 f8b9 	bl	8002930 <HAL_ADC_GetValue>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29b      	uxth	r3, r3
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d111      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    ms++;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017e6:	6013      	str	r3, [r2, #0]
    if (ms == 1000)
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f0:	d107      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x36>
    {
      ms = 0;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
      sec++;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001800:	6013      	str	r3, [r2, #0]
    }
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40000400 	.word	0x40000400
 8001810:	20000168 	.word	0x20000168
 8001814:	20000164 	.word	0x20000164

08001818 <writeServo>:

static void writeServo(float angle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001820:	490e      	ldr	r1, [pc, #56]	; (800185c <writeServo+0x44>)
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff f996 	bl	8000b54 <__aeabi_fmul>
 8001828:	4603      	mov	r3, r0
 800182a:	490d      	ldr	r1, [pc, #52]	; (8001860 <writeServo+0x48>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa45 	bl	8000cbc <__aeabi_fdiv>
 8001832:	4603      	mov	r3, r0
 8001834:	490b      	ldr	r1, [pc, #44]	; (8001864 <writeServo+0x4c>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f884 	bl	8000944 <__addsf3>
 800183c:	4603      	mov	r3, r0
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fb4e 	bl	8000ee0 <__aeabi_f2iz>
 8001844:	4603      	mov	r3, r0
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <writeServo+0x50>)
 8001848:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <writeServo+0x50>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <writeServo+0x54>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	44fa0000 	.word	0x44fa0000
 8001860:	43340000 	.word	0x43340000
 8001864:	43fa0000 	.word	0x43fa0000
 8001868:	20000150 	.word	0x20000150
 800186c:	2000006c 	.word	0x2000006c

08001870 <setPower>:

static void setPower(float power)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7fe fdcb 	bl	8000414 <__aeabi_f2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <setPower+0x60>)
 8001884:	f7fe fe1e 	bl	80004c4 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <setPower+0x64>)
 8001896:	f7fe ff3f 	bl	8000718 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <setPower+0x60>)
 80018a8:	f7fe fc56 	bl	8000158 <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f818 	bl	80008e8 <__aeabi_d2iz>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <setPower+0x68>)
 80018bc:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <setPower+0x68>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <setPower+0x6c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	408f4000 	.word	0x408f4000
 80018d4:	40590000 	.word	0x40590000
 80018d8:	2000015c 	.word	0x2000015c
 80018dc:	200000b4 	.word	0x200000b4

080018e0 <brake>:

static void brake()
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <brake+0x30>)
 80018e6:	f240 7229 	movw	r2, #1833	; 0x729
 80018ea:	601a      	str	r2, [r3, #0]
  pulse_servo3 = 500 + 2000 * 60 / 180;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <brake+0x34>)
 80018ee:	f240 428e 	movw	r2, #1166	; 0x48e
 80018f2:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <brake+0x30>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <brake+0x38>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <brake+0x34>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <brake+0x38>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000154 	.word	0x20000154
 8001914:	20000158 	.word	0x20000158
 8001918:	2000006c 	.word	0x2000006c

0800191c <unbrake>:

static void unbrake()
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 90 / 180;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <unbrake+0x30>)
 8001922:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001926:	601a      	str	r2, [r3, #0]
  pulse_servo3 = 500 + 2000 * 90 / 180;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <unbrake+0x34>)
 800192a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800192e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <unbrake+0x30>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <unbrake+0x38>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <unbrake+0x34>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <unbrake+0x38>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000154 	.word	0x20000154
 8001950:	20000158 	.word	0x20000158
 8001954:	2000006c 	.word	0x2000006c

08001958 <TRS>:

static void TRS(void) //微右轉
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  writeServo(112.5);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TRS+0x10>)
 800195e:	f7ff ff5b 	bl	8001818 <writeServo>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	42e10000 	.word	0x42e10000

0800196c <TRL>:

static void TRL(void) //急右轉
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  writeServo(135);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TRL+0x10>)
 8001972:	f7ff ff51 	bl	8001818 <writeServo>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	43070000 	.word	0x43070000

08001980 <TLS>:

static void TLS(void) //微左轉
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  writeServo(67.5);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TLS+0x10>)
 8001986:	f7ff ff47 	bl	8001818 <writeServo>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	42870000 	.word	0x42870000

08001994 <TLL>:

static void TLL(void) //急左轉
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  writeServo(45);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TLL+0x10>)
 800199a:	f7ff ff3d 	bl	8001818 <writeServo>
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	42340000 	.word	0x42340000

080019a8 <DRS>:
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
}

static void DRS(void) //微右飄
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 100 / 180;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <DRS+0x34>)
 80019ae:	f240 624b 	movw	r2, #1611	; 0x64b
 80019b2:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <DRS+0x34>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <DRS+0x38>)
 80019ba:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <DRS+0x34>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <DRS+0x3c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <DRS+0x38>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <DRS+0x3c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(100);
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <DRS+0x40>)
 80019d2:	f7ff ff21 	bl	8001818 <writeServo>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000154 	.word	0x20000154
 80019e0:	20000158 	.word	0x20000158
 80019e4:	2000006c 	.word	0x2000006c
 80019e8:	42c80000 	.word	0x42c80000

080019ec <DRL>:

static void DRL(void) //急右飄
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 110 / 180;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <DRL+0x34>)
 80019f2:	f240 62ba 	movw	r2, #1722	; 0x6ba
 80019f6:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <DRL+0x34>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <DRL+0x38>)
 80019fe:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <DRL+0x34>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <DRL+0x3c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <DRL+0x38>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <DRL+0x3c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(110);
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <DRL+0x40>)
 8001a16:	f7ff feff 	bl	8001818 <writeServo>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000154 	.word	0x20000154
 8001a24:	20000158 	.word	0x20000158
 8001a28:	2000006c 	.word	0x2000006c
 8001a2c:	42dc0000 	.word	0x42dc0000

08001a30 <DLS>:

static void DLS(void) //微左飄
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 80 / 180;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <DLS+0x34>)
 8001a36:	f240 526c 	movw	r2, #1388	; 0x56c
 8001a3a:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <DLS+0x34>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <DLS+0x38>)
 8001a42:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <DLS+0x34>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <DLS+0x3c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <DLS+0x38>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <DLS+0x3c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(80);
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <DLS+0x40>)
 8001a5a:	f7ff fedd 	bl	8001818 <writeServo>
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000154 	.word	0x20000154
 8001a68:	20000158 	.word	0x20000158
 8001a6c:	2000006c 	.word	0x2000006c
 8001a70:	42a00000 	.word	0x42a00000

08001a74 <DLL>:

static void DLL(void) //急左飄
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 70 / 180;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <DLL+0x34>)
 8001a7a:	f240 42fd 	movw	r2, #1277	; 0x4fd
 8001a7e:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <DLL+0x34>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <DLL+0x38>)
 8001a86:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <DLL+0x34>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <DLL+0x3c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <DLL+0x38>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <DLL+0x3c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(70);
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <DLL+0x40>)
 8001a9e:	f7ff febb 	bl	8001818 <writeServo>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000154 	.word	0x20000154
 8001aac:	20000158 	.word	0x20000158
 8001ab0:	2000006c 	.word	0x2000006c
 8001ab4:	428c0000 	.word	0x428c0000

08001ab8 <waitBlack>:
  mode = 0;
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MIN_PULSE_LENGTH);
}

static void waitBlack(int ch)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(&hadc1);
 8001ac0:	4812      	ldr	r0, [pc, #72]	; (8001b0c <waitBlack+0x54>)
 8001ac2:	f000 fd81 	bl	80025c8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4810      	ldr	r0, [pc, #64]	; (8001b0c <waitBlack+0x54>)
 8001aca:	f000 fe2b 	bl	8002724 <HAL_ADC_PollForConversion>
  int value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480e      	ldr	r0, [pc, #56]	; (8001b0c <waitBlack+0x54>)
 8001ad4:	f7ff fe58 	bl	8001788 <Board_Get_ADCChannelValue>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]
  while (value < 1000) //變成白色之前狀態不變
 8001adc:	e00d      	b.n	8001afa <waitBlack+0x42>
  {
    HAL_ADC_Start(&hadc1);
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <waitBlack+0x54>)
 8001ae0:	f000 fd72 	bl	80025c8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4809      	ldr	r0, [pc, #36]	; (8001b0c <waitBlack+0x54>)
 8001ae8:	f000 fe1c 	bl	8002724 <HAL_ADC_PollForConversion>
    value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <waitBlack+0x54>)
 8001af2:	f7ff fe49 	bl	8001788 <Board_Get_ADCChannelValue>
 8001af6:	4603      	mov	r3, r0
 8001af8:	60fb      	str	r3, [r7, #12]
  while (value < 1000) //變成白色之前狀態不變
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b00:	dbed      	blt.n	8001ade <waitBlack+0x26>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000003c 	.word	0x2000003c

08001b10 <lineFollower>:

static void lineFollower(float operationTime, float power, int *tg)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  setPower(power);
 8001b1c:	68b8      	ldr	r0, [r7, #8]
 8001b1e:	f7ff fea7 	bl	8001870 <setPower>
  sec = 0;
 8001b22:	4b60      	ldr	r3, [pc, #384]	; (8001ca4 <lineFollower+0x194>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
  while (sec <= operationTime)
 8001b28:	e15d      	b.n	8001de6 <lineFollower+0x2d6>
  {
    // HAL_TIM_PeriodElapsedCallback(&htim3);
    statecode = 0;
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <lineFollower+0x198>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);
 8001b30:	485e      	ldr	r0, [pc, #376]	; (8001cac <lineFollower+0x19c>)
 8001b32:	f000 fd49 	bl	80025c8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001b36:	2101      	movs	r1, #1
 8001b38:	485c      	ldr	r0, [pc, #368]	; (8001cac <lineFollower+0x19c>)
 8001b3a:	f000 fdf3 	bl	8002724 <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001b3e:	2100      	movs	r1, #0
 8001b40:	485a      	ldr	r0, [pc, #360]	; (8001cac <lineFollower+0x19c>)
 8001b42:	f7ff fe21 	bl	8001788 <Board_Get_ADCChannelValue>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <lineFollower+0x1a0>)
 8001b4c:	601a      	str	r2, [r3, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001b4e:	2101      	movs	r1, #1
 8001b50:	4856      	ldr	r0, [pc, #344]	; (8001cac <lineFollower+0x19c>)
 8001b52:	f7ff fe19 	bl	8001788 <Board_Get_ADCChannelValue>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <lineFollower+0x1a4>)
 8001b5c:	601a      	str	r2, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4852      	ldr	r0, [pc, #328]	; (8001cac <lineFollower+0x19c>)
 8001b62:	f7ff fe11 	bl	8001788 <Board_Get_ADCChannelValue>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <lineFollower+0x1a8>)
 8001b6c:	601a      	str	r2, [r3, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001b6e:	2103      	movs	r1, #3
 8001b70:	484e      	ldr	r0, [pc, #312]	; (8001cac <lineFollower+0x19c>)
 8001b72:	f7ff fe09 	bl	8001788 <Board_Get_ADCChannelValue>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <lineFollower+0x1ac>)
 8001b7c:	601a      	str	r2, [r3, #0]

    if (value0 > 1000)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <lineFollower+0x1a0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b86:	dd05      	ble.n	8001b94 <lineFollower+0x84>
      statecode = statecode | 0b1000; // 8
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <lineFollower+0x198>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <lineFollower+0x198>)
 8001b92:	6013      	str	r3, [r2, #0]
    if (value1 > 1000)
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <lineFollower+0x1a4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b9c:	dd05      	ble.n	8001baa <lineFollower+0x9a>
      statecode = statecode | 0b0100; // 4
 8001b9e:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <lineFollower+0x198>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <lineFollower+0x198>)
 8001ba8:	6013      	str	r3, [r2, #0]
    if (value2 > 1000)
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <lineFollower+0x1a8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb2:	dd05      	ble.n	8001bc0 <lineFollower+0xb0>
      statecode = statecode | 0b0010; // 2
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <lineFollower+0x198>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <lineFollower+0x198>)
 8001bbe:	6013      	str	r3, [r2, #0]
    if (value3 > 1000)
 8001bc0:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <lineFollower+0x1ac>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc8:	dd05      	ble.n	8001bd6 <lineFollower+0xc6>
      statecode = statecode | 0b0001; // 1
 8001bca:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <lineFollower+0x198>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	4a35      	ldr	r2, [pc, #212]	; (8001ca8 <lineFollower+0x198>)
 8001bd4:	6013      	str	r3, [r2, #0]

    tmp = (statecode & 0b1000) >> 3;
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <lineFollower+0x198>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	10db      	asrs	r3, r3, #3
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	4a37      	ldr	r2, [pc, #220]	; (8001cc0 <lineFollower+0x1b0>)
 8001be2:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0100) >> 2;
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <lineFollower+0x198>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	109b      	asrs	r3, r3, #2
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <lineFollower+0x1b0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <lineFollower+0x1b0>)
 8001bf6:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0010) >> 1;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <lineFollower+0x198>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	105b      	asrs	r3, r3, #1
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <lineFollower+0x1b0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <lineFollower+0x1b0>)
 8001c0a:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0001);
 8001c0c:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <lineFollower+0x198>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0201 	and.w	r2, r3, #1
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <lineFollower+0x1b0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <lineFollower+0x1b0>)
 8001c1c:	6013      	str	r3, [r2, #0]
    if (tmp > 2)
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <lineFollower+0x1b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	dd02      	ble.n	8001c2c <lineFollower+0x11c>
    {
      statecode = 0b1111;
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <lineFollower+0x198>)
 8001c28:	220f      	movs	r2, #15
 8001c2a:	601a      	str	r2, [r3, #0]
    }

    switch (statecode)
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <lineFollower+0x198>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	f200 80d1 	bhi.w	8001dd8 <lineFollower+0x2c8>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <lineFollower+0x12c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c95 	.word	0x08001c95
 8001c40:	08001c8f 	.word	0x08001c8f
 8001c44:	08001c89 	.word	0x08001c89
 8001c48:	08001dd9 	.word	0x08001dd9
 8001c4c:	08001c83 	.word	0x08001c83
 8001c50:	08001dd9 	.word	0x08001dd9
 8001c54:	08001dd9 	.word	0x08001dd9
 8001c58:	08001dd9 	.word	0x08001dd9
 8001c5c:	08001c7d 	.word	0x08001c7d
 8001c60:	08001dd9 	.word	0x08001dd9
 8001c64:	08001dd9 	.word	0x08001dd9
 8001c68:	08001dd9 	.word	0x08001dd9
 8001c6c:	08001dd9 	.word	0x08001dd9
 8001c70:	08001dd9 	.word	0x08001dd9
 8001c74:	08001dd9 	.word	0x08001dd9
 8001c78:	08001c9d 	.word	0x08001c9d
    {
    case 0b1000:
      TLL(); //急左轉
 8001c7c:	f7ff fe8a 	bl	8001994 <TLL>
      break;
 8001c80:	e0aa      	b.n	8001dd8 <lineFollower+0x2c8>
    case 0b0100:
      TLS(); //微左轉
 8001c82:	f7ff fe7d 	bl	8001980 <TLS>
      break;
 8001c86:	e0a7      	b.n	8001dd8 <lineFollower+0x2c8>
    case 0b0010:
      TRS(); //微右轉
 8001c88:	f7ff fe66 	bl	8001958 <TRS>
      break;
 8001c8c:	e0a4      	b.n	8001dd8 <lineFollower+0x2c8>
    case 0b0001:
      TRL(); //急右轉
 8001c8e:	f7ff fe6d 	bl	800196c <TRL>
      break;
 8001c92:	e0a1      	b.n	8001dd8 <lineFollower+0x2c8>
    case 0b0000:
      writeServo(90);
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <lineFollower+0x1b4>)
 8001c96:	f7ff fdbf 	bl	8001818 <writeServo>
      break;
 8001c9a:	e09d      	b.n	8001dd8 <lineFollower+0x2c8>
    case 0b1111:
      writeServo(90);
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <lineFollower+0x1b4>)
 8001c9e:	f7ff fdbb 	bl	8001818 <writeServo>
      while (tmp > 1) //變成白色之前狀態不變
 8001ca2:	e08e      	b.n	8001dc2 <lineFollower+0x2b2>
 8001ca4:	20000164 	.word	0x20000164
 8001ca8:	20000148 	.word	0x20000148
 8001cac:	2000003c 	.word	0x2000003c
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	2000014c 	.word	0x2000014c
 8001cc4:	42b40000 	.word	0x42b40000
      {
        inloop = 1;
 8001cc8:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <lineFollower+0x300>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
        statecode = 0;
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <lineFollower+0x304>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start(&hadc1);
 8001cd4:	4850      	ldr	r0, [pc, #320]	; (8001e18 <lineFollower+0x308>)
 8001cd6:	f000 fc77 	bl	80025c8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001cda:	2101      	movs	r1, #1
 8001cdc:	484e      	ldr	r0, [pc, #312]	; (8001e18 <lineFollower+0x308>)
 8001cde:	f000 fd21 	bl	8002724 <HAL_ADC_PollForConversion>
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	484c      	ldr	r0, [pc, #304]	; (8001e18 <lineFollower+0x308>)
 8001ce6:	f7ff fd4f 	bl	8001788 <Board_Get_ADCChannelValue>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <lineFollower+0x30c>)
 8001cf0:	601a      	str	r2, [r3, #0]
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4848      	ldr	r0, [pc, #288]	; (8001e18 <lineFollower+0x308>)
 8001cf6:	f7ff fd47 	bl	8001788 <Board_Get_ADCChannelValue>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <lineFollower+0x310>)
 8001d00:	601a      	str	r2, [r3, #0]
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001d02:	2102      	movs	r1, #2
 8001d04:	4844      	ldr	r0, [pc, #272]	; (8001e18 <lineFollower+0x308>)
 8001d06:	f7ff fd3f 	bl	8001788 <Board_Get_ADCChannelValue>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <lineFollower+0x314>)
 8001d10:	601a      	str	r2, [r3, #0]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001d12:	2103      	movs	r1, #3
 8001d14:	4840      	ldr	r0, [pc, #256]	; (8001e18 <lineFollower+0x308>)
 8001d16:	f7ff fd37 	bl	8001788 <Board_Get_ADCChannelValue>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <lineFollower+0x318>)
 8001d20:	601a      	str	r2, [r3, #0]

        if (value0 > 1000)
 8001d22:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <lineFollower+0x30c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2a:	dd05      	ble.n	8001d38 <lineFollower+0x228>
          statecode = statecode | 0b1000; // 8
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <lineFollower+0x304>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <lineFollower+0x304>)
 8001d36:	6013      	str	r3, [r2, #0]
        if (value1 > 1000)
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <lineFollower+0x310>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d40:	dd05      	ble.n	8001d4e <lineFollower+0x23e>
          statecode = statecode | 0b0100; // 4
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <lineFollower+0x304>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <lineFollower+0x304>)
 8001d4c:	6013      	str	r3, [r2, #0]
        if (value2 > 1000)
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <lineFollower+0x314>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d56:	dd05      	ble.n	8001d64 <lineFollower+0x254>
          statecode = statecode | 0b0010; // 2
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <lineFollower+0x304>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f043 0302 	orr.w	r3, r3, #2
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <lineFollower+0x304>)
 8001d62:	6013      	str	r3, [r2, #0]
        if (value3 > 1000)
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <lineFollower+0x318>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6c:	dd05      	ble.n	8001d7a <lineFollower+0x26a>
          statecode = statecode | 0b0001; // 1
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <lineFollower+0x304>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <lineFollower+0x304>)
 8001d78:	6013      	str	r3, [r2, #0]

        tmp = (statecode & 0b1000) >> 3;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <lineFollower+0x304>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	10db      	asrs	r3, r3, #3
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <lineFollower+0x31c>)
 8001d86:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0100) >> 2;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <lineFollower+0x304>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	109b      	asrs	r3, r3, #2
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <lineFollower+0x31c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <lineFollower+0x31c>)
 8001d9a:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0010) >> 1;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <lineFollower+0x304>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	105b      	asrs	r3, r3, #1
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <lineFollower+0x31c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <lineFollower+0x31c>)
 8001dae:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0001);
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <lineFollower+0x304>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <lineFollower+0x31c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <lineFollower+0x31c>)
 8001dc0:	6013      	str	r3, [r2, #0]
      while (tmp > 1) //變成白色之前狀態不變
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <lineFollower+0x31c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	f73f af7e 	bgt.w	8001cc8 <lineFollower+0x1b8>
      }
      *tg += 1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
      break;
 8001dd6:	bf00      	nop
    }

    if (operationTime == 100)
 8001dd8:	4915      	ldr	r1, [pc, #84]	; (8001e30 <lineFollower+0x320>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff f84e 	bl	8000e7c <__aeabi_fcmpeq>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10e      	bne.n	8001e04 <lineFollower+0x2f4>
  while (sec <= operationTime)
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <lineFollower+0x324>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fe5e 	bl	8000aac <__aeabi_i2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff f85f 	bl	8000eb8 <__aeabi_fcmpge>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f ae94 	bne.w	8001b2a <lineFollower+0x1a>
      break;
  }
}
 8001e02:	e000      	b.n	8001e06 <lineFollower+0x2f6>
      break;
 8001e04:	bf00      	nop
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000144 	.word	0x20000144
 8001e14:	20000148 	.word	0x20000148
 8001e18:	2000003c 	.word	0x2000003c
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000008 	.word	0x20000008
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	2000014c 	.word	0x2000014c
 8001e30:	42c80000 	.word	0x42c80000
 8001e34:	20000164 	.word	0x20000164

08001e38 <lineFollowerBackward>:

static void lineFollowerBackward(float operationTime, float power, int *tg)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  setPower(power);
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f7ff fd13 	bl	8001870 <setPower>
  sec = 0;
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <lineFollowerBackward+0x164>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  while (sec <= operationTime)
 8001e50:	e090      	b.n	8001f74 <lineFollowerBackward+0x13c>
  {
    // HAL_TIM_PeriodElapsedCallback(&htim3);
    statecode = 0;
 8001e52:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);
 8001e58:	4852      	ldr	r0, [pc, #328]	; (8001fa4 <lineFollowerBackward+0x16c>)
 8001e5a:	f000 fbb5 	bl	80025c8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4850      	ldr	r0, [pc, #320]	; (8001fa4 <lineFollowerBackward+0x16c>)
 8001e62:	f000 fc5f 	bl	8002724 <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001e66:	2100      	movs	r1, #0
 8001e68:	484e      	ldr	r0, [pc, #312]	; (8001fa4 <lineFollowerBackward+0x16c>)
 8001e6a:	f7ff fc8d 	bl	8001788 <Board_Get_ADCChannelValue>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <lineFollowerBackward+0x170>)
 8001e74:	601a      	str	r2, [r3, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	484a      	ldr	r0, [pc, #296]	; (8001fa4 <lineFollowerBackward+0x16c>)
 8001e7a:	f7ff fc85 	bl	8001788 <Board_Get_ADCChannelValue>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <lineFollowerBackward+0x174>)
 8001e84:	601a      	str	r2, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001e86:	2102      	movs	r1, #2
 8001e88:	4846      	ldr	r0, [pc, #280]	; (8001fa4 <lineFollowerBackward+0x16c>)
 8001e8a:	f7ff fc7d 	bl	8001788 <Board_Get_ADCChannelValue>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <lineFollowerBackward+0x178>)
 8001e94:	601a      	str	r2, [r3, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001e96:	2103      	movs	r1, #3
 8001e98:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <lineFollowerBackward+0x16c>)
 8001e9a:	f7ff fc75 	bl	8001788 <Board_Get_ADCChannelValue>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <lineFollowerBackward+0x17c>)
 8001ea4:	601a      	str	r2, [r3, #0]

    if (value0 > 1000)
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <lineFollowerBackward+0x170>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eae:	dd05      	ble.n	8001ebc <lineFollowerBackward+0x84>
      statecode = statecode | 0b0001; // 8
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	4a39      	ldr	r2, [pc, #228]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001eba:	6013      	str	r3, [r2, #0]
    if (value1 > 1000)
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <lineFollowerBackward+0x174>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec4:	dd05      	ble.n	8001ed2 <lineFollowerBackward+0x9a>
      statecode = statecode | 0b0010; // 4
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	4a34      	ldr	r2, [pc, #208]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001ed0:	6013      	str	r3, [r2, #0]
    if (value2 > 1000)
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <lineFollowerBackward+0x178>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eda:	dd05      	ble.n	8001ee8 <lineFollowerBackward+0xb0>
      statecode = statecode | 0b0100; // 2
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001ee6:	6013      	str	r3, [r2, #0]
    if (value3 > 1000)
 8001ee8:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <lineFollowerBackward+0x17c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef0:	dd05      	ble.n	8001efe <lineFollowerBackward+0xc6>
      statecode = statecode | 0b1000; // 1
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	4a29      	ldr	r2, [pc, #164]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001efc:	6013      	str	r3, [r2, #0]

    switch (statecode)
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <lineFollowerBackward+0x168>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d836      	bhi.n	8001f74 <lineFollowerBackward+0x13c>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <lineFollowerBackward+0xd4>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f49 	.word	0x08001f49
 8001f10:	08001f43 	.word	0x08001f43
 8001f14:	08001f3d 	.word	0x08001f3d
 8001f18:	08001f75 	.word	0x08001f75
 8001f1c:	08001f37 	.word	0x08001f37
 8001f20:	08001f75 	.word	0x08001f75
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001f75 	.word	0x08001f75
 8001f2c:	08001f31 	.word	0x08001f31
    {
    case 0b1000:
      DLL(); //急左飄
 8001f30:	f7ff fda0 	bl	8001a74 <DLL>
      break;
 8001f34:	e01e      	b.n	8001f74 <lineFollowerBackward+0x13c>
    case 0b0100:
      DLS(); //微左飄
 8001f36:	f7ff fd7b 	bl	8001a30 <DLS>
      break;
 8001f3a:	e01b      	b.n	8001f74 <lineFollowerBackward+0x13c>
    case 0b0010:
      DRS(); //微右飄
 8001f3c:	f7ff fd34 	bl	80019a8 <DRS>
      break;
 8001f40:	e018      	b.n	8001f74 <lineFollowerBackward+0x13c>
    case 0b0001:
      DRL(); //急右飄
 8001f42:	f7ff fd53 	bl	80019ec <DRL>
      break;
 8001f46:	e015      	b.n	8001f74 <lineFollowerBackward+0x13c>
    case 0b0000:
      pulse_servo2 = 500 + 2000 * 90 / 180;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <lineFollowerBackward+0x180>)
 8001f4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f4e:	601a      	str	r2, [r3, #0]
      pulse_servo3 = pulse_servo2;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <lineFollowerBackward+0x180>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <lineFollowerBackward+0x184>)
 8001f56:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <lineFollowerBackward+0x180>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <lineFollowerBackward+0x188>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <lineFollowerBackward+0x184>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <lineFollowerBackward+0x188>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c
      writeServo(90);
 8001f6c:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <lineFollowerBackward+0x18c>)
 8001f6e:	f7ff fc53 	bl	8001818 <writeServo>
      break;
 8001f72:	bf00      	nop
  while (sec <= operationTime)
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <lineFollowerBackward+0x164>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fd97 	bl	8000aac <__aeabi_i2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7fe ff98 	bl	8000eb8 <__aeabi_fcmpge>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f47f af61 	bne.w	8001e52 <lineFollowerBackward+0x1a>
    }

    if (operationTime == 100)
      brake;
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000164 	.word	0x20000164
 8001fa0:	20000148 	.word	0x20000148
 8001fa4:	2000003c 	.word	0x2000003c
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20000154 	.word	0x20000154
 8001fbc:	20000158 	.word	0x20000158
 8001fc0:	2000006c 	.word	0x2000006c
 8001fc4:	42b40000 	.word	0x42b40000

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>
	...

08001fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_MspInit+0x5c>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_MspInit+0x5c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_MspInit+0x5c>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_MspInit+0x5c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_MspInit+0x60>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_MspInit+0x60>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000

08002038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_ADC_MspInit+0x6c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d121      	bne.n	800209c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_ADC_MspInit+0x70>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <HAL_ADC_MspInit+0x70>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_ADC_MspInit+0x70>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_ADC_MspInit+0x70>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_ADC_MspInit+0x70>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_ADC_MspInit+0x70>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002088:	230f      	movs	r3, #15
 800208a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208c:	2303      	movs	r3, #3
 800208e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_ADC_MspInit+0x74>)
 8002098:	f000 fef8 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40012400 	.word	0x40012400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010800 	.word	0x40010800

080020b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_TIM_PWM_MspInit+0x58>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10c      	bne.n	80020dc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_TIM_PWM_MspInit+0x5c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_TIM_PWM_MspInit+0x5c>)
 80020c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_TIM_PWM_MspInit+0x5c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020da:	e010      	b.n	80020fe <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e4:	d10b      	bne.n	80020fe <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_TIM_PWM_MspInit+0x5c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_TIM_PWM_MspInit+0x5c>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_TIM_PWM_MspInit+0x5c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_TIM_Base_MspInit+0x44>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d113      	bne.n	800214a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	201d      	movs	r0, #29
 8002140:	f000 fe6d 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002144:	201d      	movs	r0, #29
 8002146:	f000 fe86 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40000400 	.word	0x40000400
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_TIM_MspPostInit+0xbc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d119      	bne.n	80021b0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6193      	str	r3, [r2, #24]
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002194:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <HAL_TIM_MspPostInit+0xc4>)
 80021aa:	f000 fe6f 	bl	8002e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021ae:	e02f      	b.n	8002210 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d12a      	bne.n	8002210 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6193      	str	r3, [r2, #24]
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	480e      	ldr	r0, [pc, #56]	; (8002220 <HAL_TIM_MspPostInit+0xc4>)
 80021e8:	f000 fe50 	bl	8002e8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_TIM_MspPostInit+0xc8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	4a06      	ldr	r2, [pc, #24]	; (8002224 <HAL_TIM_MspPostInit+0xc8>)
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	6053      	str	r3, [r2, #4]
}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40010800 	.word	0x40010800
 8002224:	40010000 	.word	0x40010000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226e:	f000 f893 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM3_IRQHandler+0x10>)
 800227e:	f001 fed9 	bl	8004034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200000fc 	.word	0x200000fc

0800228c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002290:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002294:	f000 ffa8 	bl	80031e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800229c:	f000 ffa4 	bl	80031e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80022a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022a4:	f000 ffa0 	bl	80031e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80022a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022ac:	f000 ff9c 	bl	80031e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022c2:	490d      	ldr	r1, [pc, #52]	; (80022f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d8:	4c0a      	ldr	r4, [pc, #40]	; (8002304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022e6:	f7ff ffe5 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f002 fca7 	bl	8004c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ee:	f7fe fe1d 	bl	8000f2c <main>
  bx lr
 80022f2:	4770      	bx	lr
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80022fc:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 8002300:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002304:	20000174 	.word	0x20000174

08002308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_2_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_Init+0x28>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <HAL_Init+0x28>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f000 fd73 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002322:	200f      	movs	r0, #15
 8002324:	f000 f808 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002328:	f7ff fe54 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x54>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_InitTick+0x58>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fd8b 	bl	8002e72 <HAL_SYSTICK_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00e      	b.n	8002384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d80a      	bhi.n	8002382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002374:	f000 fd53 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_InitTick+0x5c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000014 	.word	0x20000014
 8002390:	2000001c 	.word	0x2000001c
 8002394:	20000018 	.word	0x20000018

08002398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_IncTick+0x1c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_IncTick+0x20>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_IncTick+0x20>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	20000170 	.word	0x20000170

080023bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <HAL_GetTick+0x10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	20000170 	.word	0x20000170

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fff0 	bl	80023bc <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffe0 	bl	80023bc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000001c 	.word	0x2000001c

08002418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0be      	b.n	80025b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fdee 	bl	8002038 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fbc5 	bl	8002bec <ADC_ConversionStop_Disable>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 8099 	bne.w	80025a6 <HAL_ADC_Init+0x18e>
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 8095 	bne.w	80025a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002484:	f023 0302 	bic.w	r3, r3, #2
 8002488:	f043 0202 	orr.w	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002498:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7b1b      	ldrb	r3, [r3, #12]
 800249e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b0:	d003      	beq.n	80024ba <HAL_ADC_Init+0xa2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_ADC_Init+0xa8>
 80024ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024be:	e000      	b.n	80024c2 <HAL_ADC_Init+0xaa>
 80024c0:	2300      	movs	r3, #0
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7d1b      	ldrb	r3, [r3, #20]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d119      	bne.n	8002504 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7b1b      	ldrb	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	3b01      	subs	r3, #1
 80024de:	035a      	lsls	r2, r3, #13
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e00b      	b.n	8002504 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <HAL_ADC_Init+0x1a8>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	430b      	orrs	r3, r1
 800252a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002534:	d003      	beq.n	800253e <HAL_ADC_Init+0x126>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d104      	bne.n	8002548 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	3b01      	subs	r3, #1
 8002544:	051b      	lsls	r3, r3, #20
 8002546:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	430a      	orrs	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_ADC_Init+0x1ac>)
 8002564:	4013      	ands	r3, r2
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	429a      	cmp	r2, r3
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002582:	e018      	b.n	80025b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f023 0312 	bic.w	r3, r3, #18
 800258c:	f043 0210 	orr.w	r2, r3, #16
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025a4:	e007      	b.n	80025b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	ffe1f7fd 	.word	0xffe1f7fd
 80025c4:	ff1f0efe 	.word	0xff1f0efe

080025c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Start+0x1a>
 80025de:	2302      	movs	r3, #2
 80025e0:	e098      	b.n	8002714 <HAL_ADC_Start+0x14c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 faa4 	bl	8002b38 <ADC_Enable>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8087 	bne.w	800270a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a41      	ldr	r2, [pc, #260]	; (800271c <HAL_ADC_Start+0x154>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d105      	bne.n	8002626 <HAL_ADC_Start+0x5e>
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_ADC_Start+0x158>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d115      	bne.n	8002652 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d026      	beq.n	800268e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002648:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002650:	e01d      	b.n	800268e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_ADC_Start+0x158>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_ADC_Start+0xaa>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_ADC_Start+0x154>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10d      	bne.n	800268e <HAL_ADC_Start+0xc6>
 8002672:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_ADC_Start+0x158>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	f023 0206 	bic.w	r2, r3, #6
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80026a6:	e002      	b.n	80026ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f06f 0202 	mvn.w	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ce:	d113      	bne.n	80026f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_ADC_Start+0x154>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d105      	bne.n	80026e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_ADC_Start+0x158>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	e00c      	b.n	8002712 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e003      	b.n	8002712 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40012800 	.word	0x40012800
 8002720:	40012400 	.word	0x40012400

08002724 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800273a:	f7ff fe3f 	bl	80023bc <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	f043 0220 	orr.w	r2, r3, #32
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0d3      	b.n	800290e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d131      	bne.n	80027d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800277e:	2b00      	cmp	r3, #0
 8002780:	d12a      	bne.n	80027d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002782:	e021      	b.n	80027c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278a:	d01d      	beq.n	80027c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_ADC_PollForConversion+0x7e>
 8002792:	f7ff fe13 	bl	80023bc <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d212      	bcs.n	80027c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0a2      	b.n	800290e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0d6      	beq.n	8002784 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027d6:	e070      	b.n	80028ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80027d8:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <HAL_ADC_PollForConversion+0x1f4>)
 80027da:	681c      	ldr	r4, [r3, #0]
 80027dc:	2002      	movs	r0, #2
 80027de:	f001 f9e1 	bl	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 80027e2:	4603      	mov	r3, r0
 80027e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	4b4b      	ldr	r3, [pc, #300]	; (800291c <HAL_ADC_PollForConversion+0x1f8>)
 80027f0:	400b      	ands	r3, r1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_ADC_PollForConversion+0x104>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68d9      	ldr	r1, [r3, #12]
 80027fc:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_ADC_PollForConversion+0x1fc>)
 80027fe:	400b      	ands	r3, r1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <HAL_ADC_PollForConversion+0x104>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6919      	ldr	r1, [r3, #16]
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_ADC_PollForConversion+0x200>)
 800280c:	400b      	ands	r3, r1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <HAL_ADC_PollForConversion+0x100>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_ADC_PollForConversion+0x204>)
 800281a:	400b      	ands	r3, r1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_PollForConversion+0x100>
 8002820:	2314      	movs	r3, #20
 8002822:	e020      	b.n	8002866 <HAL_ADC_PollForConversion+0x142>
 8002824:	2329      	movs	r3, #41	; 0x29
 8002826:	e01e      	b.n	8002866 <HAL_ADC_PollForConversion+0x142>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6919      	ldr	r1, [r3, #16]
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_ADC_PollForConversion+0x200>)
 8002830:	400b      	ands	r3, r1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_ADC_PollForConversion+0x120>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68d9      	ldr	r1, [r3, #12]
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_ADC_PollForConversion+0x204>)
 800283e:	400b      	ands	r3, r1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <HAL_ADC_PollForConversion+0x13c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_ADC_PollForConversion+0x208>)
 800284c:	400b      	ands	r3, r1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <HAL_ADC_PollForConversion+0x140>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68d9      	ldr	r1, [r3, #12]
 8002858:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_ADC_PollForConversion+0x208>)
 800285a:	400b      	ands	r3, r1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_ADC_PollForConversion+0x140>
 8002860:	2354      	movs	r3, #84	; 0x54
 8002862:	e000      	b.n	8002866 <HAL_ADC_PollForConversion+0x142>
 8002864:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800286c:	e021      	b.n	80028b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002874:	d01a      	beq.n	80028ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_ADC_PollForConversion+0x168>
 800287c:	f7ff fd9e 	bl	80023bc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d20f      	bcs.n	80028ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d90b      	bls.n	80028ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e030      	b.n	800290e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3301      	adds	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d8d9      	bhi.n	800286e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0212 	mvn.w	r2, #18
 80028c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028de:	d115      	bne.n	800290c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d111      	bne.n	800290c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd90      	pop	{r4, r7, pc}
 8002916:	bf00      	nop
 8002918:	20000014 	.word	0x20000014
 800291c:	24924924 	.word	0x24924924
 8002920:	00924924 	.word	0x00924924
 8002924:	12492492 	.word	0x12492492
 8002928:	00492492 	.word	0x00492492
 800292c:	00249249 	.word	0x00249249

08002930 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x20>
 8002964:	2302      	movs	r3, #2
 8002966:	e0dc      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x1da>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d81c      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b05      	subs	r3, #5
 800298a:	221f      	movs	r2, #31
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b05      	subs	r3, #5
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34
 80029b0:	e03c      	b.n	8002a2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d81c      	bhi.n	80029f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b23      	subs	r3, #35	; 0x23
 80029cc:	221f      	movs	r2, #31
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	4019      	ands	r1, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	3b23      	subs	r3, #35	; 0x23
 80029e6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
 80029f2:	e01b      	b.n	8002a2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b41      	subs	r3, #65	; 0x41
 8002a06:	221f      	movs	r2, #31
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4019      	ands	r1, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b41      	subs	r3, #65	; 0x41
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d91c      	bls.n	8002a6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68d9      	ldr	r1, [r3, #12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	3b1e      	subs	r3, #30
 8002a46:	2207      	movs	r2, #7
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4019      	ands	r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6898      	ldr	r0, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b1e      	subs	r3, #30
 8002a60:	fa00 f203 	lsl.w	r2, r0, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	e019      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6919      	ldr	r1, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	2207      	movs	r2, #7
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6898      	ldr	r0, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d003      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aae:	2b11      	cmp	r3, #17
 8002ab0:	d132      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d125      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d126      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ad8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d11a      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9a      	lsrs	r2, r3, #18
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002af8:	e002      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f9      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x1b2>
 8002b06:	e007      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	40012400 	.word	0x40012400
 8002b30:	20000014 	.word	0x20000014
 8002b34:	431bde83 	.word	0x431bde83

08002b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d040      	beq.n	8002bd8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b66:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <ADC_Enable+0xac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <ADC_Enable+0xb0>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b74:	e002      	b.n	8002b7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f9      	bne.n	8002b76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b82:	f7ff fc1b 	bl	80023bc <HAL_GetTick>
 8002b86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b88:	e01f      	b.n	8002bca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b8a:	f7ff fc17 	bl	80023bc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d918      	bls.n	8002bca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d011      	beq.n	8002bca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d1d8      	bne.n	8002b8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000014 	.word	0x20000014
 8002be8:	431bde83 	.word	0x431bde83

08002bec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d12e      	bne.n	8002c64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c16:	f7ff fbd1 	bl	80023bc <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c1c:	e01b      	b.n	8002c56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c1e:	f7ff fbcd 	bl	80023bc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d914      	bls.n	8002c56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10d      	bne.n	8002c56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e007      	b.n	8002c66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d0dc      	beq.n	8002c1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4906      	ldr	r1, [pc, #24]	; (8002d08 <__NVIC_EnableIRQ+0x34>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de8:	f7ff ff90 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff2d 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff42 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff90 	bl	8002d60 <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5f 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff35 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9e:	e161      	b.n	8003164 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f040 8150 	bne.w	800315e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a97      	ldr	r2, [pc, #604]	; (8003120 <HAL_GPIO_Init+0x294>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d05e      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ec8:	4a95      	ldr	r2, [pc, #596]	; (8003120 <HAL_GPIO_Init+0x294>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d875      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002ece:	4a95      	ldr	r2, [pc, #596]	; (8003124 <HAL_GPIO_Init+0x298>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d058      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ed4:	4a93      	ldr	r2, [pc, #588]	; (8003124 <HAL_GPIO_Init+0x298>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d86f      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002eda:	4a93      	ldr	r2, [pc, #588]	; (8003128 <HAL_GPIO_Init+0x29c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d052      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ee0:	4a91      	ldr	r2, [pc, #580]	; (8003128 <HAL_GPIO_Init+0x29c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d869      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002ee6:	4a91      	ldr	r2, [pc, #580]	; (800312c <HAL_GPIO_Init+0x2a0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d04c      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002eec:	4a8f      	ldr	r2, [pc, #572]	; (800312c <HAL_GPIO_Init+0x2a0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d863      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002ef2:	4a8f      	ldr	r2, [pc, #572]	; (8003130 <HAL_GPIO_Init+0x2a4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d046      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ef8:	4a8d      	ldr	r2, [pc, #564]	; (8003130 <HAL_GPIO_Init+0x2a4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d85d      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002efe:	2b12      	cmp	r3, #18
 8002f00:	d82a      	bhi.n	8002f58 <HAL_GPIO_Init+0xcc>
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d859      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <HAL_GPIO_Init+0x80>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f87 	.word	0x08002f87
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002f73 	.word	0x08002f73
 8002f18:	08002fb5 	.word	0x08002fb5
 8002f1c:	08002fbb 	.word	0x08002fbb
 8002f20:	08002fbb 	.word	0x08002fbb
 8002f24:	08002fbb 	.word	0x08002fbb
 8002f28:	08002fbb 	.word	0x08002fbb
 8002f2c:	08002fbb 	.word	0x08002fbb
 8002f30:	08002fbb 	.word	0x08002fbb
 8002f34:	08002fbb 	.word	0x08002fbb
 8002f38:	08002fbb 	.word	0x08002fbb
 8002f3c:	08002fbb 	.word	0x08002fbb
 8002f40:	08002fbb 	.word	0x08002fbb
 8002f44:	08002fbb 	.word	0x08002fbb
 8002f48:	08002fbb 	.word	0x08002fbb
 8002f4c:	08002fbb 	.word	0x08002fbb
 8002f50:	08002f69 	.word	0x08002f69
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	4a76      	ldr	r2, [pc, #472]	; (8003134 <HAL_GPIO_Init+0x2a8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f5e:	e02c      	b.n	8002fba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	623b      	str	r3, [r7, #32]
          break;
 8002f66:	e029      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e024      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	3308      	adds	r3, #8
 8002f78:	623b      	str	r3, [r7, #32]
          break;
 8002f7a:	e01f      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	330c      	adds	r3, #12
 8002f82:	623b      	str	r3, [r7, #32]
          break;
 8002f84:	e01a      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e013      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	611a      	str	r2, [r3, #16]
          break;
 8002fa6:	e009      	b.n	8002fbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	615a      	str	r2, [r3, #20]
          break;
 8002fb2:	e003      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          break;
 8002fba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2bff      	cmp	r3, #255	; 0xff
 8002fc0:	d801      	bhi.n	8002fc6 <HAL_GPIO_Init+0x13a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	e001      	b.n	8002fca <HAL_GPIO_Init+0x13e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2bff      	cmp	r3, #255	; 0xff
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_GPIO_Init+0x14c>
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	e002      	b.n	8002fde <HAL_GPIO_Init+0x152>
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	3b08      	subs	r3, #8
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	210f      	movs	r1, #15
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a9 	beq.w	800315e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800300c:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_GPIO_Init+0x2ac>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4a49      	ldr	r2, [pc, #292]	; (8003138 <HAL_GPIO_Init+0x2ac>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6193      	str	r3, [r2, #24]
 8003018:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_GPIO_Init+0x2ac>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003024:	4a45      	ldr	r2, [pc, #276]	; (800313c <HAL_GPIO_Init+0x2b0>)
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <HAL_GPIO_Init+0x2b4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1e0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_GPIO_Init+0x2b8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1dc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3b      	ldr	r2, [pc, #236]	; (8003148 <HAL_GPIO_Init+0x2bc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1d8>
 8003060:	2302      	movs	r3, #2
 8003062:	e004      	b.n	800306e <HAL_GPIO_Init+0x1e2>
 8003064:	2303      	movs	r3, #3
 8003066:	e002      	b.n	800306e <HAL_GPIO_Init+0x1e2>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_GPIO_Init+0x1e2>
 800306c:	2300      	movs	r3, #0
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	f002 0203 	and.w	r2, r2, #3
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4093      	lsls	r3, r2
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800307e:	492f      	ldr	r1, [pc, #188]	; (800313c <HAL_GPIO_Init+0x2b0>)
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_GPIO_Init+0x2c0>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	492b      	ldr	r1, [pc, #172]	; (800314c <HAL_GPIO_Init+0x2c0>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	e006      	b.n	80030b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	4927      	ldr	r1, [pc, #156]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	4921      	ldr	r1, [pc, #132]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	491d      	ldr	r1, [pc, #116]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030d8:	4013      	ands	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4917      	ldr	r1, [pc, #92]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_GPIO_Init+0x2c0>)
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	4913      	ldr	r1, [pc, #76]	; (800314c <HAL_GPIO_Init+0x2c0>)
 8003100:	4013      	ands	r3, r2
 8003102:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003110:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_GPIO_Init+0x2c0>)
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	490d      	ldr	r1, [pc, #52]	; (800314c <HAL_GPIO_Init+0x2c0>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
 800311c:	e01f      	b.n	800315e <HAL_GPIO_Init+0x2d2>
 800311e:	bf00      	nop
 8003120:	10320000 	.word	0x10320000
 8003124:	10310000 	.word	0x10310000
 8003128:	10220000 	.word	0x10220000
 800312c:	10210000 	.word	0x10210000
 8003130:	10120000 	.word	0x10120000
 8003134:	10110000 	.word	0x10110000
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000
 8003140:	40010800 	.word	0x40010800
 8003144:	40010c00 	.word	0x40010c00
 8003148:	40011000 	.word	0x40011000
 800314c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_GPIO_Init+0x2f4>)
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	43db      	mvns	r3, r3
 8003158:	4909      	ldr	r1, [pc, #36]	; (8003180 <HAL_GPIO_Init+0x2f4>)
 800315a:	4013      	ands	r3, r2
 800315c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	3301      	adds	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f ae96 	bne.w	8002ea0 <HAL_GPIO_Init+0x14>
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	372c      	adds	r7, #44	; 0x2c
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031a0:	e003      	b.n	80031aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031a2:	887b      	ldrh	r3, [r7, #2]
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43d9      	mvns	r1, r3
 80031d2:	887b      	ldrh	r3, [r7, #2]
 80031d4:	400b      	ands	r3, r1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	611a      	str	r2, [r3, #16]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f806 	bl	8003218 <HAL_GPIO_EXTI_Callback>
  }
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40010400 	.word	0x40010400

08003218 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e272      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8087 	beq.w	800335a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800324c:	4b92      	ldr	r3, [pc, #584]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b04      	cmp	r3, #4
 8003256:	d00c      	beq.n	8003272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003258:	4b8f      	ldr	r3, [pc, #572]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d112      	bne.n	800328a <HAL_RCC_OscConfig+0x5e>
 8003264:	4b8c      	ldr	r3, [pc, #560]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d10b      	bne.n	800328a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003272:	4b89      	ldr	r3, [pc, #548]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d06c      	beq.n	8003358 <HAL_RCC_OscConfig+0x12c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d168      	bne.n	8003358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e24c      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d106      	bne.n	80032a2 <HAL_RCC_OscConfig+0x76>
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a7f      	ldr	r2, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e02e      	b.n	8003300 <HAL_RCC_OscConfig+0xd4>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x98>
 80032aa:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b78      	ldr	r3, [pc, #480]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a77      	ldr	r2, [pc, #476]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e01d      	b.n	8003300 <HAL_RCC_OscConfig+0xd4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0xbc>
 80032ce:	4b72      	ldr	r3, [pc, #456]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a71      	ldr	r2, [pc, #452]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6e      	ldr	r2, [pc, #440]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0xd4>
 80032e8:	4b6b      	ldr	r3, [pc, #428]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6a      	ldr	r2, [pc, #424]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b68      	ldr	r3, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a67      	ldr	r2, [pc, #412]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7ff f858 	bl	80023bc <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7ff f854 	bl	80023bc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e200      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0xe4>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7ff f844 	bl	80023bc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7ff f840 	bl	80023bc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e1ec      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x10c>
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d063      	beq.n	800342e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003366:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003372:	4b49      	ldr	r3, [pc, #292]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d11c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x18c>
 800337e:	4b46      	ldr	r3, [pc, #280]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0x176>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1c0      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4939      	ldr	r1, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	e03a      	b.n	800342e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c0:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCC_OscConfig+0x270>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe fff9 	bl	80023bc <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fe fff5 	bl	80023bc <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1a1      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4927      	ldr	r1, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b26      	ldr	r3, [pc, #152]	; (800349c <HAL_RCC_OscConfig+0x270>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe ffd8 	bl	80023bc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003410:	f7fe ffd4 	bl	80023bc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e180      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d03a      	beq.n	80034b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d019      	beq.n	8003476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003448:	f7fe ffb8 	bl	80023bc <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003450:	f7fe ffb4 	bl	80023bc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e160      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <HAL_RCC_OscConfig+0x26c>)
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800346e:	2001      	movs	r0, #1
 8003470:	f000 fac4 	bl	80039fc <RCC_Delay>
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_RCC_OscConfig+0x274>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347c:	f7fe ff9e 	bl	80023bc <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003482:	e00f      	b.n	80034a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7fe ff9a 	bl	80023bc <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d908      	bls.n	80034a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e146      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	42420000 	.word	0x42420000
 80034a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b92      	ldr	r3, [pc, #584]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e9      	bne.n	8003484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a6 	beq.w	800360a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b8b      	ldr	r3, [pc, #556]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	4b88      	ldr	r3, [pc, #544]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	4a87      	ldr	r2, [pc, #540]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d8:	61d3      	str	r3, [r2, #28]
 80034da:	4b85      	ldr	r3, [pc, #532]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b82      	ldr	r3, [pc, #520]	; (80036f4 <HAL_RCC_OscConfig+0x4c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d118      	bne.n	8003528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f6:	4b7f      	ldr	r3, [pc, #508]	; (80036f4 <HAL_RCC_OscConfig+0x4c8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7e      	ldr	r2, [pc, #504]	; (80036f4 <HAL_RCC_OscConfig+0x4c8>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7fe ff5b 	bl	80023bc <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7fe ff57 	bl	80023bc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	; 0x64
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e103      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	4b75      	ldr	r3, [pc, #468]	; (80036f4 <HAL_RCC_OscConfig+0x4c8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x312>
 8003530:	4b6f      	ldr	r3, [pc, #444]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a6e      	ldr	r2, [pc, #440]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	e02d      	b.n	800359a <HAL_RCC_OscConfig+0x36e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x334>
 8003546:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a66      	ldr	r2, [pc, #408]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6213      	str	r3, [r2, #32]
 800355e:	e01c      	b.n	800359a <HAL_RCC_OscConfig+0x36e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b05      	cmp	r3, #5
 8003566:	d10c      	bne.n	8003582 <HAL_RCC_OscConfig+0x356>
 8003568:	4b61      	ldr	r3, [pc, #388]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a60      	ldr	r2, [pc, #384]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	6213      	str	r3, [r2, #32]
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	e00b      	b.n	800359a <HAL_RCC_OscConfig+0x36e>
 8003582:	4b5b      	ldr	r3, [pc, #364]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d015      	beq.n	80035ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a2:	f7fe ff0b 	bl	80023bc <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe ff07 	bl	80023bc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0b1      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ee      	beq.n	80035aa <HAL_RCC_OscConfig+0x37e>
 80035cc:	e014      	b.n	80035f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe fef5 	bl	80023bc <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fe fef1 	bl	80023bc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e09b      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ee      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d105      	bne.n	800360a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fe:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8087 	beq.w	8003722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d061      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d146      	bne.n	80036b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003628:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <HAL_RCC_OscConfig+0x4cc>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe fec5 	bl	80023bc <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe fec1 	bl	80023bc <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e06d      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003648:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d108      	bne.n	8003670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4921      	ldr	r1, [pc, #132]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a19      	ldr	r1, [r3, #32]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	430b      	orrs	r3, r1
 8003682:	491b      	ldr	r1, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x4cc>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fe95 	bl	80023bc <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fe91 	bl	80023bc <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x46a>
 80036b4:	e035      	b.n	8003722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_OscConfig+0x4cc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe fe7e 	bl	80023bc <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fe7a 	bl	80023bc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e026      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x498>
 80036e2:	e01e      	b.n	8003722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d107      	bne.n	80036fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e019      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
 80036f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x500>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	429a      	cmp	r2, r3
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000

08003730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0d0      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	4965      	ldr	r1, [pc, #404]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d040      	beq.n	8003850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d115      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e073      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4936      	ldr	r1, [pc, #216]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003820:	f7fe fdcc 	bl	80023bc <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	e00a      	b.n	800383e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7fe fdc8 	bl	80023bc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e053      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 020c 	and.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	429a      	cmp	r2, r3
 800384e:	d1eb      	bne.n	8003828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d210      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 0207 	bic.w	r2, r3, #7
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f821 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490a      	ldr	r1, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fd2a 	bl	8002338 <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40021000 	.word	0x40021000
 80038f8:	08004ccc 	.word	0x08004ccc
 80038fc:	20000014 	.word	0x20000014
 8003900:	20000018 	.word	0x20000018

08003904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b490      	push	{r4, r7}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800390a:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800390c:	1d3c      	adds	r4, r7, #4
 800390e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003914:	f240 2301 	movw	r3, #513	; 0x201
 8003918:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	2300      	movs	r3, #0
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800392e:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d002      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0x40>
 800393e:	2b08      	cmp	r3, #8
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x46>
 8003942:	e02b      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003946:	623b      	str	r3, [r7, #32]
      break;
 8003948:	e02b      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	0c9b      	lsrs	r3, r3, #18
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3328      	adds	r3, #40	; 0x28
 8003954:	443b      	add	r3, r7
 8003956:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800395a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	0c5b      	lsrs	r3, r3, #17
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	3328      	adds	r3, #40	; 0x28
 8003972:	443b      	add	r3, r7
 8003974:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003978:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800397e:	fb03 f202 	mul.w	r2, r3, r2
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	e004      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	623b      	str	r3, [r7, #32]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800399e:	623b      	str	r3, [r7, #32]
      break;
 80039a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a2:	6a3b      	ldr	r3, [r7, #32]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc90      	pop	{r4, r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	08004cac 	.word	0x08004cac
 80039b4:	40021000 	.word	0x40021000
 80039b8:	007a1200 	.word	0x007a1200
 80039bc:	003d0900 	.word	0x003d0900

080039c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	20000014 	.word	0x20000014

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff fff2 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0adb      	lsrs	r3, r3, #11
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	08004cdc 	.word	0x08004cdc

080039fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <RCC_Delay+0x34>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <RCC_Delay+0x38>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0a5b      	lsrs	r3, r3, #9
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a18:	bf00      	nop
  }
  while (Delay --);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	60fa      	str	r2, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f9      	bne.n	8003a18 <RCC_Delay+0x1c>
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20000014 	.word	0x20000014
 8003a34:	10624dd3 	.word	0x10624dd3

08003a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d07d      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10d      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4a4b      	ldr	r2, [pc, #300]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	61d3      	str	r3, [r2, #28]
 8003a70:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d118      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8c:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a42      	ldr	r2, [pc, #264]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a98:	f7fe fc90 	bl	80023bc <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fe fc8c 	bl	80023bc <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e06d      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02e      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d027      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003adc:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aec:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003af2:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d014      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fe fc5b 	bl	80023bc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fe fc57 	bl	80023bc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e036      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ee      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4917      	ldr	r1, [pc, #92]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	490b      	ldr	r1, [pc, #44]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4904      	ldr	r1, [pc, #16]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42420440 	.word	0x42420440

08003ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ba4:	b590      	push	{r4, r7, lr}
 8003ba6:	b08d      	sub	sp, #52	; 0x34
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bac:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003bae:	f107 040c 	add.w	r4, r7, #12
 8003bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bb8:	f240 2301 	movw	r3, #513	; 0x201
 8003bbc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	f200 808e 	bhi.w	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d049      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d079      	beq.n	8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003bec:	e086      	b.n	8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003bf4:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d07f      	beq.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	0c9b      	lsrs	r3, r3, #18
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	3330      	adds	r3, #48	; 0x30
 8003c0a:	443b      	add	r3, r7
 8003c0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c10:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d017      	beq.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c1c:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0c5b      	lsrs	r3, r3, #17
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	3330      	adds	r3, #48	; 0x30
 8003c28:	443b      	add	r3, r7
 8003c2a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c62:	d102      	bne.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c68:	e04a      	b.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c78:	e042      	b.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003c7a:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d108      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9c:	e01f      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003cb6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbc:	e00f      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc8:	d11c      	bne.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003cd6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cdc:	e012      	b.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003cde:	e011      	b.n	8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ce0:	f7ff fe78 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	0b9b      	lsrs	r3, r3, #14
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003cfc:	bf00      	nop
 8003cfe:	e002      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d00:	bf00      	nop
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d04:	bf00      	nop
    }
  }
  return (frequency);
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3734      	adds	r7, #52	; 0x34
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd90      	pop	{r4, r7, pc}
 8003d10:	08004cbc 	.word	0x08004cbc
 8003d14:	40021000 	.word	0x40021000
 8003d18:	007a1200 	.word	0x007a1200
 8003d1c:	003d0900 	.word	0x003d0900
 8003d20:	aaaaaaab 	.word	0xaaaaaaab

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f9e0 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fc14 	bl	8004590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e035      	b.n	8003e48 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_TIM_Base_Start_IT+0x90>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x4e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d004      	beq.n	8003e12 <HAL_TIM_Base_Start_IT+0x4e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <HAL_TIM_Base_Start_IT+0x94>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d111      	bne.n	8003e36 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d010      	beq.n	8003e46 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	e007      	b.n	8003e46 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400

08003e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe f914 	bl	80020b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 fb78 	bl	8004590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_TIM_PWM_Start+0x24>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e022      	b.n	8003f66 <HAL_TIM_PWM_Start+0x6a>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d109      	bne.n	8003f3a <HAL_TIM_PWM_Start+0x3e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	e015      	b.n	8003f66 <HAL_TIM_PWM_Start+0x6a>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start+0x58>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e008      	b.n	8003f66 <HAL_TIM_PWM_Start+0x6a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e059      	b.n	8004022 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_PWM_Start+0x82>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	e013      	b.n	8003fa6 <HAL_TIM_PWM_Start+0xaa>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x92>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	e00b      	b.n	8003fa6 <HAL_TIM_PWM_Start+0xaa>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d104      	bne.n	8003f9e <HAL_TIM_PWM_Start+0xa2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9c:	e003      	b.n	8003fa6 <HAL_TIM_PWM_Start+0xaa>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2201      	movs	r2, #1
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fd64 	bl	8004a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	; (800402c <HAL_TIM_PWM_Start+0x130>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d107      	bne.n	8003fce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_TIM_PWM_Start+0x130>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_TIM_PWM_Start+0xf0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d004      	beq.n	8003fec <HAL_TIM_PWM_Start+0xf0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a12      	ldr	r2, [pc, #72]	; (8004030 <HAL_TIM_PWM_Start+0x134>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d111      	bne.n	8004010 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d010      	beq.n	8004020 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400e:	e007      	b.n	8004020 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40000400 	.word	0x40000400

08004034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0202 	mvn.w	r2, #2
 8004060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa6f 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa62 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa71 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b04      	cmp	r3, #4
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0204 	mvn.w	r2, #4
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa45 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa38 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa47 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0208 	mvn.w	r2, #8
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2204      	movs	r2, #4
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa1b 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa0e 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fa1d 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0210 	mvn.w	r2, #16
 800415c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2208      	movs	r2, #8
 8004162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9f1 	bl	800455a <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f9e4 	bl	8004548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f9f3 	bl	800456c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b01      	cmp	r3, #1
 8004198:	d10e      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0201 	mvn.w	r2, #1
 80041b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fb0a 	bl	80017cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b80      	cmp	r3, #128	; 0x80
 80041c4:	d10e      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d107      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fd22 	bl	8004c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d10e      	bne.n	8004210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d107      	bne.n	8004210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9b7 	bl	800457e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b20      	cmp	r3, #32
 800421c:	d10e      	bne.n	800423c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b20      	cmp	r3, #32
 800422a:	d107      	bne.n	800423c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0220 	mvn.w	r2, #32
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fced 	bl	8004c16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800425a:	2302      	movs	r3, #2
 800425c:	e0ac      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b0c      	cmp	r3, #12
 800426a:	f200 809f 	bhi.w	80043ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080043ad 	.word	0x080043ad
 800427c:	080043ad 	.word	0x080043ad
 8004280:	080043ad 	.word	0x080043ad
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080043ad 	.word	0x080043ad
 800428c:	080043ad 	.word	0x080043ad
 8004290:	080043ad 	.word	0x080043ad
 8004294:	0800432b 	.word	0x0800432b
 8004298:	080043ad 	.word	0x080043ad
 800429c:	080043ad 	.word	0x080043ad
 80042a0:	080043ad 	.word	0x080043ad
 80042a4:	0800436b 	.word	0x0800436b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f9c6 	bl	8004640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0208 	orr.w	r2, r2, #8
 80042c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0204 	bic.w	r2, r2, #4
 80042d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6999      	ldr	r1, [r3, #24]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	619a      	str	r2, [r3, #24]
      break;
 80042e6:	e062      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa0c 	bl	800470c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6999      	ldr	r1, [r3, #24]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	021a      	lsls	r2, r3, #8
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	619a      	str	r2, [r3, #24]
      break;
 8004328:	e041      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fa55 	bl	80047e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0208 	orr.w	r2, r2, #8
 8004344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0204 	bic.w	r2, r2, #4
 8004354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69d9      	ldr	r1, [r3, #28]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	61da      	str	r2, [r3, #28]
      break;
 8004368:	e021      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fa9f 	bl	80048b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69da      	ldr	r2, [r3, #28]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69d9      	ldr	r1, [r3, #28]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	021a      	lsls	r2, r3, #8
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	61da      	str	r2, [r3, #28]
      break;
 80043aa:	e000      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80043ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x18>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0b3      	b.n	8004540 <HAL_TIM_ConfigClockSource+0x180>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d03e      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xd0>
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004416:	f200 8087 	bhi.w	8004528 <HAL_TIM_ConfigClockSource+0x168>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	f000 8085 	beq.w	800452c <HAL_TIM_ConfigClockSource+0x16c>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d87f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004428:	2b70      	cmp	r3, #112	; 0x70
 800442a:	d01a      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0xa2>
 800442c:	2b70      	cmp	r3, #112	; 0x70
 800442e:	d87b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004430:	2b60      	cmp	r3, #96	; 0x60
 8004432:	d050      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x116>
 8004434:	2b60      	cmp	r3, #96	; 0x60
 8004436:	d877      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004438:	2b50      	cmp	r3, #80	; 0x50
 800443a:	d03c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0xf6>
 800443c:	2b50      	cmp	r3, #80	; 0x50
 800443e:	d873      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d058      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x136>
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d86f      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004448:	2b30      	cmp	r3, #48	; 0x30
 800444a:	d064      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
 800444c:	2b30      	cmp	r3, #48	; 0x30
 800444e:	d86b      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004450:	2b20      	cmp	r3, #32
 8004452:	d060      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d867      	bhi.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05c      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
 800445c:	2b10      	cmp	r3, #16
 800445e:	d05a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004460:	e062      	b.n	8004528 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f000 fae4 	bl	8004a3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004484:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e04e      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6899      	ldr	r1, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f000 facd 	bl	8004a3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b2:	609a      	str	r2, [r3, #8]
      break;
 80044b4:	e03b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 fa44 	bl	8004950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2150      	movs	r1, #80	; 0x50
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa9b 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80044d4:	e02b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f000 fa62 	bl	80049ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2160      	movs	r1, #96	; 0x60
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa8b 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 80044f4:	e01b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	461a      	mov	r2, r3
 8004504:	f000 fa24 	bl	8004950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fa7b 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004514:	e00b      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f000 fa72 	bl	8004a0a <TIM_ITRx_SetConfig>
        break;
 8004526:	e002      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800452c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a25      	ldr	r2, [pc, #148]	; (8004638 <TIM_Base_SetConfig+0xa8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x28>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x28>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <TIM_Base_SetConfig+0xac>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1a      	ldr	r2, [pc, #104]	; (8004638 <TIM_Base_SetConfig+0xa8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_Base_SetConfig+0x52>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d003      	beq.n	80045e2 <TIM_Base_SetConfig+0x52>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a17      	ldr	r2, [pc, #92]	; (800463c <TIM_Base_SetConfig+0xac>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <TIM_Base_SetConfig+0xa8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d103      	bne.n	8004628 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	615a      	str	r2, [r3, #20]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40000400 	.word	0x40000400

08004640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 0302 	bic.w	r3, r3, #2
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <TIM_OC1_SetConfig+0xc8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <TIM_OC1_SetConfig+0xc8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d111      	bne.n	80046e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40012c00 	.word	0x40012c00

0800470c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0210 	bic.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0320 	bic.w	r3, r3, #32
 8004756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <TIM_OC2_SetConfig+0xd0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10d      	bne.n	8004788 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a14      	ldr	r2, [pc, #80]	; (80047dc <TIM_OC2_SetConfig+0xd0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d113      	bne.n	80047b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	40012c00 	.word	0x40012c00

080047e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <TIM_OC3_SetConfig+0xd0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10d      	bne.n	800485a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <TIM_OC3_SetConfig+0xd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d113      	bne.n	800488a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40012c00 	.word	0x40012c00

080048b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	031b      	lsls	r3, r3, #12
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0f      	ldr	r2, [pc, #60]	; (800494c <TIM_OC4_SetConfig+0x98>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	40012c00 	.word	0x40012c00

08004950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 030a 	bic.w	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f023 0210 	bic.w	r2, r3, #16
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	031b      	lsls	r3, r3, #12
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 0307 	orr.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	021a      	lsls	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2201      	movs	r2, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1a      	ldr	r2, [r3, #32]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e041      	b.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d004      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10c      	bne.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400

08004b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e03d      	b.n	8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
	...

08004c3c <__libc_init_array>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	2600      	movs	r6, #0
 8004c40:	4d0c      	ldr	r5, [pc, #48]	; (8004c74 <__libc_init_array+0x38>)
 8004c42:	4c0d      	ldr	r4, [pc, #52]	; (8004c78 <__libc_init_array+0x3c>)
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	42a6      	cmp	r6, r4
 8004c4a:	d109      	bne.n	8004c60 <__libc_init_array+0x24>
 8004c4c:	f000 f822 	bl	8004c94 <_init>
 8004c50:	2600      	movs	r6, #0
 8004c52:	4d0a      	ldr	r5, [pc, #40]	; (8004c7c <__libc_init_array+0x40>)
 8004c54:	4c0a      	ldr	r4, [pc, #40]	; (8004c80 <__libc_init_array+0x44>)
 8004c56:	1b64      	subs	r4, r4, r5
 8004c58:	10a4      	asrs	r4, r4, #2
 8004c5a:	42a6      	cmp	r6, r4
 8004c5c:	d105      	bne.n	8004c6a <__libc_init_array+0x2e>
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c64:	4798      	blx	r3
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7ee      	b.n	8004c48 <__libc_init_array+0xc>
 8004c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6e:	4798      	blx	r3
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7f2      	b.n	8004c5a <__libc_init_array+0x1e>
 8004c74:	08004ce4 	.word	0x08004ce4
 8004c78:	08004ce4 	.word	0x08004ce4
 8004c7c:	08004ce4 	.word	0x08004ce4
 8004c80:	08004ce8 	.word	0x08004ce8

08004c84 <memset>:
 8004c84:	4603      	mov	r3, r0
 8004c86:	4402      	add	r2, r0
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <memset+0xa>
 8004c8c:	4770      	bx	lr
 8004c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c92:	e7f9      	b.n	8004c88 <memset+0x4>

08004c94 <_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_fini>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	bf00      	nop
 8004ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca6:	bc08      	pop	{r3}
 8004ca8:	469e      	mov	lr, r3
 8004caa:	4770      	bx	lr
