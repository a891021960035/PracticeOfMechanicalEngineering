
PracticeOfMechanicalEngineering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005644  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002338  08005758  08005758  00015758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08007a90  08007a90  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a90  08007a90  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08007a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000030  08007ac8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08007ac8  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017130  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003041  00000000  00000000  00037189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e757  00000000  00000000  0003a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00048928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001858  00000000  00000000  000496b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b6c  00000000  00000000  0004af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192c6  00000000  00000000  00063a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009125c  00000000  00000000  0007cd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010df9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000318c  00000000  00000000  0010dff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	0800573c 	.word	0x0800573c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	0800573c 	.word	0x0800573c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__gesf2>:
 8000fe8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fec:	e006      	b.n	8000ffc <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__lesf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	e002      	b.n	8000ffc <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__cmpsf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001004:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	bf18      	it	ne
 800100e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001012:	d011      	beq.n	8001038 <__cmpsf2+0x40>
 8001014:	b001      	add	sp, #4
 8001016:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101a:	bf18      	it	ne
 800101c:	ea90 0f01 	teqne	r0, r1
 8001020:	bf58      	it	pl
 8001022:	ebb2 0003 	subspl.w	r0, r2, r3
 8001026:	bf88      	it	hi
 8001028:	17c8      	asrhi	r0, r1, #31
 800102a:	bf38      	it	cc
 800102c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001030:	bf18      	it	ne
 8001032:	f040 0001 	orrne.w	r0, r0, #1
 8001036:	4770      	bx	lr
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__cmpsf2+0x4c>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d105      	bne.n	8001050 <__cmpsf2+0x58>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d1e4      	bne.n	8001014 <__cmpsf2+0x1c>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d0e1      	beq.n	8001014 <__cmpsf2+0x1c>
 8001050:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__aeabi_cfrcmple>:
 8001058:	4684      	mov	ip, r0
 800105a:	4608      	mov	r0, r1
 800105c:	4661      	mov	r1, ip
 800105e:	e7ff      	b.n	8001060 <__aeabi_cfcmpeq>

08001060 <__aeabi_cfcmpeq>:
 8001060:	b50f      	push	{r0, r1, r2, r3, lr}
 8001062:	f7ff ffc9 	bl	8000ff8 <__cmpsf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	bf48      	it	mi
 800106a:	f110 0f00 	cmnmi.w	r0, #0
 800106e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001070 <__aeabi_fcmpeq>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff fff4 	bl	8001060 <__aeabi_cfcmpeq>
 8001078:	bf0c      	ite	eq
 800107a:	2001      	moveq	r0, #1
 800107c:	2000      	movne	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmplt>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffea 	bl	8001060 <__aeabi_cfcmpeq>
 800108c:	bf34      	ite	cc
 800108e:	2001      	movcc	r0, #1
 8001090:	2000      	movcs	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmple>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffe0 	bl	8001060 <__aeabi_cfcmpeq>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpge>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffd2 	bl	8001058 <__aeabi_cfrcmple>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpgt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffc8 	bl	8001058 <__aeabi_cfrcmple>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_f2iz>:
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010dc:	d30f      	bcc.n	80010fe <__aeabi_f2iz+0x2a>
 80010de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e6:	d90d      	bls.n	8001104 <__aeabi_f2iz+0x30>
 80010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	bf18      	it	ne
 80010fa:	4240      	negne	r0, r0
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2iz+0x3a>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d105      	bne.n	800111a <__aeabi_f2iz+0x46>
 800110e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001112:	bf08      	it	eq
 8001114:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr

08001120 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8001120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001124:	4692      	mov	sl, r2
 8001126:	461d      	mov	r5, r3
	// check precision bounds
	if (precision > MAX_PRECISION)
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 8001128:	2200      	movs	r2, #0
 800112a:	2300      	movs	r3, #0
{
 800112c:	4607      	mov	r7, r0
 800112e:	460e      	mov	r6, r1
	if (f < 0)
 8001130:	f7ff fc3c 	bl	80009ac <__aeabi_dcmplt>
	{
		f = -f;
		*ptr++ = '-';
 8001134:	46d0      	mov	r8, sl
	if (f < 0)
 8001136:	b120      	cbz	r0, 8001142 <ftoa+0x22>
		*ptr++ = '-';
 8001138:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 800113a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		*ptr++ = '-';
 800113e:	f808 3b01 	strb.w	r3, [r8], #1
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8001142:	2d00      	cmp	r5, #0
 8001144:	da59      	bge.n	80011fa <ftoa+0xda>
	{
		if (f < 1.0) precision = 6;
 8001146:	2200      	movs	r2, #0
 8001148:	4638      	mov	r0, r7
 800114a:	4631      	mov	r1, r6
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <ftoa+0x188>)
 800114e:	f7ff fc2d 	bl	80009ac <__aeabi_dcmplt>
 8001152:	2800      	cmp	r0, #0
 8001154:	d163      	bne.n	800121e <ftoa+0xfe>
		else if (f < 10.0) precision = 5;
 8001156:	2200      	movs	r2, #0
 8001158:	4638      	mov	r0, r7
 800115a:	4631      	mov	r1, r6
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <ftoa+0x18c>)
 800115e:	f7ff fc25 	bl	80009ac <__aeabi_dcmplt>
 8001162:	2800      	cmp	r0, #0
 8001164:	d15d      	bne.n	8001222 <ftoa+0x102>
		else if (f < 100.0) precision = 4;
 8001166:	2200      	movs	r2, #0
 8001168:	4638      	mov	r0, r7
 800116a:	4631      	mov	r1, r6
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <ftoa+0x190>)
 800116e:	f7ff fc1d 	bl	80009ac <__aeabi_dcmplt>
 8001172:	2800      	cmp	r0, #0
 8001174:	d157      	bne.n	8001226 <ftoa+0x106>
		else if (f < 1000.0) precision = 3;
 8001176:	2200      	movs	r2, #0
 8001178:	4638      	mov	r0, r7
 800117a:	4631      	mov	r1, r6
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <ftoa+0x194>)
 800117e:	f7ff fc15 	bl	80009ac <__aeabi_dcmplt>
 8001182:	2800      	cmp	r0, #0
 8001184:	d151      	bne.n	800122a <ftoa+0x10a>
		else if (f < 10000.0) precision = 2;
 8001186:	a344      	add	r3, pc, #272	; (adr r3, 8001298 <ftoa+0x178>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	4638      	mov	r0, r7
 800118e:	4631      	mov	r1, r6
 8001190:	f7ff fc0c 	bl	80009ac <__aeabi_dcmplt>
 8001194:	2800      	cmp	r0, #0
 8001196:	d14a      	bne.n	800122e <ftoa+0x10e>
		else if (f < 100000.0) precision = 1;
 8001198:	a341      	add	r3, pc, #260	; (adr r3, 80012a0 <ftoa+0x180>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	4638      	mov	r0, r7
 80011a0:	4631      	mov	r1, r6
 80011a2:	f7ff fc03 	bl	80009ac <__aeabi_dcmplt>
 80011a6:	4604      	mov	r4, r0
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d142      	bne.n	8001232 <ftoa+0x112>
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 80011ac:	4638      	mov	r0, r7
 80011ae:	4631      	mov	r1, r6
 80011b0:	f7ff fc24 	bl	80009fc <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d13e      	bne.n	8001236 <ftoa+0x116>
		*ptr++ = '0';
 80011b8:	4645      	mov	r5, r8
 80011ba:	2330      	movs	r3, #48	; 0x30
 80011bc:	f805 3b01 	strb.w	r3, [r5], #1
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 80011c0:	b1ac      	cbz	r4, 80011ee <ftoa+0xce>
	f -= intPart;
 80011c2:	f7ff f917 	bl	80003f4 <__aeabi_i2d>
 80011c6:	460b      	mov	r3, r1
 80011c8:	4602      	mov	r2, r0
 80011ca:	4631      	mov	r1, r6
 80011cc:	4638      	mov	r0, r7
 80011ce:	f7fe ffc3 	bl	8000158 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 80011d2:	232e      	movs	r3, #46	; 0x2e
 80011d4:	46ab      	mov	fp, r5

		// convert
		while (precision--)
		{
			f *= 10.0;
 80011d6:	f04f 0800 	mov.w	r8, #0
		*ptr++ = '.';
 80011da:	702b      	strb	r3, [r5, #0]
			f *= 10.0;
 80011dc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80012ac <ftoa+0x18c>
 80011e0:	192b      	adds	r3, r5, r4
 80011e2:	9301      	str	r3, [sp, #4]
		while (precision--)
 80011e4:	9b01      	ldr	r3, [sp, #4]
 80011e6:	455b      	cmp	r3, fp
 80011e8:	d13d      	bne.n	8001266 <ftoa+0x146>
 80011ea:	3401      	adds	r4, #1
 80011ec:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 80011ee:	2300      	movs	r3, #0

	return buf;
}
 80011f0:	4650      	mov	r0, sl
	*ptr = 0;
 80011f2:	702b      	strb	r3, [r5, #0]
}
 80011f4:	b003      	add	sp, #12
 80011f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fa:	2d0a      	cmp	r5, #10
 80011fc:	462c      	mov	r4, r5
 80011fe:	bfa8      	it	ge
 8001200:	240a      	movge	r4, #10
	if (precision)
 8001202:	2d00      	cmp	r5, #0
 8001204:	d0d2      	beq.n	80011ac <ftoa+0x8c>
		f += rounders[precision];
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <ftoa+0x198>)
 8001208:	4638      	mov	r0, r7
 800120a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800120e:	4631      	mov	r1, r6
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7fe ffa2 	bl	800015c <__adddf3>
 8001218:	4607      	mov	r7, r0
 800121a:	460e      	mov	r6, r1
 800121c:	e7c6      	b.n	80011ac <ftoa+0x8c>
		if (f < 1.0) precision = 6;
 800121e:	2406      	movs	r4, #6
 8001220:	e7f1      	b.n	8001206 <ftoa+0xe6>
		else if (f < 10.0) precision = 5;
 8001222:	2405      	movs	r4, #5
 8001224:	e7ef      	b.n	8001206 <ftoa+0xe6>
		else if (f < 100.0) precision = 4;
 8001226:	2404      	movs	r4, #4
 8001228:	e7ed      	b.n	8001206 <ftoa+0xe6>
		else if (f < 1000.0) precision = 3;
 800122a:	2403      	movs	r4, #3
 800122c:	e7eb      	b.n	8001206 <ftoa+0xe6>
		else if (f < 10000.0) precision = 2;
 800122e:	2402      	movs	r4, #2
 8001230:	e7e9      	b.n	8001206 <ftoa+0xe6>
		else if (f < 100000.0) precision = 1;
 8001232:	2401      	movs	r4, #1
 8001234:	e7e7      	b.n	8001206 <ftoa+0xe6>
 8001236:	4603      	mov	r3, r0
		p = ptr;
 8001238:	4645      	mov	r5, r8
			*p++ = '0' + intPart % 10;
 800123a:	210a      	movs	r1, #10
 800123c:	fb93 f2f1 	sdiv	r2, r3, r1
 8001240:	fb01 3312 	mls	r3, r1, r2, r3
 8001244:	3330      	adds	r3, #48	; 0x30
 8001246:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 800124a:	4613      	mov	r3, r2
 800124c:	2a00      	cmp	r2, #0
 800124e:	d1f5      	bne.n	800123c <ftoa+0x11c>
			*p++ = '0' + intPart % 10;
 8001250:	462b      	mov	r3, r5
		while (p > ptr)
 8001252:	4598      	cmp	r8, r3
 8001254:	d2b4      	bcs.n	80011c0 <ftoa+0xa0>
			c = *--p;
 8001256:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 800125a:	f898 1000 	ldrb.w	r1, [r8]
 800125e:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 8001260:	f808 2b01 	strb.w	r2, [r8], #1
 8001264:	e7f5      	b.n	8001252 <ftoa+0x132>
			f *= 10.0;
 8001266:	4642      	mov	r2, r8
 8001268:	464b      	mov	r3, r9
 800126a:	f7ff f92d 	bl	80004c8 <__aeabi_dmul>
 800126e:	460f      	mov	r7, r1
 8001270:	4606      	mov	r6, r0
			c = f;
 8001272:	f7ff fbeb 	bl	8000a4c <__aeabi_d2uiz>
 8001276:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 8001278:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800127c:	f80b 3f01 	strb.w	r3, [fp, #1]!
			f -= c;
 8001280:	f7ff f8b8 	bl	80003f4 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7fe ff64 	bl	8000158 <__aeabi_dsub>
 8001290:	e7a8      	b.n	80011e4 <ftoa+0xc4>
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	00000000 	.word	0x00000000
 800129c:	40c38800 	.word	0x40c38800
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40f86a00 	.word	0x40f86a00
 80012a8:	3ff00000 	.word	0x3ff00000
 80012ac:	40240000 	.word	0x40240000
 80012b0:	40590000 	.word	0x40590000
 80012b4:	408f4000 	.word	0x408f4000
 80012b8:	08007800 	.word	0x08007800

080012bc <writeServo>:

  return result;
}

static void writeServo(float angle)
{
 80012bc:	b508      	push	{r3, lr}
  pulse_servo1 = 500 + 2000 * angle / 180;
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <writeServo+0x24>)
 80012c0:	f7ff fd42 	bl	8000d48 <__aeabi_fmul>
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <writeServo+0x28>)
 80012c6:	f7ff fdf3 	bl	8000eb0 <__aeabi_fdiv>
 80012ca:	4907      	ldr	r1, [pc, #28]	; (80012e8 <writeServo+0x2c>)
 80012cc:	f7ff fc34 	bl	8000b38 <__addsf3>
 80012d0:	f7ff ff00 	bl	80010d4 <__aeabi_f2iz>
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <writeServo+0x30>)
 80012d6:	6018      	str	r0, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <writeServo+0x34>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6358      	str	r0, [r3, #52]	; 0x34
}
 80012de:	bd08      	pop	{r3, pc}
 80012e0:	44fa0000 	.word	0x44fa0000
 80012e4:	43340000 	.word	0x43340000
 80012e8:	43fa0000 	.word	0x43fa0000
 80012ec:	2000021c 	.word	0x2000021c
 80012f0:	20000134 	.word	0x20000134

080012f4 <setPower>:

static void setPower(float power)
{
 80012f4:	b508      	push	{r3, lr}
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80012f6:	f7ff f88f 	bl	8000418 <__aeabi_f2d>
 80012fa:	2200      	movs	r2, #0
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <setPower+0x30>)
 80012fe:	f7ff f8e3 	bl	80004c8 <__aeabi_dmul>
 8001302:	2200      	movs	r2, #0
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <setPower+0x34>)
 8001306:	f7ff fa09 	bl	800071c <__aeabi_ddiv>
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <setPower+0x30>)
 800130c:	2200      	movs	r2, #0
 800130e:	f7fe ff25 	bl	800015c <__adddf3>
 8001312:	f7ff fb73 	bl	80009fc <__aeabi_d2iz>
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <setPower+0x38>)
 8001318:	6018      	str	r0, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <setPower+0x3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6358      	str	r0, [r3, #52]	; 0x34
}
 8001320:	bd08      	pop	{r3, pc}
 8001322:	bf00      	nop
 8001324:	408f4000 	.word	0x408f4000
 8001328:	40590000 	.word	0x40590000
 800132c:	20000218 	.word	0x20000218
 8001330:	2000017c 	.word	0x2000017c

08001334 <brake>:

static void brake()
{
  pulse_servo2 = 500 + 2000 * (180 - 45) / 180;
 8001334:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  pulse_servo3 = 500 + 2000 * 45 / 180;
 8001338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  pulse_servo2 = 500 + 2000 * (180 - 45) / 180;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <brake+0x1c>)
 800133e:	6019      	str	r1, [r3, #0]
  pulse_servo3 = 500 + 2000 * 45 / 180;
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <brake+0x20>)
 8001342:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <brake+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6399      	str	r1, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000220 	.word	0x20000220
 8001354:	20000224 	.word	0x20000224
 8001358:	20000134 	.word	0x20000134

0800135c <unbrake>:

static void unbrake()
{
  pulse_servo2 = 500 + 2000 * 90 / 180;
 800135c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <unbrake+0x18>)
 8001362:	6013      	str	r3, [r2, #0]
  pulse_servo3 = 500 + 2000 * 90 / 180;
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <unbrake+0x1c>)
 8001366:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <unbrake+0x20>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800136e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000220 	.word	0x20000220
 8001378:	20000224 	.word	0x20000224
 800137c:	20000134 	.word	0x20000134

08001380 <SystemClock_Config>:
{
 8001380:	b510      	push	{r4, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	a80c      	add	r0, sp, #48	; 0x30
 800138a:	f004 f98d 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138e:	2214      	movs	r2, #20
 8001390:	2100      	movs	r1, #0
 8001392:	eb0d 0002 	add.w	r0, sp, r2
 8001396:	f004 f987 	bl	80056a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139a:	2100      	movs	r1, #0
 800139c:	2210      	movs	r2, #16
 800139e:	a801      	add	r0, sp, #4
 80013a0:	f004 f982 	bl	80056a8 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b2:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b6:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f002 f8ca 	bl	8003550 <HAL_RCC_OscConfig>
 80013bc:	4601      	mov	r1, r0
 80013be:	b108      	cbz	r0, 80013c4 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d4:	a805      	add	r0, sp, #20
 80013d6:	f002 fa91 	bl	80038fc <HAL_RCC_ClockConfig>
 80013da:	b108      	cbz	r0, 80013e0 <SystemClock_Config+0x60>
 80013dc:	b672      	cpsid	i
  while (1)
 80013de:	e7fe      	b.n	80013de <SystemClock_Config+0x5e>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013e0:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013e4:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e6:	f002 fb45 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	b108      	cbz	r0, 80013f0 <SystemClock_Config+0x70>
 80013ec:	b672      	cpsid	i
  while (1)
 80013ee:	e7fe      	b.n	80013ee <SystemClock_Config+0x6e>
}
 80013f0:	b014      	add	sp, #80	; 0x50
 80013f2:	bd10      	pop	{r4, pc}

080013f4 <Board_Get_ADCChannelValue>:
{
 80013f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013f6:	2201      	movs	r2, #1
 80013f8:	2300      	movs	r3, #0
{
 80013fa:	4604      	mov	r4, r0
  ADC_ChanConf.Channel = channel;
 80013fc:	9101      	str	r1, [sp, #4]
  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 80013fe:	a901      	add	r1, sp, #4
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001400:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 8001404:	f001 fa4e 	bl	80028a4 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(hadc);
 8001408:	4620      	mov	r0, r4
 800140a:	f001 fb05 	bl	8002a18 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10); //轮询转换
 800140e:	210a      	movs	r1, #10
 8001410:	4620      	mov	r0, r4
 8001412:	f001 f997 	bl	8002744 <HAL_ADC_PollForConversion>
  return (uint16_t)HAL_ADC_GetValue(hadc);
 8001416:	4620      	mov	r0, r4
 8001418:	f001 fa40 	bl	800289c <HAL_ADC_GetValue>
}
 800141c:	b280      	uxth	r0, r0
 800141e:	b004      	add	sp, #16
 8001420:	bd10      	pop	{r4, pc}
	...

08001424 <lineFollower.constprop.0>:
static void lineFollower(float operationTime, float power, int *tg)
 8001424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001428:	4605      	mov	r5, r0
  setPower(power);
 800142a:	4608      	mov	r0, r1
 800142c:	f7ff ff62 	bl	80012f4 <setPower>
  sec = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	4aa2      	ldr	r2, [pc, #648]	; (80016bc <lineFollower.constprop.0+0x298>)
      writeServo(90);
 8001434:	f8df b288 	ldr.w	fp, [pc, #648]	; 80016c0 <lineFollower.constprop.0+0x29c>
  sec = 0;
 8001438:	6013      	str	r3, [r2, #0]
  while (sec <= operationTime)
 800143a:	4ba0      	ldr	r3, [pc, #640]	; (80016bc <lineFollower.constprop.0+0x298>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f7ff fc2f 	bl	8000ca0 <__aeabi_i2f>
 8001442:	4601      	mov	r1, r0
 8001444:	4628      	mov	r0, r5
 8001446:	f7ff fe31 	bl	80010ac <__aeabi_fcmpge>
 800144a:	2800      	cmp	r0, #0
 800144c:	f000 80ba 	beq.w	80015c4 <lineFollower.constprop.0+0x1a0>
    statecode = 0;
 8001450:	2400      	movs	r4, #0
 8001452:	f8df a270 	ldr.w	sl, [pc, #624]	; 80016c4 <lineFollower.constprop.0+0x2a0>
    HAL_ADC_Start(&hadc1);
 8001456:	489c      	ldr	r0, [pc, #624]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
    statecode = 0;
 8001458:	f8ca 4000 	str.w	r4, [sl]
    HAL_ADC_Start(&hadc1);
 800145c:	f001 fadc 	bl	8002a18 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001460:	2101      	movs	r1, #1
 8001462:	4899      	ldr	r0, [pc, #612]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
 8001464:	f001 f96e 	bl	8002744 <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001468:	4621      	mov	r1, r4
 800146a:	4897      	ldr	r0, [pc, #604]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
 800146c:	f7ff ffc2 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001470:	4e96      	ldr	r6, [pc, #600]	; (80016cc <lineFollower.constprop.0+0x2a8>)
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001472:	2101      	movs	r1, #1
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001474:	6030      	str	r0, [r6, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001476:	4894      	ldr	r0, [pc, #592]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
 8001478:	f7ff ffbc 	bl	80013f4 <Board_Get_ADCChannelValue>
 800147c:	4f94      	ldr	r7, [pc, #592]	; (80016d0 <lineFollower.constprop.0+0x2ac>)
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 800147e:	2102      	movs	r1, #2
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001480:	6038      	str	r0, [r7, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001482:	4891      	ldr	r0, [pc, #580]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
 8001484:	f7ff ffb6 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001488:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80016d4 <lineFollower.constprop.0+0x2b0>
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 800148c:	2103      	movs	r1, #3
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 800148e:	f8c8 0000 	str.w	r0, [r8]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001492:	488d      	ldr	r0, [pc, #564]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
 8001494:	f7ff ffae 	bl	80013f4 <Board_Get_ADCChannelValue>
    if (value0 > 1000)
 8001498:	6832      	ldr	r2, [r6, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 800149a:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <lineFollower.constprop.0+0x2b4>)
    if (value0 > 1000)
 800149c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0001; // 8
 80014a0:	bfc8      	it	gt
 80014a2:	f8da 2000 	ldrgt.w	r2, [sl]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 80014a6:	6018      	str	r0, [r3, #0]
      statecode = statecode | 0b0001; // 8
 80014a8:	bfc4      	itt	gt
 80014aa:	f042 0201 	orrgt.w	r2, r2, #1
 80014ae:	f8ca 2000 	strgt.w	r2, [sl]
    if (value1 > 1000)
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0010; // 4
 80014b8:	bfc2      	ittt	gt
 80014ba:	f8da 2000 	ldrgt.w	r2, [sl]
 80014be:	f042 0202 	orrgt.w	r2, r2, #2
 80014c2:	f8ca 2000 	strgt.w	r2, [sl]
    if (value2 > 1000)
 80014c6:	f8d8 2000 	ldr.w	r2, [r8]
 80014ca:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0100; // 2
 80014ce:	bfc2      	ittt	gt
 80014d0:	f8da 2000 	ldrgt.w	r2, [sl]
 80014d4:	f042 0204 	orrgt.w	r2, r2, #4
 80014d8:	f8ca 2000 	strgt.w	r2, [sl]
    if (value3 > 1000)
 80014dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
      statecode = statecode | 0b1000; // 1
 80014e0:	bfc2      	ittt	gt
 80014e2:	f8da 2000 	ldrgt.w	r2, [sl]
 80014e6:	f042 0208 	orrgt.w	r2, r2, #8
 80014ea:	f8ca 2000 	strgt.w	r2, [sl]
    tmp = (statecode & 0b1000) >> 3;
 80014ee:	f8da 4000 	ldr.w	r4, [sl]
 80014f2:	f3c4 00c0 	ubfx	r0, r4, #3, #1
 80014f6:	f7ff fbd3 	bl	8000ca0 <__aeabi_i2f>
 80014fa:	4681      	mov	r9, r0
    tmp += (statecode & 0b0100) >> 2;
 80014fc:	f3c4 0080 	ubfx	r0, r4, #2, #1
 8001500:	f7ff fbce 	bl	8000ca0 <__aeabi_i2f>
 8001504:	4601      	mov	r1, r0
 8001506:	4648      	mov	r0, r9
 8001508:	f7ff fb16 	bl	8000b38 <__addsf3>
 800150c:	4681      	mov	r9, r0
    tmp += (statecode & 0b0010) >> 1;
 800150e:	f3c4 0040 	ubfx	r0, r4, #1, #1
 8001512:	f7ff fbc5 	bl	8000ca0 <__aeabi_i2f>
 8001516:	4601      	mov	r1, r0
 8001518:	4648      	mov	r0, r9
 800151a:	f7ff fb0d 	bl	8000b38 <__addsf3>
 800151e:	4681      	mov	r9, r0
    tmp += (statecode & 0b0001);
 8001520:	f004 0001 	and.w	r0, r4, #1
 8001524:	f7ff fbbc 	bl	8000ca0 <__aeabi_i2f>
 8001528:	4601      	mov	r1, r0
 800152a:	4648      	mov	r0, r9
 800152c:	f7ff fb04 	bl	8000b38 <__addsf3>
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <lineFollower.constprop.0+0x2b8>)
    if (tmp > 2)
 8001532:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    tmp += (statecode & 0b0001);
 8001536:	6018      	str	r0, [r3, #0]
    if (tmp > 2)
 8001538:	f7ff fdc2 	bl	80010c0 <__aeabi_fcmpgt>
 800153c:	b198      	cbz	r0, 8001566 <lineFollower.constprop.0+0x142>
      statecode = 0b1111;
 800153e:	220f      	movs	r2, #15
 8001540:	f8ca 2000 	str.w	r2, [sl]
      writeServo(90);
 8001544:	4658      	mov	r0, fp
 8001546:	f7ff feb9 	bl	80012bc <writeServo>
        HAL_ADC_Start(&hadc1);
 800154a:	4c5f      	ldr	r4, [pc, #380]	; (80016c8 <lineFollower.constprop.0+0x2a4>)
      while (tmp > 1) //變成白色之前狀態不變
 800154c:	4b63      	ldr	r3, [pc, #396]	; (80016dc <lineFollower.constprop.0+0x2b8>)
 800154e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f7ff fdb4 	bl	80010c0 <__aeabi_fcmpgt>
 8001558:	2800      	cmp	r0, #0
 800155a:	d13e      	bne.n	80015da <lineFollower.constprop.0+0x1b6>
      *tg += 1;
 800155c:	4a60      	ldr	r2, [pc, #384]	; (80016e0 <lineFollower.constprop.0+0x2bc>)
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	6013      	str	r3, [r2, #0]
      break;
 8001564:	e027      	b.n	80015b6 <lineFollower.constprop.0+0x192>
    switch (statecode)
 8001566:	2c0f      	cmp	r4, #15
 8001568:	d825      	bhi.n	80015b6 <lineFollower.constprop.0+0x192>
 800156a:	a301      	add	r3, pc, #4	; (adr r3, 8001570 <lineFollower.constprop.0+0x14c>)
 800156c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001570:	080015d7 	.word	0x080015d7
 8001574:	080015d3 	.word	0x080015d3
 8001578:	080015cf 	.word	0x080015cf
 800157c:	080015b7 	.word	0x080015b7
 8001580:	080015cb 	.word	0x080015cb
 8001584:	080015b7 	.word	0x080015b7
 8001588:	080015b7 	.word	0x080015b7
 800158c:	080015b7 	.word	0x080015b7
 8001590:	080015b1 	.word	0x080015b1
 8001594:	080015b7 	.word	0x080015b7
 8001598:	080015b7 	.word	0x080015b7
 800159c:	080015b7 	.word	0x080015b7
 80015a0:	080015b7 	.word	0x080015b7
 80015a4:	080015b7 	.word	0x080015b7
 80015a8:	080015b7 	.word	0x080015b7
 80015ac:	08001545 	.word	0x08001545
  writeServo(67.5); // 45
 80015b0:	484c      	ldr	r0, [pc, #304]	; (80016e4 <lineFollower.constprop.0+0x2c0>)
  writeServo(78.75); // 67.5
 80015b2:	f7ff fe83 	bl	80012bc <writeServo>
    if (operationTime == 100)
 80015b6:	4628      	mov	r0, r5
 80015b8:	494b      	ldr	r1, [pc, #300]	; (80016e8 <lineFollower.constprop.0+0x2c4>)
 80015ba:	f7ff fd59 	bl	8001070 <__aeabi_fcmpeq>
 80015be:	2800      	cmp	r0, #0
 80015c0:	f43f af3b 	beq.w	800143a <lineFollower.constprop.0+0x16>
}
 80015c4:	b003      	add	sp, #12
 80015c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  writeServo(78.75); // 67.5
 80015ca:	4848      	ldr	r0, [pc, #288]	; (80016ec <lineFollower.constprop.0+0x2c8>)
 80015cc:	e7f1      	b.n	80015b2 <lineFollower.constprop.0+0x18e>
  writeServo(101.25); // 112.5
 80015ce:	4848      	ldr	r0, [pc, #288]	; (80016f0 <lineFollower.constprop.0+0x2cc>)
 80015d0:	e7ef      	b.n	80015b2 <lineFollower.constprop.0+0x18e>
  writeServo(112.5); // 135
 80015d2:	4848      	ldr	r0, [pc, #288]	; (80016f4 <lineFollower.constprop.0+0x2d0>)
 80015d4:	e7ed      	b.n	80015b2 <lineFollower.constprop.0+0x18e>
      writeServo(90);
 80015d6:	4658      	mov	r0, fp
 80015d8:	e7eb      	b.n	80015b2 <lineFollower.constprop.0+0x18e>
        statecode = 0;
 80015da:	2300      	movs	r3, #0
        HAL_ADC_Start(&hadc1);
 80015dc:	4620      	mov	r0, r4
        statecode = 0;
 80015de:	f8ca 3000 	str.w	r3, [sl]
        HAL_ADC_Start(&hadc1);
 80015e2:	f001 fa19 	bl	8002a18 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 80015e6:	2101      	movs	r1, #1
 80015e8:	4620      	mov	r0, r4
 80015ea:	f001 f8ab 	bl	8002744 <HAL_ADC_PollForConversion>
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 80015ee:	2100      	movs	r1, #0
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff feff 	bl	80013f4 <Board_Get_ADCChannelValue>
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80015f6:	2101      	movs	r1, #1
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 80015f8:	6030      	str	r0, [r6, #0]
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fefa 	bl	80013f4 <Board_Get_ADCChannelValue>
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001600:	2102      	movs	r1, #2
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001602:	6038      	str	r0, [r7, #0]
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff fef5 	bl	80013f4 <Board_Get_ADCChannelValue>
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 800160a:	2103      	movs	r1, #3
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 800160c:	f8c8 0000 	str.w	r0, [r8]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff feef 	bl	80013f4 <Board_Get_ADCChannelValue>
        if (value0 > 1000)
 8001616:	6832      	ldr	r2, [r6, #0]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <lineFollower.constprop.0+0x2b4>)
        if (value0 > 1000)
 800161a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          statecode = statecode | 0b1000; // 8
 800161e:	bfc8      	it	gt
 8001620:	f8da 2000 	ldrgt.w	r2, [sl]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001624:	6018      	str	r0, [r3, #0]
          statecode = statecode | 0b1000; // 8
 8001626:	bfc4      	itt	gt
 8001628:	f042 0208 	orrgt.w	r2, r2, #8
 800162c:	f8ca 2000 	strgt.w	r2, [sl]
        if (value1 > 1000)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          statecode = statecode | 0b0100; // 4
 8001636:	bfc2      	ittt	gt
 8001638:	f8da 2000 	ldrgt.w	r2, [sl]
 800163c:	f042 0204 	orrgt.w	r2, r2, #4
 8001640:	f8ca 2000 	strgt.w	r2, [sl]
        if (value2 > 1000)
 8001644:	f8d8 2000 	ldr.w	r2, [r8]
 8001648:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          statecode = statecode | 0b0010; // 2
 800164c:	bfc2      	ittt	gt
 800164e:	f8da 2000 	ldrgt.w	r2, [sl]
 8001652:	f042 0202 	orrgt.w	r2, r2, #2
 8001656:	f8ca 2000 	strgt.w	r2, [sl]
        if (value3 > 1000)
 800165a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
          statecode = statecode | 0b0001; // 1
 800165e:	bfc2      	ittt	gt
 8001660:	f8da 2000 	ldrgt.w	r2, [sl]
 8001664:	f042 0201 	orrgt.w	r2, r2, #1
 8001668:	f8ca 2000 	strgt.w	r2, [sl]
        tmp = (statecode & 0b1000) >> 3;
 800166c:	f8da 9000 	ldr.w	r9, [sl]
 8001670:	f3c9 00c0 	ubfx	r0, r9, #3, #1
 8001674:	f7ff fb14 	bl	8000ca0 <__aeabi_i2f>
 8001678:	9001      	str	r0, [sp, #4]
        tmp += (statecode & 0b0100) >> 2;
 800167a:	f3c9 0080 	ubfx	r0, r9, #2, #1
 800167e:	f7ff fb0f 	bl	8000ca0 <__aeabi_i2f>
 8001682:	9a01      	ldr	r2, [sp, #4]
 8001684:	4601      	mov	r1, r0
 8001686:	4610      	mov	r0, r2
 8001688:	f7ff fa56 	bl	8000b38 <__addsf3>
 800168c:	9001      	str	r0, [sp, #4]
        tmp += (statecode & 0b0010) >> 1;
 800168e:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8001692:	f7ff fb05 	bl	8000ca0 <__aeabi_i2f>
 8001696:	9a01      	ldr	r2, [sp, #4]
 8001698:	4601      	mov	r1, r0
 800169a:	4610      	mov	r0, r2
 800169c:	f7ff fa4c 	bl	8000b38 <__addsf3>
 80016a0:	9001      	str	r0, [sp, #4]
        tmp += (statecode & 0b0001);
 80016a2:	f009 0001 	and.w	r0, r9, #1
 80016a6:	f7ff fafb 	bl	8000ca0 <__aeabi_i2f>
 80016aa:	9a01      	ldr	r2, [sp, #4]
 80016ac:	4601      	mov	r1, r0
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff fa42 	bl	8000b38 <__addsf3>
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <lineFollower.constprop.0+0x2b8>)
 80016b6:	6018      	str	r0, [r3, #0]
 80016b8:	e748      	b.n	800154c <lineFollower.constprop.0+0x128>
 80016ba:	bf00      	nop
 80016bc:	20000228 	.word	0x20000228
 80016c0:	42b40000 	.word	0x42b40000
 80016c4:	2000022c 	.word	0x2000022c
 80016c8:	20000058 	.word	0x20000058
 80016cc:	20000014 	.word	0x20000014
 80016d0:	20000018 	.word	0x20000018
 80016d4:	2000001c 	.word	0x2000001c
 80016d8:	20000020 	.word	0x20000020
 80016dc:	20000230 	.word	0x20000230
 80016e0:	20000234 	.word	0x20000234
 80016e4:	42870000 	.word	0x42870000
 80016e8:	42c80000 	.word	0x42c80000
 80016ec:	429d8000 	.word	0x429d8000
 80016f0:	42ca8000 	.word	0x42ca8000
 80016f4:	42e10000 	.word	0x42e10000

080016f8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM3)
 80016f8:	6802      	ldr	r2, [r0, #0]
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10c      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0x22>
    ms++;
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001702:	6813      	ldr	r3, [r2, #0]
 8001704:	3301      	adds	r3, #1
    if (ms == 1000)
 8001706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      ms = 0;
 800170a:	bf01      	itttt	eq
 800170c:	2300      	moveq	r3, #0
 800170e:	6013      	streq	r3, [r2, #0]
      sec++;
 8001710:	4a04      	ldreq	r2, [pc, #16]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001712:	6813      	ldreq	r3, [r2, #0]
 8001714:	bf08      	it	eq
 8001716:	3301      	addeq	r3, #1
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	4770      	bx	lr
 800171c:	40000400 	.word	0x40000400
 8001720:	20000210 	.word	0x20000210
 8001724:	20000228 	.word	0x20000228

08001728 <HAL_GPIO_EXTI_Callback>:
  position_encoderR++;
 8001728:	4a02      	ldr	r2, [pc, #8]	; (8001734 <HAL_GPIO_EXTI_Callback+0xc>)
 800172a:	6813      	ldr	r3, [r2, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000214 	.word	0x20000214

08001738 <distanceR>:
  disR = position_encoderR * UNIT_DISTANCE;
 8001738:	2066      	movs	r0, #102	; 0x66
{
 800173a:	b508      	push	{r3, lr}
  disR = position_encoderR * UNIT_DISTANCE;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <distanceR+0x1c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4343      	muls	r3, r0
 8001742:	209b      	movs	r0, #155	; 0x9b
 8001744:	fb93 f0f0 	sdiv	r0, r3, r0
 8001748:	f7ff faaa 	bl	8000ca0 <__aeabi_i2f>
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <distanceR+0x20>)
 800174e:	6018      	str	r0, [r3, #0]
}
 8001750:	bd08      	pop	{r3, pc}
 8001752:	bf00      	nop
 8001754:	20000214 	.word	0x20000214
 8001758:	20000054 	.word	0x20000054
 800175c:	00000000 	.word	0x00000000

08001760 <steeringDegree>:
  if (orientation == 1) //左轉
 8001760:	2901      	cmp	r1, #1
{
 8001762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001764:	4604      	mov	r4, r0
  if (orientation == 1) //左轉
 8001766:	d13e      	bne.n	80017e6 <steeringDegree+0x86>
    angle = 90 - angle + 5;
 8001768:	4601      	mov	r1, r0
 800176a:	4837      	ldr	r0, [pc, #220]	; (8001848 <steeringDegree+0xe8>)
 800176c:	f7ff f9e2 	bl	8000b34 <__aeabi_fsub>
 8001770:	4605      	mov	r5, r0
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) + 7.03)) / M_PI * 180;
 8001772:	f7ff ffe1 	bl	8001738 <distanceR>
    angle = 90 - angle + 5;
 8001776:	4935      	ldr	r1, [pc, #212]	; (800184c <steeringDegree+0xec>)
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) + 7.03)) / M_PI * 180;
 8001778:	4604      	mov	r4, r0
    angle = 90 - angle + 5;
 800177a:	4628      	mov	r0, r5
 800177c:	f7ff f9dc 	bl	8000b38 <__addsf3>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) + 7.03)) / M_PI * 180;
 8001780:	f7fe fe4a 	bl	8000418 <__aeabi_f2d>
 8001784:	a32c      	add	r3, pc, #176	; (adr r3, 8001838 <steeringDegree+0xd8>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fe9d 	bl	80004c8 <__aeabi_dmul>
 800178e:	2200      	movs	r2, #0
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <steeringDegree+0xf0>)
 8001792:	f7fe ffc3 	bl	800071c <__aeabi_ddiv>
 8001796:	f002 fee3 	bl	8004560 <tan>
 800179a:	4606      	mov	r6, r0
 800179c:	4620      	mov	r0, r4
 800179e:	460f      	mov	r7, r1
 80017a0:	f7fe fe3a 	bl	8000418 <__aeabi_f2d>
 80017a4:	4632      	mov	r2, r6
 80017a6:	463b      	mov	r3, r7
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	2000      	movs	r0, #0
 80017ae:	4929      	ldr	r1, [pc, #164]	; (8001854 <steeringDegree+0xf4>)
 80017b0:	f7fe ffb4 	bl	800071c <__aeabi_ddiv>
 80017b4:	a322      	add	r3, pc, #136	; (adr r3, 8001840 <steeringDegree+0xe0>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe fccf 	bl	800015c <__adddf3>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe ffa9 	bl	800071c <__aeabi_ddiv>
 80017ca:	a31b      	add	r3, pc, #108	; (adr r3, 8001838 <steeringDegree+0xd8>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ffa4 	bl	800071c <__aeabi_ddiv>
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <steeringDegree+0xf0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f7fe fe76 	bl	80004c8 <__aeabi_dmul>
 80017dc:	f7ff f956 	bl	8000a8c <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (orientation == 0) //右
 80017e6:	2900      	cmp	r1, #0
 80017e8:	d1fb      	bne.n	80017e2 <steeringDegree+0x82>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 80017ea:	f7ff ffa5 	bl	8001738 <distanceR>
    angle = angle - 90;
 80017ee:	4916      	ldr	r1, [pc, #88]	; (8001848 <steeringDegree+0xe8>)
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 80017f0:	4605      	mov	r5, r0
    angle = angle - 90;
 80017f2:	4620      	mov	r0, r4
 80017f4:	f7ff f99e 	bl	8000b34 <__aeabi_fsub>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 80017f8:	f7fe fe0e 	bl	8000418 <__aeabi_f2d>
 80017fc:	a30e      	add	r3, pc, #56	; (adr r3, 8001838 <steeringDegree+0xd8>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fe61 	bl	80004c8 <__aeabi_dmul>
 8001806:	2200      	movs	r2, #0
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <steeringDegree+0xf0>)
 800180a:	f7fe ff87 	bl	800071c <__aeabi_ddiv>
 800180e:	f002 fea7 	bl	8004560 <tan>
 8001812:	4606      	mov	r6, r0
 8001814:	4628      	mov	r0, r5
 8001816:	460f      	mov	r7, r1
 8001818:	f7fe fdfe 	bl	8000418 <__aeabi_f2d>
 800181c:	4632      	mov	r2, r6
 800181e:	463b      	mov	r3, r7
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	2000      	movs	r0, #0
 8001826:	490b      	ldr	r1, [pc, #44]	; (8001854 <steeringDegree+0xf4>)
 8001828:	f7fe ff78 	bl	800071c <__aeabi_ddiv>
 800182c:	a304      	add	r3, pc, #16	; (adr r3, 8001840 <steeringDegree+0xe0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fc91 	bl	8000158 <__aeabi_dsub>
 8001836:	e7c2      	b.n	80017be <steeringDegree+0x5e>
 8001838:	54442d18 	.word	0x54442d18
 800183c:	400921fb 	.word	0x400921fb
 8001840:	51eb851f 	.word	0x51eb851f
 8001844:	401c1eb8 	.word	0x401c1eb8
 8001848:	42b40000 	.word	0x42b40000
 800184c:	40a00000 	.word	0x40a00000
 8001850:	40668000 	.word	0x40668000
 8001854:	4031c000 	.word	0x4031c000

08001858 <main>:
{
 8001858:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  pulse_servo1 = MIN_PULSE_LENGTH;
 800185c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	2500      	movs	r5, #0
{
 8001862:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001864:	f000 ff38 	bl	80026d8 <HAL_Init>
  pulse_servo1 = MIN_PULSE_LENGTH;
 8001868:	4ba6      	ldr	r3, [pc, #664]	; (8001b04 <main+0x2ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800186a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  pulse_servo1 = MIN_PULSE_LENGTH;
 800186e:	601f      	str	r7, [r3, #0]
  pulse_servo2 = MIN_PULSE_LENGTH;
 8001870:	4ba5      	ldr	r3, [pc, #660]	; (8001b08 <main+0x2b0>)
  pulse_BLDC = MIN_PULSE_LENGTH;
 8001872:	4ea6      	ldr	r6, [pc, #664]	; (8001b0c <main+0x2b4>)
  pulse_servo2 = MIN_PULSE_LENGTH;
 8001874:	601f      	str	r7, [r3, #0]
  pulse_servo3 = MIN_PULSE_LENGTH;
 8001876:	4ba6      	ldr	r3, [pc, #664]	; (8001b10 <main+0x2b8>)
  pulse_BLDC = MIN_PULSE_LENGTH;
 8001878:	6037      	str	r7, [r6, #0]
  pulse_servo3 = MIN_PULSE_LENGTH;
 800187a:	601f      	str	r7, [r3, #0]
  SystemClock_Config();
 800187c:	f7ff fd80 	bl	8001380 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001884:	4ba3      	ldr	r3, [pc, #652]	; (8001b14 <main+0x2bc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	48a4      	ldr	r0, [pc, #656]	; (8001b18 <main+0x2c0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001888:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	a90c      	add	r1, sp, #48	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188c:	f042 0220 	orr.w	r2, r2, #32
 8001890:	619a      	str	r2, [r3, #24]
 8001892:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8001894:	4ca1      	ldr	r4, [pc, #644]	; (8001b1c <main+0x2c4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	f002 0220 	and.w	r2, r2, #32
 800189a:	9200      	str	r2, [sp, #0]
 800189c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a0:	f44f 2860 	mov.w	r8, #917504	; 0xe0000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	f042 0204 	orr.w	r2, r2, #4
 80018a8:	619a      	str	r2, [r3, #24]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	f002 0204 	and.w	r2, r2, #4
 80018b0:	9201      	str	r2, [sp, #4]
 80018b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	f042 0208 	orr.w	r2, r2, #8
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018c6:	4b96      	ldr	r3, [pc, #600]	; (8001b20 <main+0x2c8>)
 80018c8:	e9cd 930c 	strd	r9, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f001 fa56 	bl	8002d7c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018d0:	462a      	mov	r2, r5
 80018d2:	4629      	mov	r1, r5
 80018d4:	2028      	movs	r0, #40	; 0x28
 80018d6:	f001 f9b7 	bl	8002c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018da:	2028      	movs	r0, #40	; 0x28
 80018dc:	f001 f9e6 	bl	8002cac <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80018e0:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 80018e4:	950e      	str	r5, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018e6:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e8:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ea:	7525      	strb	r5, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ec:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018ee:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 80018f0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8001b24 <main+0x2cc>
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f4:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80018f6:	f8c4 9000 	str.w	r9, [r4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018fa:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 80018fe:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001900:	f001 f912 	bl	8002b28 <HAL_ADC_Init>
 8001904:	b108      	cbz	r0, 800190a <main+0xb2>
 8001906:	b672      	cpsid	i
  while (1)
 8001908:	e7fe      	b.n	8001908 <main+0xb0>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800190a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	a90c      	add	r1, sp, #48	; 0x30
 800190e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001910:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001914:	f000 ffc6 	bl	80028a4 <HAL_ADC_ConfigChannel>
 8001918:	b108      	cbz	r0, 800191e <main+0xc6>
 800191a:	b672      	cpsid	i
  while (1)
 800191c:	e7fe      	b.n	800191c <main+0xc4>
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE; //扫描（多通道）模式=ENABLE、单次（单通道）模式=DISABLE 因为同时只采集一个通道 所以设置为DISABLE
 800191e:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;    //连续=ENABLE、单次=DISABLE
 8001920:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001922:	7520      	strb	r0, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001924:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001926:	e9c4 5806 	strd	r5, r8, [r4, #24]
  hadc1.Instance = ADC1;
 800192a:	f8c4 9000 	str.w	r9, [r4]
  hadc1.Init.NbrOfConversion = 1;
 800192e:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001930:	f001 f8fa 	bl	8002b28 <HAL_ADC_Init>
 8001934:	b108      	cbz	r0, 800193a <main+0xe2>
 8001936:	b672      	cpsid	i
  while (1)
 8001938:	e7fe      	b.n	8001938 <main+0xe0>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800193a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193c:	a90c      	add	r1, sp, #48	; 0x30
 800193e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001940:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001944:	f000 ffae 	bl	80028a4 <HAL_ADC_ConfigChannel>
 8001948:	4605      	mov	r5, r0
 800194a:	b108      	cbz	r0, 8001950 <main+0xf8>
 800194c:	b672      	cpsid	i
  while (1)
 800194e:	e7fe      	b.n	800194e <main+0xf6>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001950:	4601      	mov	r1, r0
 8001952:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	e9cd 0003 	strd	r0, r0, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001958:	a805      	add	r0, sp, #20
 800195a:	f003 fea5 	bl	80056a8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195e:	2220      	movs	r2, #32
 8001960:	4629      	mov	r1, r5
 8001962:	a80c      	add	r0, sp, #48	; 0x30
 8001964:	f003 fea0 	bl	80056a8 <memset>
  htim1.Init.Prescaler = 15;
 8001968:	230f      	movs	r3, #15
  htim1.Instance = TIM1;
 800196a:	4c6f      	ldr	r4, [pc, #444]	; (8001b28 <main+0x2d0>)
  htim1.Init.Prescaler = 15;
 800196c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001b2c <main+0x2d4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001970:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 15;
 8001972:	e9c4 8300 	strd	r8, r3, [r4]
  htim1.Init.Period = 20000;
 8001976:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001984:	f002 fbe2 	bl	800414c <HAL_TIM_PWM_Init>
 8001988:	b108      	cbz	r0, 800198e <main+0x136>
 800198a:	b672      	cpsid	i
  while (1)
 800198c:	e7fe      	b.n	800198c <main+0x134>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198e:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001992:	a903      	add	r1, sp, #12
 8001994:	4620      	mov	r0, r4
 8001996:	f002 fd8d 	bl	80044b4 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4602      	mov	r2, r0
 800199c:	b108      	cbz	r0, 80019a2 <main+0x14a>
 800199e:	b672      	cpsid	i
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <main+0x148>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a2:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a8:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ac:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ae:	a905      	add	r1, sp, #20
 80019b0:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1000;
 80019b2:	e9cd 3705 	strd	r3, r7, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b6:	f002 fc21 	bl	80041fc <HAL_TIM_PWM_ConfigChannel>
 80019ba:	b108      	cbz	r0, 80019c0 <main+0x168>
 80019bc:	b672      	cpsid	i
  while (1)
 80019be:	e7fe      	b.n	80019be <main+0x166>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c0:	2204      	movs	r2, #4
 80019c2:	4620      	mov	r0, r4
 80019c4:	a905      	add	r1, sp, #20
 80019c6:	f002 fc19 	bl	80041fc <HAL_TIM_PWM_ConfigChannel>
 80019ca:	b108      	cbz	r0, 80019d0 <main+0x178>
 80019cc:	b672      	cpsid	i
  while (1)
 80019ce:	e7fe      	b.n	80019ce <main+0x176>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019d0:	2208      	movs	r2, #8
 80019d2:	4620      	mov	r0, r4
 80019d4:	a905      	add	r1, sp, #20
 80019d6:	f002 fc11 	bl	80041fc <HAL_TIM_PWM_ConfigChannel>
 80019da:	b108      	cbz	r0, 80019e0 <main+0x188>
 80019dc:	b672      	cpsid	i
  while (1)
 80019de:	e7fe      	b.n	80019de <main+0x186>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ec:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ee:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f0:	a90c      	add	r1, sp, #48	; 0x30
 80019f2:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f6:	f002 fd8b 	bl	8004510 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fa:	b108      	cbz	r0, 8001a00 <main+0x1a8>
 80019fc:	b672      	cpsid	i
  while (1)
 80019fe:	e7fe      	b.n	80019fe <main+0x1a6>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	2700      	movs	r7, #0
  HAL_TIM_MspPostInit(&htim1);
 8001a02:	4849      	ldr	r0, [pc, #292]	; (8001b28 <main+0x2d0>)
 8001a04:	f000 fdb6 	bl	8002574 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a08:	221c      	movs	r2, #28
 8001a0a:	4639      	mov	r1, r7
 8001a0c:	a80c      	add	r0, sp, #48	; 0x30
  htim2.Init.Prescaler = 15;
 8001a0e:	f04f 090f 	mov.w	r9, #15
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	e9cd 7705 	strd	r7, r7, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a16:	f003 fe47 	bl	80056a8 <memset>
  htim2.Init.Prescaler = 15;
 8001a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001a1e:	4d44      	ldr	r5, [pc, #272]	; (8001b30 <main+0x2d8>)
  htim2.Init.Prescaler = 15;
 8001a20:	e9c5 3900 	strd	r3, r9, [r5]
  htim2.Init.Period = 20000;
 8001a24:	f644 6320 	movw	r3, #20000	; 0x4e20
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a28:	4628      	mov	r0, r5
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	e9c5 3703 	strd	r3, r7, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	60af      	str	r7, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a32:	f002 fb8b 	bl	800414c <HAL_TIM_PWM_Init>
 8001a36:	b108      	cbz	r0, 8001a3c <main+0x1e4>
 8001a38:	b672      	cpsid	i
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <main+0x1e2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a40:	a905      	add	r1, sp, #20
 8001a42:	4628      	mov	r0, r5
 8001a44:	f002 fd36 	bl	80044b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	b108      	cbz	r0, 8001a50 <main+0x1f8>
 8001a4c:	b672      	cpsid	i
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <main+0x1f6>
  sConfigOC.Pulse = 1000;
 8001a50:	2360      	movs	r3, #96	; 0x60
 8001a52:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a56:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	a90c      	add	r1, sp, #48	; 0x30
 8001a5c:	4628      	mov	r0, r5
  sConfigOC.Pulse = 1000;
 8001a5e:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a62:	f002 fbcb 	bl	80041fc <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4682      	mov	sl, r0
 8001a68:	b108      	cbz	r0, 8001a6e <main+0x216>
 8001a6a:	b672      	cpsid	i
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <main+0x214>
  HAL_TIM_MspPostInit(&htim2);
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 fd80 	bl	8002574 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8001a74:	4f2f      	ldr	r7, [pc, #188]	; (8001b34 <main+0x2dc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	2210      	movs	r2, #16
 8001a78:	4651      	mov	r1, sl
 8001a7a:	a80c      	add	r0, sp, #48	; 0x30
 8001a7c:	f003 fe14 	bl	80056a8 <memset>
  htim3.Instance = TIM3;
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <main+0x2e0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a82:	4638      	mov	r0, r7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	e9cd aa05 	strd	sl, sl, [sp, #20]
  htim3.Init.Prescaler = 15;
 8001a88:	e9c7 3900 	strd	r3, r9, [r7]
  htim3.Init.Period = 1000;
 8001a8c:	e9c7 a802 	strd	sl, r8, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	f8c7 a010 	str.w	sl, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	f8c7 a018 	str.w	sl, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a98:	f002 fb2c 	bl	80040f4 <HAL_TIM_Base_Init>
 8001a9c:	b108      	cbz	r0, 8001aa2 <main+0x24a>
 8001a9e:	b672      	cpsid	i
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <main+0x248>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aac:	f002 fc0b 	bl	80042c6 <HAL_TIM_ConfigClockSource>
 8001ab0:	b108      	cbz	r0, 8001ab6 <main+0x25e>
 8001ab2:	b672      	cpsid	i
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <main+0x25c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aba:	a905      	add	r1, sp, #20
 8001abc:	4638      	mov	r0, r7
 8001abe:	f002 fcf9 	bl	80044b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b108      	cbz	r0, 8001aca <main+0x272>
 8001ac6:	b672      	cpsid	i
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <main+0x270>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aca:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8001ace:	481b      	ldr	r0, [pc, #108]	; (8001b3c <main+0x2e4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8001b40 <main+0x2e8>
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ad4:	f44f 7e00 	mov.w	lr, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad8:	e9c0 c200 	strd	ip, r2, [r0]
  hspi1.Init.CRCPolynomial = 10;
 8001adc:	f04f 080a 	mov.w	r8, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ae0:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aea:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aee:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001af0:	e9c0 e206 	strd	lr, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001af4:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af8:	f002 f8a8 	bl	8003c4c <HAL_SPI_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b308      	cbz	r0, 8001b44 <main+0x2ec>
 8001b00:	b672      	cpsid	i
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <main+0x2aa>
 8001b04:	2000021c 	.word	0x2000021c
 8001b08:	20000220 	.word	0x20000220
 8001b0c:	20000218 	.word	0x20000218
 8001b10:	20000224 	.word	0x20000224
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	20000058 	.word	0x20000058
 8001b20:	10310000 	.word	0x10310000
 8001b24:	40012400 	.word	0x40012400
 8001b28:	20000134 	.word	0x20000134
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	2000017c 	.word	0x2000017c
 8001b34:	200001c4 	.word	0x200001c4
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	200000dc 	.word	0x200000dc
 8001b40:	40013000 	.word	0x40013000
  hi2c1.Instance = I2C1;
 8001b44:	489f      	ldr	r0, [pc, #636]	; (8001dc4 <main+0x56c>)
  hi2c1.Init.ClockSpeed = 400000;
 8001b46:	49a0      	ldr	r1, [pc, #640]	; (8001dc8 <main+0x570>)
 8001b48:	4aa0      	ldr	r2, [pc, #640]	; (8001dcc <main+0x574>)
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001b4e:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b56:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b60:	f001 fac4 	bl	80030ec <HAL_I2C_Init>
 8001b64:	4681      	mov	r9, r0
 8001b66:	b108      	cbz	r0, 8001b6c <main+0x314>
 8001b68:	b672      	cpsid	i
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <main+0x312>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                 // Servo 1
 8001b6c:	4601      	mov	r1, r0
 8001b6e:	4898      	ldr	r0, [pc, #608]	; (8001dd0 <main+0x578>)
 8001b70:	f002 fc9e 	bl	80044b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                 // Servo 2
 8001b74:	2104      	movs	r1, #4
 8001b76:	4896      	ldr	r0, [pc, #600]	; (8001dd0 <main+0x578>)
 8001b78:	f002 fc9a 	bl	80044b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);                 // Servo 3
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	4894      	ldr	r0, [pc, #592]	; (8001dd0 <main+0x578>)
 8001b80:	f002 fc96 	bl	80044b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);                 // 無刷馬達
 8001b84:	4649      	mov	r1, r9
 8001b86:	4628      	mov	r0, r5
 8001b88:	f002 fc92 	bl	80044b0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);                            // 開啟中斷
 8001b8c:	4638      	mov	r0, r7
 8001b8e:	f002 f9a9 	bl	8003ee4 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); // 無刷馬達下限轉速
 8001b92:	6832      	ldr	r2, [r6, #0]
 8001b94:	682b      	ldr	r3, [r5, #0]
  writeServo(90);
 8001b96:	488f      	ldr	r0, [pc, #572]	; (8001dd4 <main+0x57c>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); // 無刷馬達下限轉速
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
  writeServo(90);
 8001b9a:	f7ff fb8f 	bl	80012bc <writeServo>
  HAL_Delay(3000);
 8001b9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
  brake();
 8001ba2:	f7ff fbc7 	bl	8001334 <brake>
  HAL_Delay(3000);
 8001ba6:	f000 fdbb 	bl	8002720 <HAL_Delay>
  SSD1306_Init();
 8001baa:	f000 fb2d 	bl	8002208 <SSD1306_Init>
  mode = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	4f89      	ldr	r7, [pc, #548]	; (8001dd8 <main+0x580>)
  SSD1306_GotoXY(10, 10);                // goto 10, 10
 8001bb2:	4641      	mov	r1, r8
 8001bb4:	4640      	mov	r0, r8
  mode = 2;
 8001bb6:	603b      	str	r3, [r7, #0]
  SSD1306_GotoXY(10, 10);                // goto 10, 10
 8001bb8:	f000 fa68 	bl	800208c <SSD1306_GotoXY>
  SSD1306_Puts("HELLO", &Font_11x18, 1); // print Hello
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4987      	ldr	r1, [pc, #540]	; (8001ddc <main+0x584>)
 8001bc0:	4887      	ldr	r0, [pc, #540]	; (8001de0 <main+0x588>)
 8001bc2:	f000 fab7 	bl	8002134 <SSD1306_Puts>
  SSD1306_GotoXY(10, 30);
 8001bc6:	4640      	mov	r0, r8
 8001bc8:	211e      	movs	r1, #30
 8001bca:	f000 fa5f 	bl	800208c <SSD1306_GotoXY>
  SSD1306_Puts("WORLD !!", &Font_11x18, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4982      	ldr	r1, [pc, #520]	; (8001ddc <main+0x584>)
 8001bd2:	4884      	ldr	r0, [pc, #528]	; (8001de4 <main+0x58c>)
 8001bd4:	f000 faae 	bl	8002134 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001bd8:	f000 faec 	bl	80021b4 <SSD1306_UpdateScreen>
      setPower(6);
 8001bdc:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8001de8 <main+0x590>
    switch (mode)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d8fd      	bhi.n	8001be2 <main+0x38a>
 8001be6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001bea:	0006      	.short	0x0006
 8001bec:	000c000a 	.word	0x000c000a
 8001bf0:	01d301cf 	.word	0x01d301cf
 8001bf4:	01d9      	.short	0x01d9
      setPower(0);
 8001bf6:	2000      	movs	r0, #0
      setPower(13);
 8001bf8:	f7ff fb7c 	bl	80012f4 <setPower>
      break;
 8001bfc:	e7f0      	b.n	8001be0 <main+0x388>
      setPower(10);
 8001bfe:	487b      	ldr	r0, [pc, #492]	; (8001dec <main+0x594>)
 8001c00:	e7fa      	b.n	8001bf8 <main+0x3a0>
      setPower(6);
 8001c02:	4640      	mov	r0, r8
 8001c04:	f7ff fb76 	bl	80012f4 <setPower>
      HAL_Delay(2000);
 8001c08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c0c:	f000 fd88 	bl	8002720 <HAL_Delay>
      position_encoderR = 0;
 8001c10:	2300      	movs	r3, #0
      degree_servo = 77.5;
 8001c12:	4877      	ldr	r0, [pc, #476]	; (8001df0 <main+0x598>)
      position_encoderR = 0;
 8001c14:	4e77      	ldr	r6, [pc, #476]	; (8001df4 <main+0x59c>)
      degree_servo = 77.5;
 8001c16:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8001df8 <main+0x5a0>
      position_encoderR = 0;
 8001c1a:	6033      	str	r3, [r6, #0]
      degree_servo = 77.5;
 8001c1c:	f8c9 0000 	str.w	r0, [r9]
      writeServo(degree_servo); // 18.7-> 9.35 -> 14.035 -> 13.5 -> 12.5
 8001c20:	f7ff fb4c 	bl	80012bc <writeServo>
      unbrake();
 8001c24:	f7ff fb9a 	bl	800135c <unbrake>
      SSD1306_Clear();
 8001c28:	f000 fae6 	bl	80021f8 <SSD1306_Clear>
      while (steeringDegree(degree_servo, 1) < 90)
 8001c2c:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8001dd4 <main+0x57c>
 8001c30:	2101      	movs	r1, #1
 8001c32:	f8d9 0000 	ldr.w	r0, [r9]
 8001c36:	f7ff fd93 	bl	8001760 <steeringDegree>
 8001c3a:	4651      	mov	r1, sl
 8001c3c:	f7ff fa22 	bl	8001084 <__aeabi_fcmplt>
 8001c40:	4605      	mov	r5, r0
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d1f4      	bne.n	8001c30 <main+0x3d8>
      SSD1306_Clear();
 8001c46:	f000 fad7 	bl	80021f8 <SSD1306_Clear>
      ftoa(steeringDegree(degree_servo, 1), buffer, 2);
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f8d9 0000 	ldr.w	r0, [r9]
 8001c50:	f7ff fd86 	bl	8001760 <steeringDegree>
 8001c54:	f7fe fbe0 	bl	8000418 <__aeabi_f2d>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	4a68      	ldr	r2, [pc, #416]	; (8001dfc <main+0x5a4>)
 8001c5c:	f7ff fa60 	bl	8001120 <ftoa>
      SSD1306_GotoXY(0, 0);
 8001c60:	4629      	mov	r1, r5
 8001c62:	4628      	mov	r0, r5
 8001c64:	f000 fa12 	bl	800208c <SSD1306_GotoXY>
      trigger = 0;
 8001c68:	f8df a194 	ldr.w	sl, [pc, #404]	; 8001e00 <main+0x5a8>
      SSD1306_Puts(buffer, &Font_16x26, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4965      	ldr	r1, [pc, #404]	; (8001e04 <main+0x5ac>)
 8001c70:	4862      	ldr	r0, [pc, #392]	; (8001dfc <main+0x5a4>)
 8001c72:	f000 fa5f 	bl	8002134 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8001c76:	f000 fa9d 	bl	80021b4 <SSD1306_UpdateScreen>
      lineFollower(4, 6, &trigger);
 8001c7a:	4641      	mov	r1, r8
 8001c7c:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8001c80:	f7ff fbd0 	bl	8001424 <lineFollower.constprop.0>
        lineFollower(100, 25, &trigger);
 8001c84:	f8df b180 	ldr.w	fp, [pc, #384]	; 8001e08 <main+0x5b0>
      trigger = 0;
 8001c88:	f8ca 5000 	str.w	r5, [sl]
        lineFollower(100, 25, &trigger);
 8001c8c:	4d5f      	ldr	r5, [pc, #380]	; (8001e0c <main+0x5b4>)
 8001c8e:	4659      	mov	r1, fp
 8001c90:	4628      	mov	r0, r5
 8001c92:	f7ff fbc7 	bl	8001424 <lineFollower.constprop.0>
      while (trigger < 1)
 8001c96:	f8da 3000 	ldr.w	r3, [sl]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	ddf7      	ble.n	8001c8e <main+0x436>
      degree_servo = 60;
 8001c9e:	485c      	ldr	r0, [pc, #368]	; (8001e10 <main+0x5b8>)
    HAL_ADC_Start(&hadc1);
 8001ca0:	4d5c      	ldr	r5, [pc, #368]	; (8001e14 <main+0x5bc>)
      degree_servo = 60;
 8001ca2:	f8c9 0000 	str.w	r0, [r9]
      writeServo(degree_servo);
 8001ca6:	f7ff fb09 	bl	80012bc <writeServo>
      pulse_servo2 = 500 + 2000 * degree_servo / 180;
 8001caa:	495b      	ldr	r1, [pc, #364]	; (8001e18 <main+0x5c0>)
 8001cac:	f8d9 0000 	ldr.w	r0, [r9]
 8001cb0:	f7ff f84a 	bl	8000d48 <__aeabi_fmul>
 8001cb4:	4959      	ldr	r1, [pc, #356]	; (8001e1c <main+0x5c4>)
 8001cb6:	f7ff f8fb 	bl	8000eb0 <__aeabi_fdiv>
 8001cba:	4959      	ldr	r1, [pc, #356]	; (8001e20 <main+0x5c8>)
 8001cbc:	f7fe ff3c 	bl	8000b38 <__addsf3>
 8001cc0:	f7ff fa08 	bl	80010d4 <__aeabi_f2iz>
 8001cc4:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <main+0x5cc>)
 8001cc6:	6018      	str	r0, [r3, #0]
      pulse_servo3 = 500 + 2000 * degree_servo / 180; // 130?
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <main+0x5d0>)
 8001cca:	6018      	str	r0, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	6398      	str	r0, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001cd0:	63d8      	str	r0, [r3, #60]	; 0x3c
      setPower(24.5); // 大顆電池 20 度：28 , 小顆電池 25 度：30 20 度：24.5
 8001cd2:	4856      	ldr	r0, [pc, #344]	; (8001e2c <main+0x5d4>)
 8001cd4:	f7ff fb0e 	bl	80012f4 <setPower>
      HAL_Delay(500);
 8001cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cdc:	f000 fd20 	bl	8002720 <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 8001ce0:	484c      	ldr	r0, [pc, #304]	; (8001e14 <main+0x5bc>)
 8001ce2:	f000 fe99 	bl	8002a18 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	484a      	ldr	r0, [pc, #296]	; (8001e14 <main+0x5bc>)
 8001cea:	f000 fd2b 	bl	8002744 <HAL_ADC_PollForConversion>
  int value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4848      	ldr	r0, [pc, #288]	; (8001e14 <main+0x5bc>)
 8001cf2:	f7ff fb7f 	bl	80013f4 <Board_Get_ADCChannelValue>
  while (value < 1000) //變成白色之前狀態不變
 8001cf6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cfa:	db41      	blt.n	8001d80 <main+0x528>
      writeServo(90);
 8001cfc:	4835      	ldr	r0, [pc, #212]	; (8001dd4 <main+0x57c>)
 8001cfe:	f7ff fadd 	bl	80012bc <writeServo>
      trigger = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8ca 3000 	str.w	r3, [sl]
      unbrake();
 8001d08:	f7ff fb28 	bl	800135c <unbrake>
      SSD1306_Clear();
 8001d0c:	f000 fa74 	bl	80021f8 <SSD1306_Clear>
        lineFollower(100, 29, &trigger); // 大顆電池 20 度：31 小顆電池 25 度： 20 度：29
 8001d10:	4d47      	ldr	r5, [pc, #284]	; (8001e30 <main+0x5d8>)
 8001d12:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001e0c <main+0x5b4>
      while (trigger < 2)
 8001d16:	f8da 3000 	ldr.w	r3, [sl]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	dd3c      	ble.n	8001d98 <main+0x540>
      position_encoderR = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	6033      	str	r3, [r6, #0]
      SSD1306_Clear();
 8001d22:	f000 fa69 	bl	80021f8 <SSD1306_Clear>
        itoa(position_encoderR, buffer, 10);
 8001d26:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8001dfc <main+0x5a4>
        SSD1306_Puts(buffer, &Font_11x18, 1);
 8001d2a:	4d2c      	ldr	r5, [pc, #176]	; (8001ddc <main+0x584>)
      while (position_encoderR < 30) //(20 / (102 / 155))？？？
 8001d2c:	6830      	ldr	r0, [r6, #0]
 8001d2e:	281d      	cmp	r0, #29
 8001d30:	dd37      	ble.n	8001da2 <main+0x54a>
      setPower(0);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fade 	bl	80012f4 <setPower>
      HAL_Delay(1000);
 8001d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      brake();
 8001d3c:	f7ff fafa 	bl	8001334 <brake>
      HAL_Delay(1000);
 8001d40:	f000 fcee 	bl	8002720 <HAL_Delay>
      setPower(21); // 大電池 20度：23，小電池 20度：20
 8001d44:	483b      	ldr	r0, [pc, #236]	; (8001e34 <main+0x5dc>)
 8001d46:	f7ff fad5 	bl	80012f4 <setPower>
      HAL_Delay(2500);
 8001d4a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001d4e:	f000 fce7 	bl	8002720 <HAL_Delay>
      position_encoderR = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	6033      	str	r3, [r6, #0]
      unbrake();
 8001d56:	f7ff fb01 	bl	800135c <unbrake>
      writeServo(90);
 8001d5a:	f8df a078 	ldr.w	sl, [pc, #120]	; 8001dd4 <main+0x57c>
  writeServo(100);
 8001d5e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8001e0c <main+0x5b4>
      while (position_encoderR < 170) // 220 /（102 / 155）
 8001d62:	6833      	ldr	r3, [r6, #0]
 8001d64:	2ba9      	cmp	r3, #169	; 0xa9
 8001d66:	dd67      	ble.n	8001e38 <main+0x5e0>
      setPower(0);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fac3 	bl	80012f4 <setPower>
      HAL_Delay(1500);
 8001d6e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d72:	f000 fcd5 	bl	8002720 <HAL_Delay>
      brake();
 8001d76:	f7ff fadd 	bl	8001334 <brake>
      mode = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
      break;
 8001d7e:	e72f      	b.n	8001be0 <main+0x388>
    HAL_ADC_Start(&hadc1);
 8001d80:	4628      	mov	r0, r5
 8001d82:	f000 fe49 	bl	8002a18 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001d86:	2101      	movs	r1, #1
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f000 fcdb 	bl	8002744 <HAL_ADC_PollForConversion>
    value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4628      	mov	r0, r5
 8001d92:	f7ff fb2f 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001d96:	e7ae      	b.n	8001cf6 <main+0x49e>
        lineFollower(100, 29, &trigger); // 大顆電池 20 度：31 小顆電池 25 度： 20 度：29
 8001d98:	4629      	mov	r1, r5
 8001d9a:	4648      	mov	r0, r9
 8001d9c:	f7ff fb42 	bl	8001424 <lineFollower.constprop.0>
 8001da0:	e7b9      	b.n	8001d16 <main+0x4be>
        itoa(position_encoderR, buffer, 10);
 8001da2:	220a      	movs	r2, #10
 8001da4:	4649      	mov	r1, r9
 8001da6:	f003 fc7d 	bl	80056a4 <itoa>
        SSD1306_GotoXY(0, 0);
 8001daa:	2100      	movs	r1, #0
 8001dac:	4608      	mov	r0, r1
 8001dae:	f000 f96d 	bl	800208c <SSD1306_GotoXY>
        SSD1306_Puts(buffer, &Font_11x18, 1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	4629      	mov	r1, r5
 8001db6:	4648      	mov	r0, r9
 8001db8:	f000 f9bc 	bl	8002134 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8001dbc:	f000 f9fa 	bl	80021b4 <SSD1306_UpdateScreen>
 8001dc0:	e7b4      	b.n	8001d2c <main+0x4d4>
 8001dc2:	bf00      	nop
 8001dc4:	20000088 	.word	0x20000088
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	00061a80 	.word	0x00061a80
 8001dd0:	20000134 	.word	0x20000134
 8001dd4:	42b40000 	.word	0x42b40000
 8001dd8:	2000020c 	.word	0x2000020c
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	08007858 	.word	0x08007858
 8001de4:	0800785e 	.word	0x0800785e
 8001de8:	40c00000 	.word	0x40c00000
 8001dec:	41200000 	.word	0x41200000
 8001df0:	429b0000 	.word	0x429b0000
 8001df4:	20000214 	.word	0x20000214
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	2000004c 	.word	0x2000004c
 8001e00:	20000234 	.word	0x20000234
 8001e04:	20000008 	.word	0x20000008
 8001e08:	41c80000 	.word	0x41c80000
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	42700000 	.word	0x42700000
 8001e14:	20000058 	.word	0x20000058
 8001e18:	44fa0000 	.word	0x44fa0000
 8001e1c:	43340000 	.word	0x43340000
 8001e20:	43fa0000 	.word	0x43fa0000
 8001e24:	20000220 	.word	0x20000220
 8001e28:	20000224 	.word	0x20000224
 8001e2c:	41c40000 	.word	0x41c40000
 8001e30:	41e80000 	.word	0x41e80000
 8001e34:	41a80000 	.word	0x41a80000
  sec = 0;
 8001e38:	f04f 0900 	mov.w	r9, #0
  setPower(power);
 8001e3c:	4869      	ldr	r0, [pc, #420]	; (8001fe4 <main+0x78c>)
    statecode = 0;
 8001e3e:	4d6a      	ldr	r5, [pc, #424]	; (8001fe8 <main+0x790>)
  setPower(power);
 8001e40:	f7ff fa58 	bl	80012f4 <setPower>
  sec = 0;
 8001e44:	4b69      	ldr	r3, [pc, #420]	; (8001fec <main+0x794>)
    HAL_ADC_Start(&hadc1);
 8001e46:	486a      	ldr	r0, [pc, #424]	; (8001ff0 <main+0x798>)
  sec = 0;
 8001e48:	f8c3 9000 	str.w	r9, [r3]
    statecode = 0;
 8001e4c:	f8c5 9000 	str.w	r9, [r5]
    HAL_ADC_Start(&hadc1);
 8001e50:	f000 fde2 	bl	8002a18 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001e54:	2101      	movs	r1, #1
 8001e56:	4866      	ldr	r0, [pc, #408]	; (8001ff0 <main+0x798>)
 8001e58:	f000 fc74 	bl	8002744 <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	4864      	ldr	r0, [pc, #400]	; (8001ff0 <main+0x798>)
 8001e60:	f7ff fac8 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <main+0x79c>)
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001e66:	2101      	movs	r1, #1
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001e68:	6010      	str	r0, [r2, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001e6a:	4861      	ldr	r0, [pc, #388]	; (8001ff0 <main+0x798>)
 8001e6c:	f7ff fac2 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <main+0x7a0>)
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001e72:	2102      	movs	r1, #2
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001e74:	6018      	str	r0, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001e76:	485e      	ldr	r0, [pc, #376]	; (8001ff0 <main+0x798>)
 8001e78:	f7ff fabc 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001e7c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8001ffc <main+0x7a4>
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001e80:	2103      	movs	r1, #3
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001e82:	f8c9 0000 	str.w	r0, [r9]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001e86:	485a      	ldr	r0, [pc, #360]	; (8001ff0 <main+0x798>)
 8001e88:	f7ff fab4 	bl	80013f4 <Board_Get_ADCChannelValue>
    if (value0 > 1000)
 8001e8c:	4a59      	ldr	r2, [pc, #356]	; (8001ff4 <main+0x79c>)
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <main+0x7a0>)
 8001e90:	6812      	ldr	r2, [r2, #0]
    if (value1 > 1000)
 8001e92:	681b      	ldr	r3, [r3, #0]
    if (value0 > 1000)
 8001e94:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0001; // 8
 8001e98:	bfc8      	it	gt
 8001e9a:	682a      	ldrgt	r2, [r5, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001e9c:	4958      	ldr	r1, [pc, #352]	; (8002000 <main+0x7a8>)
      statecode = statecode | 0b0001; // 8
 8001e9e:	bfc4      	itt	gt
 8001ea0:	f042 0201 	orrgt.w	r2, r2, #1
 8001ea4:	602a      	strgt	r2, [r5, #0]
    if (value1 > 1000)
 8001ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      statecode = statecode | 0b0010; // 4
 8001eaa:	bfc8      	it	gt
 8001eac:	682b      	ldrgt	r3, [r5, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001eae:	6008      	str	r0, [r1, #0]
      statecode = statecode | 0b0010; // 4
 8001eb0:	bfc4      	itt	gt
 8001eb2:	f043 0302 	orrgt.w	r3, r3, #2
 8001eb6:	602b      	strgt	r3, [r5, #0]
    if (value2 > 1000)
 8001eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8001ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      statecode = statecode | 0b0100; // 2
 8001ec0:	bfc2      	ittt	gt
 8001ec2:	682b      	ldrgt	r3, [r5, #0]
 8001ec4:	f043 0304 	orrgt.w	r3, r3, #4
 8001ec8:	602b      	strgt	r3, [r5, #0]
    if (value3 > 1000)
 8001eca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
      statecode = statecode | 0b1000; // 1
 8001ece:	bfc2      	ittt	gt
 8001ed0:	682b      	ldrgt	r3, [r5, #0]
 8001ed2:	f043 0308 	orrgt.w	r3, r3, #8
 8001ed6:	602b      	strgt	r3, [r5, #0]
    switch (statecode)
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d813      	bhi.n	8001f06 <main+0x6ae>
 8001ede:	e8df f003 	tbb	[pc, r3]
 8001ee2:	3b47      	.short	0x3b47
 8001ee4:	1223122f 	.word	0x1223122f
 8001ee8:	1212      	.short	0x1212
 8001eea:	05          	.byte	0x05
 8001eeb:	00          	.byte	0x00
  pulse_servo2 = 500 + 2000 * 80 / 180;
 8001eec:	f240 536c 	movw	r3, #1388	; 0x56c
 8001ef0:	4a44      	ldr	r2, [pc, #272]	; (8002004 <main+0x7ac>)
  writeServo(80);
 8001ef2:	4845      	ldr	r0, [pc, #276]	; (8002008 <main+0x7b0>)
  pulse_servo2 = 500 + 2000 * 80 / 180;
 8001ef4:	6013      	str	r3, [r2, #0]
  pulse_servo3 = pulse_servo2;
 8001ef6:	4a45      	ldr	r2, [pc, #276]	; (800200c <main+0x7b4>)
 8001ef8:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001efa:	4a45      	ldr	r2, [pc, #276]	; (8002010 <main+0x7b8>)
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f00:	63d3      	str	r3, [r2, #60]	; 0x3c
      writeServo(90);
 8001f02:	f7ff f9db 	bl	80012bc <writeServo>
        itoa(position_encoderR, buffer, 10);
 8001f06:	220a      	movs	r2, #10
 8001f08:	4942      	ldr	r1, [pc, #264]	; (8002014 <main+0x7bc>)
 8001f0a:	6830      	ldr	r0, [r6, #0]
 8001f0c:	f003 fbca 	bl	80056a4 <itoa>
        SSD1306_GotoXY(0, 0);
 8001f10:	2100      	movs	r1, #0
 8001f12:	4608      	mov	r0, r1
 8001f14:	f000 f8ba 	bl	800208c <SSD1306_GotoXY>
        SSD1306_Puts(buffer, &Font_11x18, 1);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	493f      	ldr	r1, [pc, #252]	; (8002018 <main+0x7c0>)
 8001f1c:	483d      	ldr	r0, [pc, #244]	; (8002014 <main+0x7bc>)
 8001f1e:	f000 f909 	bl	8002134 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8001f22:	f000 f947 	bl	80021b4 <SSD1306_UpdateScreen>
 8001f26:	e71c      	b.n	8001d62 <main+0x50a>
  pulse_servo2 = 500 + 2000 * 87.5 / 180;
 8001f28:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 8001f2c:	4a35      	ldr	r2, [pc, #212]	; (8002004 <main+0x7ac>)
  writeServo(87.5);
 8001f2e:	483b      	ldr	r0, [pc, #236]	; (800201c <main+0x7c4>)
  pulse_servo2 = 500 + 2000 * 87.5 / 180;
 8001f30:	6013      	str	r3, [r2, #0]
  pulse_servo3 = pulse_servo2;
 8001f32:	4a36      	ldr	r2, [pc, #216]	; (800200c <main+0x7b4>)
 8001f34:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <main+0x7b8>)
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f3c:	63d3      	str	r3, [r2, #60]	; 0x3c
  writeServo(87.5);
 8001f3e:	e7e0      	b.n	8001f02 <main+0x6aa>
  pulse_servo2 = 500 + 2000 * 92.5 / 180;
 8001f40:	f240 53f7 	movw	r3, #1527	; 0x5f7
 8001f44:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <main+0x7ac>)
  writeServo(92.5);
 8001f46:	4836      	ldr	r0, [pc, #216]	; (8002020 <main+0x7c8>)
  pulse_servo2 = 500 + 2000 * 92.5 / 180;
 8001f48:	6013      	str	r3, [r2, #0]
  pulse_servo3 = pulse_servo2;
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <main+0x7b4>)
 8001f4c:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001f4e:	4a30      	ldr	r2, [pc, #192]	; (8002010 <main+0x7b8>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f54:	63d3      	str	r3, [r2, #60]	; 0x3c
  writeServo(92.5);
 8001f56:	e7d4      	b.n	8001f02 <main+0x6aa>
  pulse_servo2 = 500 + 2000 * 100 / 180;
 8001f58:	f240 634b 	movw	r3, #1611	; 0x64b
 8001f5c:	4a29      	ldr	r2, [pc, #164]	; (8002004 <main+0x7ac>)
  writeServo(100);
 8001f5e:	4658      	mov	r0, fp
  pulse_servo2 = 500 + 2000 * 100 / 180;
 8001f60:	6013      	str	r3, [r2, #0]
  pulse_servo3 = pulse_servo2;
 8001f62:	4a2a      	ldr	r2, [pc, #168]	; (800200c <main+0x7b4>)
 8001f64:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <main+0x7b8>)
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f6c:	63d3      	str	r3, [r2, #60]	; 0x3c
  writeServo(100);
 8001f6e:	e7c8      	b.n	8001f02 <main+0x6aa>
      pulse_servo2 = 500 + 2000 * 90 / 180;
 8001f70:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <main+0x7ac>)
      writeServo(90);
 8001f76:	4650      	mov	r0, sl
      pulse_servo2 = 500 + 2000 * 90 / 180;
 8001f78:	6013      	str	r3, [r2, #0]
      pulse_servo3 = pulse_servo2;
 8001f7a:	4a24      	ldr	r2, [pc, #144]	; (800200c <main+0x7b4>)
 8001f7c:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001f7e:	4a24      	ldr	r2, [pc, #144]	; (8002010 <main+0x7b8>)
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f84:	63d3      	str	r3, [r2, #60]	; 0x3c
      writeServo(90);
 8001f86:	e7bc      	b.n	8001f02 <main+0x6aa>
      writeServo(120);
 8001f88:	4826      	ldr	r0, [pc, #152]	; (8002024 <main+0x7cc>)
 8001f8a:	f7ff f997 	bl	80012bc <writeServo>
      break;
 8001f8e:	e627      	b.n	8001be0 <main+0x388>
      HAL_Delay(3000);
 8001f90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f94:	f000 fbc4 	bl	8002720 <HAL_Delay>
      setPower(13);
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <main+0x7d0>)
 8001f9a:	e62d      	b.n	8001bf8 <main+0x3a0>
      HAL_ADC_Start(&hadc1);
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <main+0x798>)
 8001f9e:	f000 fd3b 	bl	8002a18 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1);
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <main+0x798>)
 8001fa6:	f000 fbcd 	bl	8002744 <HAL_ADC_PollForConversion>
      value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001faa:	2100      	movs	r1, #0
 8001fac:	4810      	ldr	r0, [pc, #64]	; (8001ff0 <main+0x798>)
 8001fae:	f7ff fa21 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <main+0x79c>)
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001fb4:	2101      	movs	r1, #1
      value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001fb6:	6018      	str	r0, [r3, #0]
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <main+0x798>)
 8001fba:	f7ff fa1b 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <main+0x7a0>)
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001fc0:	2102      	movs	r1, #2
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001fc2:	6018      	str	r0, [r3, #0]
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001fc4:	480a      	ldr	r0, [pc, #40]	; (8001ff0 <main+0x798>)
 8001fc6:	f7ff fa15 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <main+0x7a4>)
      value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001fcc:	2103      	movs	r1, #3
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001fce:	6018      	str	r0, [r3, #0]
      value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <main+0x798>)
 8001fd2:	f7ff fa0f 	bl	80013f4 <Board_Get_ADCChannelValue>
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <main+0x7a8>)
 8001fd8:	6018      	str	r0, [r3, #0]
      HAL_Delay(500);
 8001fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fde:	f000 fb9f 	bl	8002720 <HAL_Delay>
      break;
 8001fe2:	e5fd      	b.n	8001be0 <main+0x388>
 8001fe4:	41b00000 	.word	0x41b00000
 8001fe8:	2000022c 	.word	0x2000022c
 8001fec:	20000228 	.word	0x20000228
 8001ff0:	20000058 	.word	0x20000058
 8001ff4:	20000014 	.word	0x20000014
 8001ff8:	20000018 	.word	0x20000018
 8001ffc:	2000001c 	.word	0x2000001c
 8002000:	20000020 	.word	0x20000020
 8002004:	20000220 	.word	0x20000220
 8002008:	42a00000 	.word	0x42a00000
 800200c:	20000224 	.word	0x20000224
 8002010:	20000134 	.word	0x20000134
 8002014:	2000004c 	.word	0x2000004c
 8002018:	20000000 	.word	0x20000000
 800201c:	42af0000 	.word	0x42af0000
 8002020:	42b90000 	.word	0x42b90000
 8002024:	42f00000 	.word	0x42f00000
 8002028:	41500000 	.word	0x41500000

0800202c <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800202c:	2800      	cmp	r0, #0
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	bf14      	ite	ne
 8002034:	21ff      	movne	r1, #255	; 0xff
 8002036:	2100      	moveq	r1, #0
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <SSD1306_Fill+0x14>)
 800203a:	f003 bb35 	b.w	80056a8 <memset>
 800203e:	bf00      	nop
 8002040:	2000023e 	.word	0x2000023e

08002044 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8002044:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002046:	b530      	push	{r4, r5, lr}
	if (
 8002048:	d811      	bhi.n	800206e <SSD1306_DrawPixel+0x2a>
		x >= SSD1306_WIDTH ||
 800204a:	293f      	cmp	r1, #63	; 0x3f
 800204c:	d80f      	bhi.n	800206e <SSD1306_DrawPixel+0x2a>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <SSD1306_DrawPixel+0x40>)
 8002050:	4c0d      	ldr	r4, [pc, #52]	; (8002088 <SSD1306_DrawPixel+0x44>)
 8002052:	791d      	ldrb	r5, [r3, #4]
 8002054:	08cb      	lsrs	r3, r1, #3
 8002056:	f001 0107 	and.w	r1, r1, #7
 800205a:	b14d      	cbz	r5, 8002070 <SSD1306_DrawPixel+0x2c>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800205c:	b952      	cbnz	r2, 8002074 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800205e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002062:	2301      	movs	r3, #1
 8002064:	fa03 f101 	lsl.w	r1, r3, r1
 8002068:	5c23      	ldrb	r3, [r4, r0]
 800206a:	4319      	orrs	r1, r3
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800206c:	5421      	strb	r1, [r4, r0]
	}
}
 800206e:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8002070:	2a01      	cmp	r2, #1
 8002072:	d0f4      	beq.n	800205e <SSD1306_DrawPixel+0x1a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002074:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002078:	2301      	movs	r3, #1
 800207a:	408b      	lsls	r3, r1
 800207c:	5c21      	ldrb	r1, [r4, r0]
 800207e:	ea21 0103 	bic.w	r1, r1, r3
 8002082:	e7f3      	b.n	800206c <SSD1306_DrawPixel+0x28>
 8002084:	20000238 	.word	0x20000238
 8002088:	2000023e 	.word	0x2000023e

0800208c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <SSD1306_GotoXY+0x8>)
 800208e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002090:	8059      	strh	r1, [r3, #2]
}
 8002092:	4770      	bx	lr
 8002094:	20000238 	.word	0x20000238

08002098 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800209c:	f8df b090 	ldr.w	fp, [pc, #144]	; 8002130 <SSD1306_Putc+0x98>
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020a0:	4691      	mov	r9, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020a2:	f8bb 6000 	ldrh.w	r6, [fp]
 80020a6:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020a8:	4605      	mov	r5, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020aa:	4432      	add	r2, r6
	if (
 80020ac:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020ae:	460c      	mov	r4, r1
 80020b0:	b085      	sub	sp, #20
	if (
 80020b2:	dc3a      	bgt.n	800212a <SSD1306_Putc+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80020b4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80020b8:	784a      	ldrb	r2, [r1, #1]
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80020be:	2a3f      	cmp	r2, #63	; 0x3f
 80020c0:	dc33      	bgt.n	800212a <SSD1306_Putc+0x92>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80020c2:	2700      	movs	r7, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020c4:	f1a0 0320 	sub.w	r3, r0, #32
 80020c8:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 80020ca:	7862      	ldrb	r2, [r4, #1]
 80020cc:	4297      	cmp	r7, r2
 80020ce:	d307      	bcc.n	80020e0 <SSD1306_Putc+0x48>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80020d0:	7822      	ldrb	r2, [r4, #0]
 80020d2:	4416      	add	r6, r2
 80020d4:	f8ab 6000 	strh.w	r6, [fp]
	
	/* Return character written */
	return ch;
}
 80020d8:	4628      	mov	r0, r5
 80020da:	b005      	add	sp, #20
 80020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 80020e0:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020e4:	9b03      	ldr	r3, [sp, #12]
 80020e6:	6861      	ldr	r1, [r4, #4]
 80020e8:	fb02 7203 	mla	r2, r2, r3, r7
 80020ec:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80020f0:	9302      	str	r3, [sp, #8]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020f2:	9b01      	ldr	r3, [sp, #4]
 80020f4:	19d9      	adds	r1, r3, r7
 80020f6:	fa1f fa81 	uxth.w	sl, r1
		for (j = 0; j < Font->FontWidth; j++) {
 80020fa:	7822      	ldrb	r2, [r4, #0]
 80020fc:	4590      	cmp	r8, r2
 80020fe:	d301      	bcc.n	8002104 <SSD1306_Putc+0x6c>
	for (i = 0; i < Font->FontHeight; i++) {
 8002100:	3701      	adds	r7, #1
 8002102:	e7e2      	b.n	80020ca <SSD1306_Putc+0x32>
			if ((b << j) & 0x8000) {
 8002104:	9b02      	ldr	r3, [sp, #8]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002106:	eb06 0008 	add.w	r0, r6, r8
			if ((b << j) & 0x8000) {
 800210a:	fa03 f208 	lsl.w	r2, r3, r8
 800210e:	0413      	lsls	r3, r2, #16
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002110:	bf54      	ite	pl
 8002112:	fab9 f289 	clzpl	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002116:	464a      	movmi	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002118:	4651      	mov	r1, sl
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800211a:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800211c:	bf58      	it	pl
 800211e:	0952      	lsrpl	r2, r2, #5
 8002120:	f7ff ff90 	bl	8002044 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002124:	f108 0801 	add.w	r8, r8, #1
 8002128:	e7e7      	b.n	80020fa <SSD1306_Putc+0x62>
		return 0;
 800212a:	2500      	movs	r5, #0
 800212c:	e7d4      	b.n	80020d8 <SSD1306_Putc+0x40>
 800212e:	bf00      	nop
 8002130:	20000238 	.word	0x20000238

08002134 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	460d      	mov	r5, r1
 8002138:	4616      	mov	r6, r2
 800213a:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 800213c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002140:	b138      	cbz	r0, 8002152 <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002142:	4632      	mov	r2, r6
 8002144:	4629      	mov	r1, r5
 8002146:	f7ff ffa7 	bl	8002098 <SSD1306_Putc>
 800214a:	4603      	mov	r3, r0
 800214c:	7820      	ldrb	r0, [r4, #0]
 800214e:	4283      	cmp	r3, r0
 8002150:	d0f4      	beq.n	800213c <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8002152:	bd70      	pop	{r4, r5, r6, pc}

08002154 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002154:	b530      	push	{r4, r5, lr}
uint8_t dt[256];
dt[0] = reg;
uint8_t i;
for(i = 0; i < count; i++)
 8002156:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002158:	b0c3      	sub	sp, #268	; 0x10c
dt[0] = reg;
 800215a:	f88d 1008 	strb.w	r1, [sp, #8]
for(i = 0; i < count; i++)
 800215e:	b2e1      	uxtb	r1, r4
 8002160:	4299      	cmp	r1, r3
 8002162:	f104 0501 	add.w	r5, r4, #1
 8002166:	d30a      	bcc.n	800217e <ssd1306_I2C_WriteMulti+0x2a>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002168:	220a      	movs	r2, #10
 800216a:	3301      	adds	r3, #1
 800216c:	4601      	mov	r1, r0
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	aa02      	add	r2, sp, #8
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <ssd1306_I2C_WriteMulti+0x38>)
 8002176:	f001 f861 	bl	800323c <HAL_I2C_Master_Transmit>
}
 800217a:	b043      	add	sp, #268	; 0x10c
 800217c:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 800217e:	ac02      	add	r4, sp, #8
 8002180:	440c      	add	r4, r1
 8002182:	5c51      	ldrb	r1, [r2, r1]
 8002184:	7061      	strb	r1, [r4, #1]
 8002186:	462c      	mov	r4, r5
 8002188:	e7e9      	b.n	800215e <ssd1306_I2C_WriteMulti+0xa>
 800218a:	bf00      	nop
 800218c:	20000088 	.word	0x20000088

08002190 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002192:	230a      	movs	r3, #10
	dt[0] = reg;
 8002194:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8002198:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800219c:	4601      	mov	r1, r0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	aa03      	add	r2, sp, #12
 80021a2:	2302      	movs	r3, #2
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <ssd1306_I2C_Write+0x20>)
 80021a6:	f001 f849 	bl	800323c <HAL_I2C_Master_Transmit>
}
 80021aa:	b005      	add	sp, #20
 80021ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80021b0:	20000088 	.word	0x20000088

080021b4 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	24b0      	movs	r4, #176	; 0xb0
 80021b8:	4d0e      	ldr	r5, [pc, #56]	; (80021f4 <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021ba:	4622      	mov	r2, r4
 80021bc:	2100      	movs	r1, #0
 80021be:	2078      	movs	r0, #120	; 0x78
 80021c0:	f7ff ffe6 	bl	8002190 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2078      	movs	r0, #120	; 0x78
 80021c8:	4611      	mov	r1, r2
 80021ca:	f7ff ffe1 	bl	8002190 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80021ce:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 80021d0:	2210      	movs	r2, #16
 80021d2:	2100      	movs	r1, #0
 80021d4:	2078      	movs	r0, #120	; 0x78
 80021d6:	f7ff ffdb 	bl	8002190 <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 80021da:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80021dc:	462a      	mov	r2, r5
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	2078      	movs	r0, #120	; 0x78
 80021e4:	f7ff ffb6 	bl	8002154 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80021e8:	2cb8      	cmp	r4, #184	; 0xb8
 80021ea:	f105 0580 	add.w	r5, r5, #128	; 0x80
 80021ee:	d1e4      	bne.n	80021ba <SSD1306_UpdateScreen+0x6>
}
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
 80021f2:	bf00      	nop
 80021f4:	2000023e 	.word	0x2000023e

080021f8 <SSD1306_Clear>:
{
 80021f8:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff ff16 	bl	800202c <SSD1306_Fill>
}
 8002200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 8002204:	f7ff bfd6 	b.w	80021b4 <SSD1306_UpdateScreen>

08002208 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002208:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800220a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800220e:	2201      	movs	r2, #1
 8002210:	2178      	movs	r1, #120	; 0x78
 8002212:	4852      	ldr	r0, [pc, #328]	; (800235c <SSD1306_Init+0x154>)
 8002214:	f001 f8ea 	bl	80033ec <HAL_I2C_IsDeviceReady>
 8002218:	4604      	mov	r4, r0
 800221a:	2800      	cmp	r0, #0
 800221c:	f040 809c 	bne.w	8002358 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002220:	4601      	mov	r1, r0
 8002222:	22ae      	movs	r2, #174	; 0xae
 8002224:	2078      	movs	r0, #120	; 0x78
 8002226:	f7ff ffb3 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800222a:	2220      	movs	r2, #32
 800222c:	4621      	mov	r1, r4
 800222e:	2078      	movs	r0, #120	; 0x78
 8002230:	f7ff ffae 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002234:	2210      	movs	r2, #16
 8002236:	4621      	mov	r1, r4
 8002238:	2078      	movs	r0, #120	; 0x78
 800223a:	f7ff ffa9 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800223e:	22b0      	movs	r2, #176	; 0xb0
 8002240:	4621      	mov	r1, r4
 8002242:	2078      	movs	r0, #120	; 0x78
 8002244:	f7ff ffa4 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002248:	22c8      	movs	r2, #200	; 0xc8
 800224a:	4621      	mov	r1, r4
 800224c:	2078      	movs	r0, #120	; 0x78
 800224e:	f7ff ff9f 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002252:	4622      	mov	r2, r4
 8002254:	4621      	mov	r1, r4
 8002256:	2078      	movs	r0, #120	; 0x78
 8002258:	f7ff ff9a 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800225c:	2210      	movs	r2, #16
 800225e:	4621      	mov	r1, r4
 8002260:	2078      	movs	r0, #120	; 0x78
 8002262:	f7ff ff95 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	4621      	mov	r1, r4
 800226a:	2078      	movs	r0, #120	; 0x78
 800226c:	f7ff ff90 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002270:	2281      	movs	r2, #129	; 0x81
 8002272:	4621      	mov	r1, r4
 8002274:	2078      	movs	r0, #120	; 0x78
 8002276:	f7ff ff8b 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	4621      	mov	r1, r4
 800227e:	2078      	movs	r0, #120	; 0x78
 8002280:	f7ff ff86 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002284:	22a1      	movs	r2, #161	; 0xa1
 8002286:	4621      	mov	r1, r4
 8002288:	2078      	movs	r0, #120	; 0x78
 800228a:	f7ff ff81 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800228e:	22a6      	movs	r2, #166	; 0xa6
 8002290:	4621      	mov	r1, r4
 8002292:	2078      	movs	r0, #120	; 0x78
 8002294:	f7ff ff7c 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002298:	22a8      	movs	r2, #168	; 0xa8
 800229a:	4621      	mov	r1, r4
 800229c:	2078      	movs	r0, #120	; 0x78
 800229e:	f7ff ff77 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022a2:	223f      	movs	r2, #63	; 0x3f
 80022a4:	4621      	mov	r1, r4
 80022a6:	2078      	movs	r0, #120	; 0x78
 80022a8:	f7ff ff72 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022ac:	22a4      	movs	r2, #164	; 0xa4
 80022ae:	4621      	mov	r1, r4
 80022b0:	2078      	movs	r0, #120	; 0x78
 80022b2:	f7ff ff6d 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022b6:	22d3      	movs	r2, #211	; 0xd3
 80022b8:	4621      	mov	r1, r4
 80022ba:	2078      	movs	r0, #120	; 0x78
 80022bc:	f7ff ff68 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022c0:	4622      	mov	r2, r4
 80022c2:	4621      	mov	r1, r4
 80022c4:	2078      	movs	r0, #120	; 0x78
 80022c6:	f7ff ff63 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022ca:	22d5      	movs	r2, #213	; 0xd5
 80022cc:	4621      	mov	r1, r4
 80022ce:	2078      	movs	r0, #120	; 0x78
 80022d0:	f7ff ff5e 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022d4:	22f0      	movs	r2, #240	; 0xf0
 80022d6:	4621      	mov	r1, r4
 80022d8:	2078      	movs	r0, #120	; 0x78
 80022da:	f7ff ff59 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80022de:	22d9      	movs	r2, #217	; 0xd9
 80022e0:	4621      	mov	r1, r4
 80022e2:	2078      	movs	r0, #120	; 0x78
 80022e4:	f7ff ff54 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80022e8:	2222      	movs	r2, #34	; 0x22
 80022ea:	4621      	mov	r1, r4
 80022ec:	2078      	movs	r0, #120	; 0x78
 80022ee:	f7ff ff4f 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80022f2:	22da      	movs	r2, #218	; 0xda
 80022f4:	4621      	mov	r1, r4
 80022f6:	2078      	movs	r0, #120	; 0x78
 80022f8:	f7ff ff4a 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80022fc:	2212      	movs	r2, #18
 80022fe:	4621      	mov	r1, r4
 8002300:	2078      	movs	r0, #120	; 0x78
 8002302:	f7ff ff45 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002306:	22db      	movs	r2, #219	; 0xdb
 8002308:	4621      	mov	r1, r4
 800230a:	2078      	movs	r0, #120	; 0x78
 800230c:	f7ff ff40 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002310:	2220      	movs	r2, #32
 8002312:	4621      	mov	r1, r4
 8002314:	2078      	movs	r0, #120	; 0x78
 8002316:	f7ff ff3b 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800231a:	228d      	movs	r2, #141	; 0x8d
 800231c:	4621      	mov	r1, r4
 800231e:	2078      	movs	r0, #120	; 0x78
 8002320:	f7ff ff36 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002324:	2214      	movs	r2, #20
 8002326:	4621      	mov	r1, r4
 8002328:	2078      	movs	r0, #120	; 0x78
 800232a:	f7ff ff31 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800232e:	22af      	movs	r2, #175	; 0xaf
 8002330:	4621      	mov	r1, r4
 8002332:	2078      	movs	r0, #120	; 0x78
 8002334:	f7ff ff2c 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002338:	222e      	movs	r2, #46	; 0x2e
 800233a:	4621      	mov	r1, r4
 800233c:	2078      	movs	r0, #120	; 0x78
 800233e:	f7ff ff27 	bl	8002190 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002342:	4620      	mov	r0, r4
 8002344:	f7ff fe72 	bl	800202c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002348:	f7ff ff34 	bl	80021b4 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 800234c:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SSD1306_Init+0x158>)
 8002350:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8002352:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8002354:	7158      	strb	r0, [r3, #5]
}
 8002356:	bd10      	pop	{r4, pc}
		return 0;
 8002358:	2000      	movs	r0, #0
 800235a:	e7fc      	b.n	8002356 <SSD1306_Init+0x14e>
 800235c:	20000088 	.word	0x20000088
 8002360:	20000238 	.word	0x20000238

08002364 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_MspInit+0x3c>)
{
 8002366:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	f002 0201 	and.w	r2, r2, #1
 8002376:	9200      	str	r2, [sp, #0]
 8002378:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002380:	61da      	str	r2, [r3, #28]
 8002382:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800238e:	6853      	ldr	r3, [r2, #4]
 8002390:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	b002      	add	sp, #8
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000

080023a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ae:	2210      	movs	r2, #16
 80023b0:	2100      	movs	r1, #0
 80023b2:	a802      	add	r0, sp, #8
 80023b4:	f003 f978 	bl	80056a8 <memset>
  if(hadc->Instance==ADC1)
 80023b8:	6822      	ldr	r2, [r4, #0]
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_ADC_MspInit+0x54>)
 80023bc:	429a      	cmp	r2, r3
 80023be:	d11b      	bne.n	80023f8 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023c0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80023c4:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	480e      	ldr	r0, [pc, #56]	; (8002400 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d0:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023d2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023d6:	9200      	str	r2, [sp, #0]
 80023d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	f042 0204 	orr.w	r2, r2, #4
 80023e0:	619a      	str	r2, [r3, #24]
 80023e2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e4:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f000 fcc2 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023f8:	b006      	add	sp, #24
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	40012400 	.word	0x40012400
 8002400:	40010800 	.word	0x40010800

08002404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002404:	b510      	push	{r4, lr}
 8002406:	4604      	mov	r4, r0
 8002408:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	2210      	movs	r2, #16
 800240c:	2100      	movs	r1, #0
 800240e:	a802      	add	r0, sp, #8
 8002410:	f003 f94a 	bl	80056a8 <memset>
  if(hi2c->Instance==I2C1)
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_I2C_MspInit+0x58>)
 8002418:	429a      	cmp	r2, r3
 800241a:	d11c      	bne.n	8002456 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241c:	4c10      	ldr	r4, [pc, #64]	; (8002460 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	4810      	ldr	r0, [pc, #64]	; (8002464 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	61a3      	str	r3, [r4, #24]
 800242a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002436:	2312      	movs	r3, #18
 8002438:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f000 fc9c 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002444:	69e3      	ldr	r3, [r4, #28]
 8002446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800244a:	61e3      	str	r3, [r4, #28]
 800244c:	69e3      	ldr	r3, [r4, #28]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002456:	b006      	add	sp, #24
 8002458:	bd10      	pop	{r4, pc}
 800245a:	bf00      	nop
 800245c:	40005400 	.word	0x40005400
 8002460:	40021000 	.word	0x40021000
 8002464:	40010c00 	.word	0x40010c00

08002468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002468:	b510      	push	{r4, lr}
 800246a:	4604      	mov	r4, r0
 800246c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246e:	2210      	movs	r2, #16
 8002470:	2100      	movs	r1, #0
 8002472:	a802      	add	r0, sp, #8
 8002474:	f003 f918 	bl	80056a8 <memset>
  if(hspi->Instance==SPI1)
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_SPI_MspInit+0x7c>)
 800247c:	429a      	cmp	r2, r3
 800247e:	d12e      	bne.n	80024de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002480:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002484:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	4818      	ldr	r0, [pc, #96]	; (80024e8 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002488:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800248c:	619a      	str	r2, [r3, #24]
 800248e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002492:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	f042 0204 	orr.w	r2, r2, #4
 80024a2:	619a      	str	r2, [r3, #24]
 80024a4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f000 fc5f 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	4809      	ldr	r0, [pc, #36]	; (80024e8 <HAL_SPI_MspInit+0x80>)
 80024c2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c4:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f000 fc57 	bl	8002d7c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024ce:	2023      	movs	r0, #35	; 0x23
 80024d0:	4622      	mov	r2, r4
 80024d2:	4621      	mov	r1, r4
 80024d4:	f000 fbb8 	bl	8002c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024d8:	2023      	movs	r0, #35	; 0x23
 80024da:	f000 fbe7 	bl	8002cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024de:	b006      	add	sp, #24
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	bf00      	nop
 80024e4:	40013000 	.word	0x40013000
 80024e8:	40010800 	.word	0x40010800

080024ec <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_TIM_PWM_MspInit+0x40>)
{
 80024f0:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10b      	bne.n	800250e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_TIM_PWM_MspInit+0x44>)
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800250a:	b002      	add	sp, #8
 800250c:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 800250e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002512:	d1fa      	bne.n	800250a <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002514:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	61da      	str	r2, [r3, #28]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	9b01      	ldr	r3, [sp, #4]
}
 800252a:	e7ee      	b.n	800250a <HAL_TIM_PWM_MspInit+0x1e>
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002534:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_TIM_Base_MspInit+0x3c>)
 8002538:	6802      	ldr	r2, [r0, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d115      	bne.n	800256a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002542:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002544:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002546:	f042 0202 	orr.w	r2, r2, #2
 800254a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800254c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002550:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800255a:	f000 fb75 	bl	8002c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800255e:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002560:	b003      	add	sp, #12
 8002562:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002566:	f000 bba1 	b.w	8002cac <HAL_NVIC_EnableIRQ>
}
 800256a:	b003      	add	sp, #12
 800256c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002570:	40000400 	.word	0x40000400

08002574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002574:	b510      	push	{r4, lr}
 8002576:	4604      	mov	r4, r0
 8002578:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	2210      	movs	r2, #16
 800257c:	2100      	movs	r1, #0
 800257e:	a802      	add	r0, sp, #8
 8002580:	f003 f892 	bl	80056a8 <memset>
  if(htim->Instance==TIM1)
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_TIM_MspPostInit+0x88>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d115      	bne.n	80025b8 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_TIM_MspPostInit+0x8c>)
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	481b      	ldr	r0, [pc, #108]	; (8002604 <HAL_TIM_MspPostInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	f042 0204 	orr.w	r2, r2, #4
 800259a:	619a      	str	r2, [r3, #24]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f000 fbe4 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025b4:	b006      	add	sp, #24
 80025b6:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d1fa      	bne.n	80025b4 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80025c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	480f      	ldr	r0, [pc, #60]	; (8002604 <HAL_TIM_MspPostInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	f042 0204 	orr.w	r2, r2, #4
 80025ca:	619a      	str	r2, [r3, #24]
 80025cc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f000 fbca 	bl	8002d7c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_TIM_MspPostInit+0x94>)
 80025ea:	6853      	ldr	r3, [r2, #4]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6053      	str	r3, [r2, #4]
}
 80025fa:	e7db      	b.n	80025b4 <HAL_TIM_MspPostInit+0x40>
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40021000 	.word	0x40021000
 8002604:	40010800 	.word	0x40010800
 8002608:	40010000 	.word	0x40010000

0800260c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800260c:	e7fe      	b.n	800260c <NMI_Handler>

0800260e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <HardFault_Handler>

08002610 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler>

08002612 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <BusFault_Handler>

08002614 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler>

08002616 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002616:	4770      	bx	lr

08002618 <DebugMon_Handler>:
 8002618:	4770      	bx	lr

0800261a <PendSV_Handler>:
 800261a:	4770      	bx	lr

0800261c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261c:	f000 b86e 	b.w	80026fc <HAL_IncTick>

08002620 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <TIM3_IRQHandler+0x8>)
 8002622:	f001 bc8d 	b.w	8003f40 <HAL_TIM_IRQHandler>
 8002626:	bf00      	nop
 8002628:	200001c4 	.word	0x200001c4

0800262c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800262c:	4801      	ldr	r0, [pc, #4]	; (8002634 <SPI1_IRQHandler+0x8>)
 800262e:	f001 bb67 	b.w	8003d00 <HAL_SPI_IRQHandler>
 8002632:	bf00      	nop
 8002634:	200000dc 	.word	0x200000dc

08002638 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002638:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800263c:	f000 bc78 	b.w	8002f30 <HAL_GPIO_EXTI_IRQHandler>

08002640 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	4770      	bx	lr
	...

08002644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002646:	490d      	ldr	r1, [pc, #52]	; (800267c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800266a:	f7ff ffe9 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266e:	f002 ffdd 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002672:	f7ff f8f1 	bl	8001858 <main>
  bx lr
 8002676:	4770      	bx	lr
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8002680:	08007a98 	.word	0x08007a98
  ldr r2, =_sbss
 8002684:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8002688:	20000644 	.word	0x20000644

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>
	...

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_InitTick+0x3c>)
{
 8002694:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002696:	7818      	ldrb	r0, [r3, #0]
 8002698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269c:	fbb3 f3f0 	udiv	r3, r3, r0
 80026a0:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <HAL_InitTick+0x40>)
 80026a2:	6810      	ldr	r0, [r2, #0]
 80026a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80026a8:	f000 fb0e 	bl	8002cc8 <HAL_SYSTICK_Config>
 80026ac:	4604      	mov	r4, r0
 80026ae:	b958      	cbnz	r0, 80026c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b0:	2d0f      	cmp	r5, #15
 80026b2:	d809      	bhi.n	80026c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b4:	4602      	mov	r2, r0
 80026b6:	4629      	mov	r1, r5
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026bc:	f000 fac4 	bl	8002c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c0:	4620      	mov	r0, r4
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_InitTick+0x44>)
 80026c4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
 80026ca:	e7fc      	b.n	80026c6 <HAL_InitTick+0x36>
 80026cc:	20000028 	.word	0x20000028
 80026d0:	20000024 	.word	0x20000024
 80026d4:	2000002c 	.word	0x2000002c

080026d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <HAL_Init+0x20>)
{
 80026da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e0:	f043 0310 	orr.w	r3, r3, #16
 80026e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e6:	f000 fa9d 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ea:	200f      	movs	r0, #15
 80026ec:	f7ff ffd0 	bl	8002690 <HAL_InitTick>
  HAL_MspInit();
 80026f0:	f7ff fe38 	bl	8002364 <HAL_MspInit>
}
 80026f4:	2000      	movs	r0, #0
 80026f6:	bd08      	pop	{r3, pc}
 80026f8:	40022000 	.word	0x40022000

080026fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_IncTick+0x10>)
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <HAL_IncTick+0x14>)
 8002700:	6811      	ldr	r1, [r2, #0]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	440b      	add	r3, r1
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000640 	.word	0x20000640
 8002710:	20000028 	.word	0x20000028

08002714 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <HAL_GetTick+0x8>)
 8002716:	6818      	ldr	r0, [r3, #0]
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000640 	.word	0x20000640

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff fff6 	bl	8002714 <HAL_GetTick>
 8002728:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800272c:	bf1e      	ittt	ne
 800272e:	4b04      	ldrne	r3, [pc, #16]	; (8002740 <HAL_Delay+0x20>)
 8002730:	781b      	ldrbne	r3, [r3, #0]
 8002732:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	1b43      	subs	r3, r0, r5
 800273a:	42a3      	cmp	r3, r4
 800273c:	d3fa      	bcc.n	8002734 <HAL_Delay+0x14>
  {
  }
}
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	20000028 	.word	0x20000028

08002744 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002746:	2600      	movs	r6, #0
{
 8002748:	4604      	mov	r4, r0
 800274a:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800274c:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800274e:	f7ff ffe1 	bl	8002714 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002752:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002754:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	05d2      	lsls	r2, r2, #23
 800275a:	d508      	bpl.n	800276e <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002760:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800276a:	b003      	add	sp, #12
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	05d6      	lsls	r6, r2, #23
 8002772:	d403      	bmi.n	800277c <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002776:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800277a:	d03f      	beq.n	80027fc <HAL_ADC_PollForConversion+0xb8>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_ADC_PollForConversion+0x140>)
 800277e:	2002      	movs	r0, #2
 8002780:	681e      	ldr	r6, [r3, #0]
 8002782:	f001 f9f1 	bl	8003b68 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_ADC_PollForConversion+0x144>)
 800278a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800278c:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002790:	4211      	tst	r1, r2
 8002792:	4a3e      	ldr	r2, [pc, #248]	; (800288c <HAL_ADC_PollForConversion+0x148>)
 8002794:	d153      	bne.n	800283e <HAL_ADC_PollForConversion+0xfa>
 8002796:	68d8      	ldr	r0, [r3, #12]
 8002798:	493d      	ldr	r1, [pc, #244]	; (8002890 <HAL_ADC_PollForConversion+0x14c>)
 800279a:	4208      	tst	r0, r1
 800279c:	d14f      	bne.n	800283e <HAL_ADC_PollForConversion+0xfa>
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	4211      	tst	r1, r2
 80027a2:	d15d      	bne.n	8002860 <HAL_ADC_PollForConversion+0x11c>
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_ADC_PollForConversion+0x150>)
 80027a8:	421a      	tst	r2, r3
 80027aa:	bf14      	ite	ne
 80027ac:	2329      	movne	r3, #41	; 0x29
 80027ae:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027b0:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	42b3      	cmp	r3, r6
 80027b6:	d225      	bcs.n	8002804 <HAL_ADC_PollForConversion+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80027b8:	1c6a      	adds	r2, r5, #1
 80027ba:	d05c      	beq.n	8002876 <HAL_ADC_PollForConversion+0x132>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027bc:	2d00      	cmp	r5, #0
 80027be:	d155      	bne.n	800286c <HAL_ADC_PollForConversion+0x128>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027c0:	9b01      	ldr	r3, [sp, #4]
 80027c2:	42b3      	cmp	r3, r6
 80027c4:	d257      	bcs.n	8002876 <HAL_ADC_PollForConversion+0x132>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	62a3      	str	r3, [r4, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80027ce:	2300      	movs	r3, #0
 80027d0:	e00b      	b.n	80027ea <HAL_ADC_PollForConversion+0xa6>
      if(Timeout != HAL_MAX_DELAY)
 80027d2:	1c68      	adds	r0, r5, #1
 80027d4:	d013      	beq.n	80027fe <HAL_ADC_PollForConversion+0xba>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027d6:	b965      	cbnz	r5, 80027f2 <HAL_ADC_PollForConversion+0xae>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f013 0302 	ands.w	r3, r3, #2
 80027e0:	d10c      	bne.n	80027fc <HAL_ADC_PollForConversion+0xb8>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027e4:	f042 0204 	orr.w	r2, r2, #4
 80027e8:	62a2      	str	r2, [r4, #40]	; 0x28
            return HAL_TIMEOUT;
 80027ea:	2003      	movs	r0, #3
            __HAL_UNLOCK(hadc);
 80027ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            return HAL_TIMEOUT;
 80027f0:	e7bb      	b.n	800276a <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027f2:	f7ff ff8f 	bl	8002714 <HAL_GetTick>
 80027f6:	1bc0      	subs	r0, r0, r7
 80027f8:	42a8      	cmp	r0, r5
 80027fa:	d8ed      	bhi.n	80027d8 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	0799      	lsls	r1, r3, #30
 8002802:	d5e6      	bpl.n	80027d2 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002804:	f06f 0312 	mvn.w	r3, #18
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002814:	6893      	ldr	r3, [r2, #8]
 8002816:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800281a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281e:	d12e      	bne.n	800287e <HAL_ADC_PollForConversion+0x13a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002820:	7b20      	ldrb	r0, [r4, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002822:	2800      	cmp	r0, #0
 8002824:	d12b      	bne.n	800287e <HAL_ADC_PollForConversion+0x13a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800282e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002830:	04db      	lsls	r3, r3, #19
 8002832:	d424      	bmi.n	800287e <HAL_ADC_PollForConversion+0x13a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	62a3      	str	r3, [r4, #40]	; 0x28
 800283c:	e795      	b.n	800276a <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800283e:	6919      	ldr	r1, [r3, #16]
 8002840:	4211      	tst	r1, r2
 8002842:	d103      	bne.n	800284c <HAL_ADC_PollForConversion+0x108>
 8002844:	68d9      	ldr	r1, [r3, #12]
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <HAL_ADC_PollForConversion+0x150>)
 8002848:	4211      	tst	r1, r2
 800284a:	d00b      	beq.n	8002864 <HAL_ADC_PollForConversion+0x120>
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <HAL_ADC_PollForConversion+0x154>)
 8002850:	4211      	tst	r1, r2
 8002852:	d109      	bne.n	8002868 <HAL_ADC_PollForConversion+0x124>
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4213      	tst	r3, r2
 8002858:	bf14      	ite	ne
 800285a:	23fc      	movne	r3, #252	; 0xfc
 800285c:	2354      	moveq	r3, #84	; 0x54
 800285e:	e7a7      	b.n	80027b0 <HAL_ADC_PollForConversion+0x6c>
 8002860:	2329      	movs	r3, #41	; 0x29
 8002862:	e7a5      	b.n	80027b0 <HAL_ADC_PollForConversion+0x6c>
 8002864:	2354      	movs	r3, #84	; 0x54
 8002866:	e7a3      	b.n	80027b0 <HAL_ADC_PollForConversion+0x6c>
 8002868:	23fc      	movs	r3, #252	; 0xfc
 800286a:	e7a1      	b.n	80027b0 <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800286c:	f7ff ff52 	bl	8002714 <HAL_GetTick>
 8002870:	1bc0      	subs	r0, r0, r7
 8002872:	42a8      	cmp	r0, r5
 8002874:	d8a4      	bhi.n	80027c0 <HAL_ADC_PollForConversion+0x7c>
      Conversion_Timeout_CPU_cycles ++;
 8002876:	9b01      	ldr	r3, [sp, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	e799      	b.n	80027b2 <HAL_ADC_PollForConversion+0x6e>
  return HAL_OK;
 800287e:	2000      	movs	r0, #0
 8002880:	e773      	b.n	800276a <HAL_ADC_PollForConversion+0x26>
 8002882:	bf00      	nop
 8002884:	20000024 	.word	0x20000024
 8002888:	24924924 	.word	0x24924924
 800288c:	12492492 	.word	0x12492492
 8002890:	00924924 	.word	0x00924924
 8002894:	00492492 	.word	0x00492492
 8002898:	00249249 	.word	0x00249249

0800289c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800289c:	6803      	ldr	r3, [r0, #0]
 800289e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80028a4:	2300      	movs	r3, #0
{ 
 80028a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80028a8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80028ae:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d06c      	beq.n	800298e <HAL_ADC_ConfigChannel+0xea>
 80028b4:	2301      	movs	r3, #1
 80028b6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ba:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028bc:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80028be:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028c0:	6808      	ldr	r0, [r1, #0]
 80028c2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80028c6:	d822      	bhi.n	800290e <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028c8:	261f      	movs	r6, #31
 80028ca:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80028cc:	3b05      	subs	r3, #5
 80028ce:	409e      	lsls	r6, r3
 80028d0:	ea25 0506 	bic.w	r5, r5, r6
 80028d4:	fa00 f303 	lsl.w	r3, r0, r3
 80028d8:	432b      	orrs	r3, r5
 80028da:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028dc:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028de:	688b      	ldr	r3, [r1, #8]
 80028e0:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80028e4:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028e8:	d929      	bls.n	800293e <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028ea:	68d6      	ldr	r6, [r2, #12]
 80028ec:	3d1e      	subs	r5, #30
 80028ee:	40a9      	lsls	r1, r5
 80028f0:	ea26 0101 	bic.w	r1, r6, r1
 80028f4:	40ab      	lsls	r3, r5
 80028f6:	430b      	orrs	r3, r1
 80028f8:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028fa:	f1a0 0310 	sub.w	r3, r0, #16
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d925      	bls.n	800294e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002902:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002904:	2300      	movs	r3, #0
 8002906:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800290a:	b002      	add	sp, #8
 800290c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800290e:	2d0c      	cmp	r5, #12
 8002910:	f04f 051f 	mov.w	r5, #31
 8002914:	d809      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002916:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002918:	3b23      	subs	r3, #35	; 0x23
 800291a:	409d      	lsls	r5, r3
 800291c:	ea26 0505 	bic.w	r5, r6, r5
 8002920:	fa00 f303 	lsl.w	r3, r0, r3
 8002924:	432b      	orrs	r3, r5
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	e7d8      	b.n	80028dc <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800292a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800292c:	3b41      	subs	r3, #65	; 0x41
 800292e:	409d      	lsls	r5, r3
 8002930:	ea26 0505 	bic.w	r5, r6, r5
 8002934:	fa00 f303 	lsl.w	r3, r0, r3
 8002938:	432b      	orrs	r3, r5
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800293c:	e7ce      	b.n	80028dc <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800293e:	6910      	ldr	r0, [r2, #16]
 8002940:	40a9      	lsls	r1, r5
 8002942:	ea20 0101 	bic.w	r1, r0, r1
 8002946:	40ab      	lsls	r3, r5
 8002948:	430b      	orrs	r3, r1
 800294a:	6113      	str	r3, [r2, #16]
 800294c:	e7d9      	b.n	8002902 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_ADC_ConfigChannel+0xf0>)
 8002950:	429a      	cmp	r2, r3
 8002952:	d116      	bne.n	8002982 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002954:	6893      	ldr	r3, [r2, #8]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	d4d3      	bmi.n	8002902 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800295a:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800295c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800295e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002962:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002964:	d1cd      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_ADC_ConfigChannel+0xf4>)
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_ADC_ConfigChannel+0xf8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002970:	220a      	movs	r2, #10
 8002972:	4353      	muls	r3, r2
            wait_loop_index--;
 8002974:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0c2      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 800297c:	9b01      	ldr	r3, [sp, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	e7f8      	b.n	8002974 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002984:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002986:	f043 0320 	orr.w	r3, r3, #32
 800298a:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800298c:	e7ba      	b.n	8002904 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800298e:	2002      	movs	r0, #2
 8002990:	e7bb      	b.n	800290a <HAL_ADC_ConfigChannel+0x66>
 8002992:	bf00      	nop
 8002994:	40012400 	.word	0x40012400
 8002998:	20000024 	.word	0x20000024
 800299c:	000f4240 	.word	0x000f4240

080029a0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80029a0:	2300      	movs	r3, #0
{
 80029a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80029a4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a6:	6803      	ldr	r3, [r0, #0]
{
 80029a8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	07d2      	lsls	r2, r2, #31
 80029ae:	d502      	bpl.n	80029b6 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	b003      	add	sp, #12
 80029b4:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <ADC_Enable+0x70>)
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <ADC_Enable+0x74>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80029c8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80029ca:	9b01      	ldr	r3, [sp, #4]
 80029cc:	b9e3      	cbnz	r3, 8002a08 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80029ce:	f7ff fea1 	bl	8002714 <HAL_GetTick>
 80029d2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	07db      	lsls	r3, r3, #31
 80029da:	d4e9      	bmi.n	80029b0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029dc:	f7ff fe9a 	bl	8002714 <HAL_GetTick>
 80029e0:	1b40      	subs	r0, r0, r5
 80029e2:	2802      	cmp	r0, #2
 80029e4:	d9f6      	bls.n	80029d4 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f013 0301 	ands.w	r3, r3, #1
 80029ee:	d1f1      	bne.n	80029d4 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f4:	f042 0210 	orr.w	r2, r2, #16
 80029f8:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80029fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002a06:	e7d4      	b.n	80029b2 <ADC_Enable+0x12>
      wait_loop_index--;
 8002a08:	9b01      	ldr	r3, [sp, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	e7dc      	b.n	80029c8 <ADC_Enable+0x28>
 8002a0e:	bf00      	nop
 8002a10:	20000024 	.word	0x20000024
 8002a14:	000f4240 	.word	0x000f4240

08002a18 <HAL_ADC_Start>:
{
 8002a18:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002a1a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002a1e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d054      	beq.n	8002ace <HAL_ADC_Start+0xb6>
 8002a24:	2301      	movs	r3, #1
 8002a26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002a2a:	f7ff ffb9 	bl	80029a0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d149      	bne.n	8002ac6 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8002a32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a34:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d104      	bne.n	8002a54 <HAL_ADC_Start+0x3c>
 8002a4a:	4923      	ldr	r1, [pc, #140]	; (8002ad8 <HAL_ADC_Start+0xc0>)
 8002a4c:	684a      	ldr	r2, [r1, #4]
 8002a4e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002a52:	d12e      	bne.n	8002ab2 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a56:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002a5a:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a5c:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a5e:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a60:	bf41      	itttt	mi
 8002a62:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8002a64:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8002a68:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8002a6c:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a74:	bf1c      	itt	ne
 8002a76:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8002a78:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002a7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a84:	f06f 0202 	mvn.w	r2, #2
 8002a88:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002a90:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002a94:	d113      	bne.n	8002abe <HAL_ADC_Start+0xa6>
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <HAL_ADC_Start+0xbc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a9c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002aa0:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002aa2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ab4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ab8:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002aba:	684a      	ldr	r2, [r1, #4]
 8002abc:	e7cf      	b.n	8002a5e <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ac4:	e7f3      	b.n	8002aae <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002acc:	e7f0      	b.n	8002ab0 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8002ace:	2002      	movs	r0, #2
 8002ad0:	e7ee      	b.n	8002ab0 <HAL_ADC_Start+0x98>
 8002ad2:	bf00      	nop
 8002ad4:	40012800 	.word	0x40012800
 8002ad8:	40012400 	.word	0x40012400

08002adc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002adc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ade:	6803      	ldr	r3, [r0, #0]
{
 8002ae0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	07d1      	lsls	r1, r2, #31
 8002ae6:	d401      	bmi.n	8002aec <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ae8:	2000      	movs	r0, #0
}
 8002aea:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002af4:	f7ff fe0e 	bl	8002714 <HAL_GetTick>
 8002af8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	07db      	lsls	r3, r3, #31
 8002b00:	d5f2      	bpl.n	8002ae8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b02:	f7ff fe07 	bl	8002714 <HAL_GetTick>
 8002b06:	1b40      	subs	r0, r0, r5
 8002b08:	2802      	cmp	r0, #2
 8002b0a:	d9f6      	bls.n	8002afa <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	07da      	lsls	r2, r3, #31
 8002b12:	d5f2      	bpl.n	8002afa <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b18:	f043 0310 	orr.w	r3, r3, #16
 8002b1c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002b26:	e7e0      	b.n	8002aea <ADC_ConversionStop_Disable+0xe>

08002b28 <HAL_ADC_Init>:
{
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d06e      	beq.n	8002c0e <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b32:	b923      	cbnz	r3, 8002b3e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002b36:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002b3a:	f7ff fc35 	bl	80023a8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff ffcc 	bl	8002adc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b46:	f013 0310 	ands.w	r3, r3, #16
 8002b4a:	d162      	bne.n	8002c12 <HAL_ADC_Init+0xea>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d160      	bne.n	8002c12 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8002b50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b52:	69e5      	ldr	r5, [r4, #28]
 8002b54:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002b5a:	f022 0202 	bic.w	r2, r2, #2
 8002b5e:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b62:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b64:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b68:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b6a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b6e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b72:	d037      	beq.n	8002be4 <HAL_ADC_Init+0xbc>
 8002b74:	2d01      	cmp	r5, #1
 8002b76:	bf14      	ite	ne
 8002b78:	2700      	movne	r7, #0
 8002b7a:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b7e:	7d26      	ldrb	r6, [r4, #20]
 8002b80:	2e01      	cmp	r6, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b84:	bb82      	cbnz	r2, 8002be8 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b86:	69a2      	ldr	r2, [r4, #24]
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8002b8e:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002b92:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b94:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002b98:	6856      	ldr	r6, [r2, #4]
 8002b9a:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002b9e:	ea46 0607 	orr.w	r6, r6, r7
 8002ba2:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002ba4:	6897      	ldr	r7, [r2, #8]
 8002ba6:	4e1d      	ldr	r6, [pc, #116]	; (8002c1c <HAL_ADC_Init+0xf4>)
 8002ba8:	ea06 0607 	and.w	r6, r6, r7
 8002bac:	ea46 0601 	orr.w	r6, r6, r1
 8002bb0:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bb2:	d001      	beq.n	8002bb8 <HAL_ADC_Init+0x90>
 8002bb4:	2d01      	cmp	r5, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bb8:	6923      	ldr	r3, [r4, #16]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002bbe:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002bc0:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8002bc4:	432b      	orrs	r3, r5
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_ADC_Init+0xf8>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	4299      	cmp	r1, r3
 8002bd0:	d113      	bne.n	8002bfa <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bd8:	f023 0303 	bic.w	r3, r3, #3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002be4:	462f      	mov	r7, r5
 8002be6:	e7ca      	b.n	8002b7e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002bf8:	e7cb      	b.n	8002b92 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8002bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bfc:	f023 0312 	bic.w	r3, r3, #18
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	e7e7      	b.n	8002be2 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c14:	f043 0310 	orr.w	r3, r3, #16
 8002c18:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002c1a:	e7f8      	b.n	8002c0e <HAL_ADC_Init+0xe6>
 8002c1c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c20:	ff1f0efe 	.word	0xff1f0efe

08002c24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c26:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c32:	0412      	lsls	r2, r2, #16
 8002c34:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c40:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b530      	push	{r4, r5, lr}
 8002c4c:	68dc      	ldr	r4, [r3, #12]
 8002c4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	bf28      	it	cs
 8002c5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c64:	bf98      	it	ls
 8002c66:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6c:	bf88      	it	hi
 8002c6e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c70:	ea21 0303 	bic.w	r3, r1, r3
 8002c74:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c76:	fa05 f404 	lsl.w	r4, r5, r4
 8002c7a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	bfac      	ite	ge
 8002c86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	4a07      	ldrlt	r2, [pc, #28]	; (8002ca8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	bfab      	itete	ge
 8002c94:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ca2:	bd30      	pop	{r4, r5, pc}
 8002ca4:	e000ed00 	.word	0xe000ed00
 8002ca8:	e000ed14 	.word	0xe000ed14

08002cac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002cac:	2800      	cmp	r0, #0
 8002cae:	db08      	blt.n	8002cc2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	0942      	lsrs	r2, r0, #5
 8002cb4:	f000 001f 	and.w	r0, r0, #31
 8002cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8002cbc:	4b01      	ldr	r3, [pc, #4]	; (8002cc4 <HAL_NVIC_EnableIRQ+0x18>)
 8002cbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	3801      	subs	r0, #1
 8002cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002cce:	d20b      	bcs.n	8002ce8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	21f0      	movs	r1, #240	; 0xf0
 8002cd6:	4a05      	ldr	r2, [pc, #20]	; (8002cec <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cde:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ce8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cf2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002d00:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_DMA_Abort_IT+0x84>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01c      	beq.n	8002d54 <HAL_DMA_Abort_IT+0x64>
 8002d1a:	3214      	adds	r2, #20
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01b      	beq.n	8002d58 <HAL_DMA_Abort_IT+0x68>
 8002d20:	3214      	adds	r2, #20
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01a      	beq.n	8002d5c <HAL_DMA_Abort_IT+0x6c>
 8002d26:	3214      	adds	r2, #20
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01a      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x72>
 8002d2c:	3214      	adds	r2, #20
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01a      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x78>
 8002d32:	3214      	adds	r2, #20
 8002d34:	4293      	cmp	r3, r2
 8002d36:	bf0c      	ite	eq
 8002d38:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002d3c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <HAL_DMA_Abort_IT+0x88>)
 8002d42:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d48:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002d4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d4c:	b17b      	cbz	r3, 8002d6e <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8002d4e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2000      	movs	r0, #0
 8002d52:	e7d5      	b.n	8002d00 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d54:	2301      	movs	r3, #1
 8002d56:	e7f3      	b.n	8002d40 <HAL_DMA_Abort_IT+0x50>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	e7f1      	b.n	8002d40 <HAL_DMA_Abort_IT+0x50>
 8002d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d60:	e7ee      	b.n	8002d40 <HAL_DMA_Abort_IT+0x50>
 8002d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d66:	e7eb      	b.n	8002d40 <HAL_DMA_Abort_IT+0x50>
 8002d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d6c:	e7e8      	b.n	8002d40 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	4618      	mov	r0, r3
 8002d70:	e7c6      	b.n	8002d00 <HAL_DMA_Abort_IT+0x10>
 8002d72:	bf00      	nop
 8002d74:	40020008 	.word	0x40020008
 8002d78:	40020000 	.word	0x40020000

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d80:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002d82:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d84:	4f64      	ldr	r7, [pc, #400]	; (8002f18 <HAL_GPIO_Init+0x19c>)
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002d88:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002f20 <HAL_GPIO_Init+0x1a4>
 8002d8c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002f24 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d90:	680d      	ldr	r5, [r1, #0]
 8002d92:	fa35 f406 	lsrs.w	r4, r5, r6
 8002d96:	d102      	bne.n	8002d9e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002d9e:	f04f 0801 	mov.w	r8, #1
 8002da2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002daa:	ea38 0505 	bics.w	r5, r8, r5
 8002dae:	d17b      	bne.n	8002ea8 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002db0:	684d      	ldr	r5, [r1, #4]
 8002db2:	2d03      	cmp	r5, #3
 8002db4:	d807      	bhi.n	8002dc6 <HAL_GPIO_Init+0x4a>
 8002db6:	3d01      	subs	r5, #1
 8002db8:	2d02      	cmp	r5, #2
 8002dba:	f200 8088 	bhi.w	8002ece <HAL_GPIO_Init+0x152>
 8002dbe:	e8df f005 	tbb	[pc, r5]
 8002dc2:	9b96      	.short	0x9b96
 8002dc4:	a1          	.byte	0xa1
 8002dc5:	00          	.byte	0x00
 8002dc6:	2d12      	cmp	r5, #18
 8002dc8:	f000 8099 	beq.w	8002efe <HAL_GPIO_Init+0x182>
 8002dcc:	d86e      	bhi.n	8002eac <HAL_GPIO_Init+0x130>
 8002dce:	2d11      	cmp	r5, #17
 8002dd0:	f000 808f 	beq.w	8002ef2 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd4:	2cff      	cmp	r4, #255	; 0xff
 8002dd6:	bf98      	it	ls
 8002dd8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dda:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dde:	bf88      	it	hi
 8002de0:	f100 0a04 	addhi.w	sl, r0, #4
 8002de4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002de8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dec:	bf88      	it	hi
 8002dee:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df0:	fa09 fb05 	lsl.w	fp, r9, r5
 8002df4:	ea28 080b 	bic.w	r8, r8, fp
 8002df8:	fa02 f505 	lsl.w	r5, r2, r5
 8002dfc:	ea48 0505 	orr.w	r5, r8, r5
 8002e00:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002e08:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002e0c:	d04c      	beq.n	8002ea8 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e0e:	69bd      	ldr	r5, [r7, #24]
 8002e10:	f026 0803 	bic.w	r8, r6, #3
 8002e14:	f045 0501 	orr.w	r5, r5, #1
 8002e18:	61bd      	str	r5, [r7, #24]
 8002e1a:	69bd      	ldr	r5, [r7, #24]
 8002e1c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002e20:	f005 0501 	and.w	r5, r5, #1
 8002e24:	9501      	str	r5, [sp, #4]
 8002e26:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e2a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e2e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002e34:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e38:	fa09 f90b 	lsl.w	r9, r9, fp
 8002e3c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e40:	4d39      	ldr	r5, [pc, #228]	; (8002f28 <HAL_GPIO_Init+0x1ac>)
 8002e42:	42a8      	cmp	r0, r5
 8002e44:	d062      	beq.n	8002f0c <HAL_GPIO_Init+0x190>
 8002e46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e4a:	42a8      	cmp	r0, r5
 8002e4c:	d060      	beq.n	8002f10 <HAL_GPIO_Init+0x194>
 8002e4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e52:	42a8      	cmp	r0, r5
 8002e54:	d05e      	beq.n	8002f14 <HAL_GPIO_Init+0x198>
 8002e56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e5a:	42a8      	cmp	r0, r5
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2503      	moveq	r5, #3
 8002e60:	2504      	movne	r5, #4
 8002e62:	fa05 f50b 	lsl.w	r5, r5, fp
 8002e66:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002e6a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002e6e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e70:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002e74:	bf14      	ite	ne
 8002e76:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e78:	43a5      	biceq	r5, r4
 8002e7a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002e7c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e7e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002e82:	bf14      	ite	ne
 8002e84:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e86:	43a5      	biceq	r5, r4
 8002e88:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e8a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e8c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e90:	bf14      	ite	ne
 8002e92:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e94:	43a5      	biceq	r5, r4
 8002e96:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e98:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e9a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	bf14      	ite	ne
 8002ea0:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea2:	ea25 0404 	biceq.w	r4, r5, r4
 8002ea6:	60dc      	str	r4, [r3, #12]
	position++;
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e771      	b.n	8002d90 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002eac:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002f2c <HAL_GPIO_Init+0x1b0>
 8002eb0:	454d      	cmp	r5, r9
 8002eb2:	d00c      	beq.n	8002ece <HAL_GPIO_Init+0x152>
 8002eb4:	d817      	bhi.n	8002ee6 <HAL_GPIO_Init+0x16a>
 8002eb6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002eba:	454d      	cmp	r5, r9
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x152>
 8002ebe:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002ec2:	454d      	cmp	r5, r9
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x152>
 8002ec6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002eca:	454d      	cmp	r5, r9
 8002ecc:	d182      	bne.n	8002dd4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ece:	688a      	ldr	r2, [r1, #8]
 8002ed0:	b1d2      	cbz	r2, 8002f08 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ed2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002ed4:	bf08      	it	eq
 8002ed6:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eda:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002ede:	bf18      	it	ne
 8002ee0:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002ee4:	e776      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002ee6:	4565      	cmp	r5, ip
 8002ee8:	d0f1      	beq.n	8002ece <HAL_GPIO_Init+0x152>
 8002eea:	4575      	cmp	r5, lr
 8002eec:	e7ee      	b.n	8002ecc <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eee:	68ca      	ldr	r2, [r1, #12]
          break;
 8002ef0:	e770      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ef2:	68ca      	ldr	r2, [r1, #12]
 8002ef4:	3204      	adds	r2, #4
          break;
 8002ef6:	e76d      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ef8:	68ca      	ldr	r2, [r1, #12]
 8002efa:	3208      	adds	r2, #8
          break;
 8002efc:	e76a      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002efe:	68ca      	ldr	r2, [r1, #12]
 8002f00:	320c      	adds	r2, #12
          break;
 8002f02:	e767      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002f04:	2200      	movs	r2, #0
 8002f06:	e765      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f08:	2204      	movs	r2, #4
 8002f0a:	e763      	b.n	8002dd4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	e7a8      	b.n	8002e62 <HAL_GPIO_Init+0xe6>
 8002f10:	2501      	movs	r5, #1
 8002f12:	e7a6      	b.n	8002e62 <HAL_GPIO_Init+0xe6>
 8002f14:	2502      	movs	r5, #2
 8002f16:	e7a4      	b.n	8002e62 <HAL_GPIO_Init+0xe6>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010400 	.word	0x40010400
 8002f20:	10310000 	.word	0x10310000
 8002f24:	10320000 	.word	0x10320000
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	10220000 	.word	0x10220000

08002f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f30:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002f32:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f34:	6951      	ldr	r1, [r2, #20]
 8002f36:	4201      	tst	r1, r0
 8002f38:	d002      	beq.n	8002f40 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f3a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f3c:	f7fe fbf4 	bl	8001728 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f40:	bd08      	pop	{r3, pc}
 8002f42:	bf00      	nop
 8002f44:	40010400 	.word	0x40010400

08002f48 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f48:	6801      	ldr	r1, [r0, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	694b      	ldr	r3, [r1, #20]
 8002f4e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002f52:	d010      	beq.n	8002f76 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002f58:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f5a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f62:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f66:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002f72:	2001      	movs	r0, #1
 8002f74:	4770      	bx	lr
  }
  return HAL_OK;
 8002f76:	4618      	mov	r0, r3
}
 8002f78:	4770      	bx	lr

08002f7a <I2C_WaitOnFlagUntilTimeout>:
{
 8002f7a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002f7e:	4606      	mov	r6, r0
 8002f80:	460f      	mov	r7, r1
 8002f82:	4691      	mov	r9, r2
 8002f84:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002f8a:	6833      	ldr	r3, [r6, #0]
 8002f8c:	f1ba 0f01 	cmp.w	sl, #1
 8002f90:	bf0c      	ite	eq
 8002f92:	695c      	ldreq	r4, [r3, #20]
 8002f94:	699c      	ldrne	r4, [r3, #24]
 8002f96:	ea27 0404 	bic.w	r4, r7, r4
 8002f9a:	b2a4      	uxth	r4, r4
 8002f9c:	fab4 f484 	clz	r4, r4
 8002fa0:	0964      	lsrs	r4, r4, #5
 8002fa2:	45a1      	cmp	r9, r4
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	e017      	b.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	1c6a      	adds	r2, r5, #1
 8002fac:	d0ee      	beq.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7ff fbb1 	bl	8002714 <HAL_GetTick>
 8002fb2:	9b08      	ldr	r3, [sp, #32]
 8002fb4:	1ac0      	subs	r0, r0, r3
 8002fb6:	42a8      	cmp	r0, r5
 8002fb8:	d801      	bhi.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x44>
 8002fba:	2d00      	cmp	r5, #0
 8002fbc:	d1e5      	bne.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fbe:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc0:	2220      	movs	r2, #32
        return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc4:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fc6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fca:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fce:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002fd0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	6432      	str	r2, [r6, #64]	; 0x40
}
 8002fda:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	460f      	mov	r7, r1
 8002fe6:	4616      	mov	r6, r2
 8002fe8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fea:	6825      	ldr	r5, [r4, #0]
 8002fec:	6968      	ldr	r0, [r5, #20]
 8002fee:	ea27 0000 	bic.w	r0, r7, r0
 8002ff2:	b280      	uxth	r0, r0
 8002ff4:	b1b8      	cbz	r0, 8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff6:	696b      	ldr	r3, [r5, #20]
 8002ff8:	055a      	lsls	r2, r3, #21
 8002ffa:	d516      	bpl.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003004:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003006:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800300a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	2300      	movs	r3, #0
 800300e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003018:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800301a:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800301e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003022:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800302a:	1c73      	adds	r3, r6, #1
 800302c:	d0de      	beq.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7ff fb71 	bl	8002714 <HAL_GetTick>
 8003032:	eba0 0008 	sub.w	r0, r0, r8
 8003036:	42b0      	cmp	r0, r6
 8003038:	d801      	bhi.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800303a:	2e00      	cmp	r6, #0
 800303c:	d1d5      	bne.n	8002fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003040:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800304e:	f042 0220 	orr.w	r2, r2, #32
 8003052:	e7e4      	b.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003054 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4604      	mov	r4, r0
 8003058:	460d      	mov	r5, r1
 800305a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	075b      	lsls	r3, r3, #29
 8003062:	d501      	bpl.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003064:	2000      	movs	r0, #0
}
 8003066:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ff6d 	bl	8002f48 <I2C_IsAcknowledgeFailed>
 800306e:	b9a8      	cbnz	r0, 800309c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003070:	1c6a      	adds	r2, r5, #1
 8003072:	d0f3      	beq.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003074:	f7ff fb4e 	bl	8002714 <HAL_GetTick>
 8003078:	1b80      	subs	r0, r0, r6
 800307a:	42a8      	cmp	r0, r5
 800307c:	d801      	bhi.n	8003082 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800307e:	2d00      	cmp	r5, #0
 8003080:	d1ec      	bne.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003084:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003090:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003092:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	f042 0220 	orr.w	r2, r2, #32
 800309a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800309c:	2001      	movs	r0, #1
 800309e:	e7e2      	b.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080030a0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4604      	mov	r4, r0
 80030a4:	460d      	mov	r5, r1
 80030a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	d501      	bpl.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80030b0:	2000      	movs	r0, #0
}
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ff47 	bl	8002f48 <I2C_IsAcknowledgeFailed>
 80030ba:	b9a8      	cbnz	r0, 80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	1c6a      	adds	r2, r5, #1
 80030be:	d0f3      	beq.n	80030a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7ff fb28 	bl	8002714 <HAL_GetTick>
 80030c4:	1b80      	subs	r0, r0, r6
 80030c6:	42a8      	cmp	r0, r5
 80030c8:	d801      	bhi.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	d1ec      	bne.n	80030a8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	f042 0220 	orr.w	r2, r2, #32
 80030e6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80030e8:	2001      	movs	r0, #1
 80030ea:	e7e2      	b.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080030ec <HAL_I2C_Init>:
{
 80030ec:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80030ee:	4604      	mov	r4, r0
 80030f0:	b908      	cbnz	r0, 80030f6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80030f2:	2001      	movs	r0, #1
}
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030fe:	b91b      	cbnz	r3, 8003108 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003100:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003104:	f7ff f97e 	bl	8002404 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	2324      	movs	r3, #36	; 0x24
 800310a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f000 fc84 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312c:	4a3f      	ldr	r2, [pc, #252]	; (800322c <HAL_I2C_Init+0x140>)
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	4293      	cmp	r3, r2
 8003132:	bf94      	ite	ls
 8003134:	4a3e      	ldrls	r2, [pc, #248]	; (8003230 <HAL_I2C_Init+0x144>)
 8003136:	4a3f      	ldrhi	r2, [pc, #252]	; (8003234 <HAL_I2C_Init+0x148>)
 8003138:	4290      	cmp	r0, r2
 800313a:	bf8c      	ite	hi
 800313c:	2200      	movhi	r2, #0
 800313e:	2201      	movls	r2, #1
 8003140:	2a00      	cmp	r2, #0
 8003142:	d1d6      	bne.n	80030f2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003144:	4e39      	ldr	r6, [pc, #228]	; (800322c <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003146:	493c      	ldr	r1, [pc, #240]	; (8003238 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003148:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800314a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314e:	bf88      	it	hi
 8003150:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003154:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003156:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800315a:	6855      	ldr	r5, [r2, #4]
 800315c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003160:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003164:	bf82      	ittt	hi
 8003166:	4371      	mulhi	r1, r6
 8003168:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800316c:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003170:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003172:	6a15      	ldr	r5, [r2, #32]
 8003174:	3101      	adds	r1, #1
 8003176:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800317a:	4329      	orrs	r1, r5
 800317c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800317e:	69d1      	ldr	r1, [r2, #28]
 8003180:	4d2a      	ldr	r5, [pc, #168]	; (800322c <HAL_I2C_Init+0x140>)
 8003182:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003186:	42ab      	cmp	r3, r5
 8003188:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800318c:	d832      	bhi.n	80031f4 <HAL_I2C_Init+0x108>
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb0 f0f3 	udiv	r0, r0, r3
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	f640 70fc 	movw	r0, #4092	; 0xffc
 800319a:	4203      	tst	r3, r0
 800319c:	d042      	beq.n	8003224 <HAL_I2C_Init+0x138>
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	430b      	orrs	r3, r1
 80031a4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a6:	6811      	ldr	r1, [r2, #0]
 80031a8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80031ac:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80031b0:	4303      	orrs	r3, r0
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b6:	6891      	ldr	r1, [r2, #8]
 80031b8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80031bc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80031c0:	4303      	orrs	r3, r0
 80031c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031ca:	68d1      	ldr	r1, [r2, #12]
 80031cc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80031d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031d4:	4303      	orrs	r3, r0
 80031d6:	430b      	orrs	r3, r1
 80031d8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80031da:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ec:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80031f2:	e77f      	b.n	80030f4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f4:	68a5      	ldr	r5, [r4, #8]
 80031f6:	b955      	cbnz	r5, 800320e <HAL_I2C_Init+0x122>
 80031f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	b17b      	cbz	r3, 8003228 <HAL_I2C_Init+0x13c>
 8003208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320c:	e7c9      	b.n	80031a2 <HAL_I2C_Init+0xb6>
 800320e:	2519      	movs	r5, #25
 8003210:	436b      	muls	r3, r5
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	b123      	cbz	r3, 8003228 <HAL_I2C_Init+0x13c>
 800321e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003222:	e7be      	b.n	80031a2 <HAL_I2C_Init+0xb6>
 8003224:	2304      	movs	r3, #4
 8003226:	e7bc      	b.n	80031a2 <HAL_I2C_Init+0xb6>
 8003228:	2301      	movs	r3, #1
 800322a:	e7ba      	b.n	80031a2 <HAL_I2C_Init+0xb6>
 800322c:	000186a0 	.word	0x000186a0
 8003230:	001e847f 	.word	0x001e847f
 8003234:	003d08ff 	.word	0x003d08ff
 8003238:	000f4240 	.word	0x000f4240

0800323c <HAL_I2C_Master_Transmit>:
{
 800323c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003240:	4604      	mov	r4, r0
 8003242:	b085      	sub	sp, #20
 8003244:	4698      	mov	r8, r3
 8003246:	460d      	mov	r5, r1
 8003248:	4691      	mov	r9, r2
 800324a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff fa62 	bl	8002714 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003250:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003254:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	2b20      	cmp	r3, #32
 8003258:	d004      	beq.n	8003264 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800325a:	2502      	movs	r5, #2
}
 800325c:	4628      	mov	r0, r5
 800325e:	b005      	add	sp, #20
 8003260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003264:	9000      	str	r0, [sp, #0]
 8003266:	2319      	movs	r3, #25
 8003268:	2201      	movs	r2, #1
 800326a:	4620      	mov	r0, r4
 800326c:	495b      	ldr	r1, [pc, #364]	; (80033dc <HAL_I2C_Master_Transmit+0x1a0>)
 800326e:	f7ff fe84 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 8003272:	2800      	cmp	r0, #0
 8003274:	d1f1      	bne.n	800325a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003276:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d0ed      	beq.n	800325a <HAL_I2C_Master_Transmit+0x1e>
 800327e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003280:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8003282:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003286:	680b      	ldr	r3, [r1, #0]
 8003288:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800328a:	bf5e      	ittt	pl
 800328c:	680b      	ldrpl	r3, [r1, #0]
 800328e:	f043 0301 	orrpl.w	r3, r3, #1
 8003292:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003294:	680b      	ldr	r3, [r1, #0]
 8003296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800329a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800329c:	2321      	movs	r3, #33	; 0x21
 800329e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032a2:	2310      	movs	r3, #16
 80032a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80032ac:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80032b2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80032b6:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_I2C_Master_Transmit+0x1a4>)
 80032ba:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d004      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x90>
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d002      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x90>
 80032c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ca:	d104      	bne.n	80032d6 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032cc:	680b      	ldr	r3, [r1, #0]
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	600b      	str	r3, [r1, #0]
 80032d4:	e002      	b.n	80032dc <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d0f7      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032dc:	2200      	movs	r2, #0
 80032de:	463b      	mov	r3, r7
 80032e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e4:	4620      	mov	r0, r4
 80032e6:	9600      	str	r6, [sp, #0]
 80032e8:	f7ff fe47 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	b138      	cbz	r0, 8003300 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f4:	bf44      	itt	mi
 80032f6:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80032fa:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80032fc:	2501      	movs	r5, #1
 80032fe:	e7ad      	b.n	800325c <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003306:	d121      	bne.n	800334c <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003308:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800330c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800330e:	4633      	mov	r3, r6
 8003310:	463a      	mov	r2, r7
 8003312:	4620      	mov	r0, r4
 8003314:	4933      	ldr	r1, [pc, #204]	; (80033e4 <HAL_I2C_Master_Transmit+0x1a8>)
 8003316:	f7ff fe62 	bl	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331a:	4605      	mov	r5, r0
 800331c:	2800      	cmp	r0, #0
 800331e:	d1ed      	bne.n	80032fc <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	9003      	str	r0, [sp, #12]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	9203      	str	r2, [sp, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	9303      	str	r3, [sp, #12]
 800332c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800332e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003330:	b9f3      	cbnz	r3, 8003370 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003332:	6821      	ldr	r1, [r4, #0]
 8003334:	680a      	ldr	r2, [r1, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800333e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800334a:	e787      	b.n	800325c <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800334c:	11eb      	asrs	r3, r5, #7
 800334e:	f003 0306 	and.w	r3, r3, #6
 8003352:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003356:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003358:	4620      	mov	r0, r4
 800335a:	4633      	mov	r3, r6
 800335c:	463a      	mov	r2, r7
 800335e:	4922      	ldr	r1, [pc, #136]	; (80033e8 <HAL_I2C_Master_Transmit+0x1ac>)
 8003360:	f7ff fe3d 	bl	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003364:	2800      	cmp	r0, #0
 8003366:	d1c9      	bne.n	80032fc <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	b2ed      	uxtb	r5, r5
 800336c:	611d      	str	r5, [r3, #16]
 800336e:	e7ce      	b.n	800330e <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003370:	4632      	mov	r2, r6
 8003372:	4639      	mov	r1, r7
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff fe93 	bl	80030a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800337a:	b140      	cbz	r0, 800338e <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800337e:	2b04      	cmp	r3, #4
 8003380:	d1bc      	bne.n	80032fc <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	6813      	ldr	r3, [r2, #0]
 8003386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e7b6      	b.n	80032fc <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003398:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800339a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800339c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800339e:	3a01      	subs	r2, #1
 80033a0:	b292      	uxth	r2, r2
 80033a2:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80033a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a6:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80033aa:	1e51      	subs	r1, r2, #1
 80033ac:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ae:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80033b2:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Master_Transmit+0x190>
 80033b6:	b149      	cbz	r1, 80033cc <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b8:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80033ba:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80033be:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80033c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033c2:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033ca:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033cc:	4632      	mov	r2, r6
 80033ce:	4639      	mov	r1, r7
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff fe3f 	bl	8003054 <I2C_WaitOnBTFFlagUntilTimeout>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d0a9      	beq.n	800332e <HAL_I2C_Master_Transmit+0xf2>
 80033da:	e7cf      	b.n	800337c <HAL_I2C_Master_Transmit+0x140>
 80033dc:	00100002 	.word	0x00100002
 80033e0:	ffff0000 	.word	0xffff0000
 80033e4:	00010002 	.word	0x00010002
 80033e8:	00010008 	.word	0x00010008

080033ec <HAL_I2C_IsDeviceReady>:
{
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	4604      	mov	r4, r0
 80033f2:	b085      	sub	sp, #20
 80033f4:	461e      	mov	r6, r3
 80033f6:	460f      	mov	r7, r1
 80033f8:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80033fa:	f7ff f98b 	bl	8002714 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003402:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	2b20      	cmp	r3, #32
 8003406:	d003      	beq.n	8003410 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003408:	2002      	movs	r0, #2
}
 800340a:	b005      	add	sp, #20
 800340c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003410:	9000      	str	r0, [sp, #0]
 8003412:	2319      	movs	r3, #25
 8003414:	2201      	movs	r2, #1
 8003416:	4620      	mov	r0, r4
 8003418:	494c      	ldr	r1, [pc, #304]	; (800354c <HAL_I2C_IsDeviceReady+0x160>)
 800341a:	f7ff fdae 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 800341e:	2800      	cmp	r0, #0
 8003420:	d1f2      	bne.n	8003408 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8003422:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d0ee      	beq.n	8003408 <HAL_I2C_IsDeviceReady+0x1c>
 800342a:	2301      	movs	r3, #1
 800342c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003430:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8003432:	f04f 0a01 	mov.w	sl, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003436:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003438:	f8df b110 	ldr.w	fp, [pc, #272]	; 800354c <HAL_I2C_IsDeviceReady+0x160>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800343e:	bf58      	it	pl
 8003440:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8003446:	bf5c      	itt	pl
 8003448:	f042 0201 	orrpl.w	r2, r2, #1
 800344c:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003454:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003456:	2324      	movs	r3, #36	; 0x24
 8003458:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345c:	2300      	movs	r3, #0
 800345e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003460:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003464:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003466:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003468:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346c:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003476:	4633      	mov	r3, r6
 8003478:	2200      	movs	r2, #0
 800347a:	9500      	str	r5, [sp, #0]
 800347c:	f7ff fd7d 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	b138      	cbz	r0, 8003494 <HAL_I2C_IsDeviceReady+0xa8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	05db      	lsls	r3, r3, #23
 8003488:	d502      	bpl.n	8003490 <HAL_I2C_IsDeviceReady+0xa4>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800348a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003490:	2003      	movs	r0, #3
 8003492:	e7ba      	b.n	800340a <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003494:	611f      	str	r7, [r3, #16]
      tickstart = HAL_GetTick();
 8003496:	f7ff f93d 	bl	8002714 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800349a:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      tickstart = HAL_GetTick();
 800349e:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034a6:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034aa:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034ae:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80034b2:	29a0      	cmp	r1, #160	; 0xa0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_IsDeviceReady+0xce>
 80034b6:	4313      	orrs	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_I2C_IsDeviceReady+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	f04f 0820 	mov.w	r8, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034be:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d0:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034d2:	d025      	beq.n	8003520 <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d4:	2200      	movs	r2, #0
 80034d6:	9203      	str	r2, [sp, #12]
 80034d8:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034da:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034dc:	9203      	str	r2, [sp, #12]
 80034de:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e6:	4919      	ldr	r1, [pc, #100]	; (800354c <HAL_I2C_IsDeviceReady+0x160>)
 80034e8:	2319      	movs	r3, #25
 80034ea:	9500      	str	r5, [sp, #0]
 80034ec:	f7ff fd45 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 80034f0:	b188      	cbz	r0, 8003516 <HAL_I2C_IsDeviceReady+0x12a>
    return HAL_ERROR;
 80034f2:	2001      	movs	r0, #1
 80034f4:	e789      	b.n	800340a <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7ff f90d 	bl	8002714 <HAL_GetTick>
 80034fa:	1b40      	subs	r0, r0, r5
 80034fc:	42b0      	cmp	r0, r6
 80034fe:	d800      	bhi.n	8003502 <HAL_I2C_IsDeviceReady+0x116>
 8003500:	b90e      	cbnz	r6, 8003506 <HAL_I2C_IsDeviceReady+0x11a>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003502:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800350a:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800350c:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003510:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8003514:	e7cb      	b.n	80034ae <HAL_I2C_IsDeviceReady+0xc2>
        hi2c->State = HAL_I2C_STATE_READY;
 8003516:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800351a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800351e:	e774      	b.n	800340a <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003524:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	4620      	mov	r0, r4
 800352a:	2319      	movs	r3, #25
 800352c:	2201      	movs	r2, #1
 800352e:	9500      	str	r5, [sp, #0]
 8003530:	f7ff fd23 	bl	8002f7a <I2C_WaitOnFlagUntilTimeout>
 8003534:	2800      	cmp	r0, #0
 8003536:	d1dc      	bne.n	80034f2 <HAL_I2C_IsDeviceReady+0x106>
      I2C_Trials++;
 8003538:	f10a 0a01 	add.w	sl, sl, #1
    while (I2C_Trials < Trials);
 800353c:	45ca      	cmp	sl, r9
 800353e:	d392      	bcc.n	8003466 <HAL_I2C_IsDeviceReady+0x7a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003544:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003548:	e7d3      	b.n	80034f2 <HAL_I2C_IsDeviceReady+0x106>
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002

08003550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	4605      	mov	r5, r0
 8003556:	b338      	cbz	r0, 80035a8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003558:	6803      	ldr	r3, [r0, #0]
 800355a:	07db      	lsls	r3, r3, #31
 800355c:	d410      	bmi.n	8003580 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	682b      	ldr	r3, [r5, #0]
 8003560:	079f      	lsls	r7, r3, #30
 8003562:	d45e      	bmi.n	8003622 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	0719      	lsls	r1, r3, #28
 8003568:	f100 8095 	bmi.w	8003696 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	075a      	lsls	r2, r3, #29
 8003570:	f100 80c1 	bmi.w	80036f6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	69e8      	ldr	r0, [r5, #28]
 8003576:	2800      	cmp	r0, #0
 8003578:	f040 812c 	bne.w	80037d4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800357c:	2000      	movs	r0, #0
 800357e:	e029      	b.n	80035d4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003580:	4c90      	ldr	r4, [pc, #576]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003582:	6863      	ldr	r3, [r4, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d007      	beq.n	800359c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	6863      	ldr	r3, [r4, #4]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b08      	cmp	r3, #8
 8003594:	d10a      	bne.n	80035ac <HAL_RCC_OscConfig+0x5c>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	03de      	lsls	r6, r3, #15
 800359a:	d507      	bpl.n	80035ac <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	039c      	lsls	r4, r3, #14
 80035a0:	d5dd      	bpl.n	800355e <HAL_RCC_OscConfig+0xe>
 80035a2:	686b      	ldr	r3, [r5, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1da      	bne.n	800355e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80035a8:	2001      	movs	r0, #1
 80035aa:	e013      	b.n	80035d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ac:	686b      	ldr	r3, [r5, #4]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b2:	d112      	bne.n	80035da <HAL_RCC_OscConfig+0x8a>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035bc:	f7ff f8aa 	bl	8002714 <HAL_GetTick>
 80035c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	0398      	lsls	r0, r3, #14
 80035c6:	d4ca      	bmi.n	800355e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7ff f8a4 	bl	8002714 <HAL_GetTick>
 80035cc:	1b80      	subs	r0, r0, r6
 80035ce:	2864      	cmp	r0, #100	; 0x64
 80035d0:	d9f7      	bls.n	80035c2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80035d2:	2003      	movs	r0, #3
}
 80035d4:	b002      	add	sp, #8
 80035d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035da:	b99b      	cbnz	r3, 8003604 <HAL_RCC_OscConfig+0xb4>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035ec:	f7ff f892 	bl	8002714 <HAL_GetTick>
 80035f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	0399      	lsls	r1, r3, #14
 80035f6:	d5b2      	bpl.n	800355e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7ff f88c 	bl	8002714 <HAL_GetTick>
 80035fc:	1b80      	subs	r0, r0, r6
 80035fe:	2864      	cmp	r0, #100	; 0x64
 8003600:	d9f7      	bls.n	80035f2 <HAL_RCC_OscConfig+0xa2>
 8003602:	e7e6      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	d103      	bne.n	8003614 <HAL_RCC_OscConfig+0xc4>
 800360c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	e7cf      	b.n	80035b4 <HAL_RCC_OscConfig+0x64>
 8003614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003620:	e7cb      	b.n	80035ba <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003622:	4c68      	ldr	r4, [pc, #416]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	f013 0f0c 	tst.w	r3, #12
 800362a:	d007      	beq.n	800363c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d110      	bne.n	8003658 <HAL_RCC_OscConfig+0x108>
 8003636:	6863      	ldr	r3, [r4, #4]
 8003638:	03da      	lsls	r2, r3, #15
 800363a:	d40d      	bmi.n	8003658 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	079b      	lsls	r3, r3, #30
 8003640:	d502      	bpl.n	8003648 <HAL_RCC_OscConfig+0xf8>
 8003642:	692b      	ldr	r3, [r5, #16]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d1af      	bne.n	80035a8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	696a      	ldr	r2, [r5, #20]
 800364c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003650:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	e785      	b.n	8003564 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003658:	692a      	ldr	r2, [r5, #16]
 800365a:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <HAL_RCC_OscConfig+0x278>)
 800365c:	b16a      	cbz	r2, 800367a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003662:	f7ff f857 	bl	8002714 <HAL_GetTick>
 8003666:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	079f      	lsls	r7, r3, #30
 800366c:	d4ec      	bmi.n	8003648 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7ff f851 	bl	8002714 <HAL_GetTick>
 8003672:	1b80      	subs	r0, r0, r6
 8003674:	2802      	cmp	r0, #2
 8003676:	d9f7      	bls.n	8003668 <HAL_RCC_OscConfig+0x118>
 8003678:	e7ab      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800367a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800367c:	f7ff f84a 	bl	8002714 <HAL_GetTick>
 8003680:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	0798      	lsls	r0, r3, #30
 8003686:	f57f af6d 	bpl.w	8003564 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7ff f843 	bl	8002714 <HAL_GetTick>
 800368e:	1b80      	subs	r0, r0, r6
 8003690:	2802      	cmp	r0, #2
 8003692:	d9f6      	bls.n	8003682 <HAL_RCC_OscConfig+0x132>
 8003694:	e79d      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003696:	69aa      	ldr	r2, [r5, #24]
 8003698:	4e4a      	ldr	r6, [pc, #296]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 800369a:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <HAL_RCC_OscConfig+0x278>)
 800369c:	b1e2      	cbz	r2, 80036d8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800369e:	2201      	movs	r2, #1
 80036a0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036a4:	f7ff f836 	bl	8002714 <HAL_GetTick>
 80036a8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036ac:	079b      	lsls	r3, r3, #30
 80036ae:	d50d      	bpl.n	80036cc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80036b4:	4b45      	ldr	r3, [pc, #276]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036bc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80036be:	bf00      	nop
  }
  while (Delay --);
 80036c0:	9b01      	ldr	r3, [sp, #4]
 80036c2:	1e5a      	subs	r2, r3, #1
 80036c4:	9201      	str	r2, [sp, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f9      	bne.n	80036be <HAL_RCC_OscConfig+0x16e>
 80036ca:	e74f      	b.n	800356c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7ff f822 	bl	8002714 <HAL_GetTick>
 80036d0:	1b00      	subs	r0, r0, r4
 80036d2:	2802      	cmp	r0, #2
 80036d4:	d9e9      	bls.n	80036aa <HAL_RCC_OscConfig+0x15a>
 80036d6:	e77c      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80036d8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036dc:	f7ff f81a 	bl	8002714 <HAL_GetTick>
 80036e0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036e4:	079f      	lsls	r7, r3, #30
 80036e6:	f57f af41 	bpl.w	800356c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ea:	f7ff f813 	bl	8002714 <HAL_GetTick>
 80036ee:	1b00      	subs	r0, r0, r4
 80036f0:	2802      	cmp	r0, #2
 80036f2:	d9f6      	bls.n	80036e2 <HAL_RCC_OscConfig+0x192>
 80036f4:	e76d      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4c33      	ldr	r4, [pc, #204]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80036f8:	69e3      	ldr	r3, [r4, #28]
 80036fa:	00d8      	lsls	r0, r3, #3
 80036fc:	d424      	bmi.n	8003748 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80036fe:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	69e3      	ldr	r3, [r4, #28]
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	61e3      	str	r3, [r4, #28]
 8003708:	69e3      	ldr	r3, [r4, #28]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	4e2f      	ldr	r6, [pc, #188]	; (80037d0 <HAL_RCC_OscConfig+0x280>)
 8003714:	6833      	ldr	r3, [r6, #0]
 8003716:	05d9      	lsls	r1, r3, #23
 8003718:	d518      	bpl.n	800374c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371a:	68eb      	ldr	r3, [r5, #12]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d126      	bne.n	800376e <HAL_RCC_OscConfig+0x21e>
 8003720:	6a23      	ldr	r3, [r4, #32]
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003728:	f7fe fff4 	bl	8002714 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003730:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	6a23      	ldr	r3, [r4, #32]
 8003734:	079b      	lsls	r3, r3, #30
 8003736:	d53f      	bpl.n	80037b8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003738:	2f00      	cmp	r7, #0
 800373a:	f43f af1b 	beq.w	8003574 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	69e3      	ldr	r3, [r4, #28]
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	61e3      	str	r3, [r4, #28]
 8003746:	e715      	b.n	8003574 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003748:	2700      	movs	r7, #0
 800374a:	e7e2      	b.n	8003712 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003752:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003754:	f7fe ffde 	bl	8002714 <HAL_GetTick>
 8003758:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	6833      	ldr	r3, [r6, #0]
 800375c:	05da      	lsls	r2, r3, #23
 800375e:	d4dc      	bmi.n	800371a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003760:	f7fe ffd8 	bl	8002714 <HAL_GetTick>
 8003764:	eba0 0008 	sub.w	r0, r0, r8
 8003768:	2864      	cmp	r0, #100	; 0x64
 800376a:	d9f6      	bls.n	800375a <HAL_RCC_OscConfig+0x20a>
 800376c:	e731      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376e:	b9ab      	cbnz	r3, 800379c <HAL_RCC_OscConfig+0x24c>
 8003770:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	6223      	str	r3, [r4, #32]
 800377c:	6a23      	ldr	r3, [r4, #32]
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003784:	f7fe ffc6 	bl	8002714 <HAL_GetTick>
 8003788:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	6a23      	ldr	r3, [r4, #32]
 800378c:	0798      	lsls	r0, r3, #30
 800378e:	d5d3      	bpl.n	8003738 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fe ffc0 	bl	8002714 <HAL_GetTick>
 8003794:	1b80      	subs	r0, r0, r6
 8003796:	4540      	cmp	r0, r8
 8003798:	d9f7      	bls.n	800378a <HAL_RCC_OscConfig+0x23a>
 800379a:	e71a      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	2b05      	cmp	r3, #5
 800379e:	6a23      	ldr	r3, [r4, #32]
 80037a0:	d103      	bne.n	80037aa <HAL_RCC_OscConfig+0x25a>
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6223      	str	r3, [r4, #32]
 80037a8:	e7ba      	b.n	8003720 <HAL_RCC_OscConfig+0x1d0>
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6223      	str	r3, [r4, #32]
 80037b0:	6a23      	ldr	r3, [r4, #32]
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	e7b6      	b.n	8003726 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe ffac 	bl	8002714 <HAL_GetTick>
 80037bc:	1b80      	subs	r0, r0, r6
 80037be:	4540      	cmp	r0, r8
 80037c0:	d9b7      	bls.n	8003732 <HAL_RCC_OscConfig+0x1e2>
 80037c2:	e706      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	42420000 	.word	0x42420000
 80037cc:	20000024 	.word	0x20000024
 80037d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d4:	4c2a      	ldr	r4, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x330>)
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d03e      	beq.n	800385e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e0:	2200      	movs	r2, #0
 80037e2:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_RCC_OscConfig+0x334>)
 80037e4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80037e6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e8:	d12c      	bne.n	8003844 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80037ea:	f7fe ff93 	bl	8002714 <HAL_GetTick>
 80037ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	0199      	lsls	r1, r3, #6
 80037f4:	d420      	bmi.n	8003838 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037f6:	6a2b      	ldr	r3, [r5, #32]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d105      	bne.n	800380a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	68a9      	ldr	r1, [r5, #8]
 8003802:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003806:	430a      	orrs	r2, r1
 8003808:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800380c:	6862      	ldr	r2, [r4, #4]
 800380e:	430b      	orrs	r3, r1
 8003810:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003814:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003816:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800381a:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_RCC_OscConfig+0x334>)
 800381c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800381e:	f7fe ff79 	bl	8002714 <HAL_GetTick>
 8003822:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	019a      	lsls	r2, r3, #6
 8003828:	f53f aea8 	bmi.w	800357c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe ff72 	bl	8002714 <HAL_GetTick>
 8003830:	1b40      	subs	r0, r0, r5
 8003832:	2802      	cmp	r0, #2
 8003834:	d9f6      	bls.n	8003824 <HAL_RCC_OscConfig+0x2d4>
 8003836:	e6cc      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe ff6c 	bl	8002714 <HAL_GetTick>
 800383c:	1b80      	subs	r0, r0, r6
 800383e:	2802      	cmp	r0, #2
 8003840:	d9d6      	bls.n	80037f0 <HAL_RCC_OscConfig+0x2a0>
 8003842:	e6c6      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003844:	f7fe ff66 	bl	8002714 <HAL_GetTick>
 8003848:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	019b      	lsls	r3, r3, #6
 800384e:	f57f ae95 	bpl.w	800357c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7fe ff5f 	bl	8002714 <HAL_GetTick>
 8003856:	1b40      	subs	r0, r0, r5
 8003858:	2802      	cmp	r0, #2
 800385a:	d9f6      	bls.n	800384a <HAL_RCC_OscConfig+0x2fa>
 800385c:	e6b9      	b.n	80035d2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800385e:	2801      	cmp	r0, #1
 8003860:	f43f aeb8 	beq.w	80035d4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003864:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	6a2a      	ldr	r2, [r5, #32]
 8003868:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800386c:	4291      	cmp	r1, r2
 800386e:	f47f ae9b 	bne.w	80035a8 <HAL_RCC_OscConfig+0x58>
 8003872:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003874:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003878:	4293      	cmp	r3, r2
 800387a:	f43f ae7f 	beq.w	800357c <HAL_RCC_OscConfig+0x2c>
 800387e:	e693      	b.n	80035a8 <HAL_RCC_OscConfig+0x58>
 8003880:	40021000 	.word	0x40021000
 8003884:	42420000 	.word	0x42420000

08003888 <HAL_RCC_GetSysClockFreq>:
{
 8003888:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_RCC_GetSysClockFreq+0x64>)
{
 800388c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800388e:	ac02      	add	r4, sp, #8
 8003890:	f103 0510 	add.w	r5, r3, #16
 8003894:	4622      	mov	r2, r4
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	3308      	adds	r3, #8
 800389c:	c203      	stmia	r2!, {r0, r1}
 800389e:	42ab      	cmp	r3, r5
 80038a0:	4614      	mov	r4, r2
 80038a2:	d1f7      	bne.n	8003894 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038a4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80038a8:	4911      	ldr	r1, [pc, #68]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038aa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80038ae:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038b0:	f003 020c 	and.w	r2, r3, #12
 80038b4:	2a08      	cmp	r2, #8
 80038b6:	d117      	bne.n	80038e8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80038bc:	3218      	adds	r2, #24
 80038be:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038c2:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c6:	d50c      	bpl.n	80038e2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d2:	3318      	adds	r3, #24
 80038d4:	446b      	add	r3, sp
 80038d6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038da:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80038de:	b007      	add	sp, #28
 80038e0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x70>)
 80038e4:	4358      	muls	r0, r3
 80038e6:	e7fa      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80038ea:	e7f8      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x56>
 80038ec:	0800787f 	.word	0x0800787f
 80038f0:	40021000 	.word	0x40021000
 80038f4:	007a1200 	.word	0x007a1200
 80038f8:	003d0900 	.word	0x003d0900

080038fc <HAL_RCC_ClockConfig>:
{
 80038fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003900:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003902:	4604      	mov	r4, r0
 8003904:	b910      	cbnz	r0, 800390c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003906:	2001      	movs	r0, #1
}
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800390c:	4a44      	ldr	r2, [pc, #272]	; (8003a20 <HAL_RCC_ClockConfig+0x124>)
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	428b      	cmp	r3, r1
 8003916:	d328      	bcc.n	800396a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	6821      	ldr	r1, [r4, #0]
 800391a:	078e      	lsls	r6, r1, #30
 800391c:	d430      	bmi.n	8003980 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	07ca      	lsls	r2, r1, #31
 8003920:	d443      	bmi.n	80039aa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003922:	4a3f      	ldr	r2, [pc, #252]	; (8003a20 <HAL_RCC_ClockConfig+0x124>)
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	42ab      	cmp	r3, r5
 800392c:	d865      	bhi.n	80039fa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	4d3c      	ldr	r5, [pc, #240]	; (8003a24 <HAL_RCC_ClockConfig+0x128>)
 8003932:	f012 0f04 	tst.w	r2, #4
 8003936:	d16c      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	0713      	lsls	r3, r2, #28
 800393a:	d506      	bpl.n	800394a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393c:	686b      	ldr	r3, [r5, #4]
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003944:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003948:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394a:	f7ff ff9d 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 800394e:	686b      	ldr	r3, [r5, #4]
 8003950:	4a35      	ldr	r2, [pc, #212]	; (8003a28 <HAL_RCC_ClockConfig+0x12c>)
 8003952:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	40d8      	lsrs	r0, r3
 800395a:	4b34      	ldr	r3, [pc, #208]	; (8003a2c <HAL_RCC_ClockConfig+0x130>)
 800395c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_RCC_ClockConfig+0x134>)
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	f7fe fe95 	bl	8002690 <HAL_InitTick>
  return HAL_OK;
 8003966:	2000      	movs	r0, #0
 8003968:	e7ce      	b.n	8003908 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f023 0307 	bic.w	r3, r3, #7
 8003970:	430b      	orrs	r3, r1
 8003972:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	428b      	cmp	r3, r1
 800397c:	d1c3      	bne.n	8003906 <HAL_RCC_ClockConfig+0xa>
 800397e:	e7cb      	b.n	8003918 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_ClockConfig+0x128>)
 8003982:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003986:	bf1e      	ittt	ne
 8003988:	685a      	ldrne	r2, [r3, #4]
 800398a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800398e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003992:	bf42      	ittt	mi
 8003994:	685a      	ldrmi	r2, [r3, #4]
 8003996:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800399a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68a0      	ldr	r0, [r4, #8]
 80039a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039a4:	4302      	orrs	r2, r0
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	e7b9      	b.n	800391e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	6862      	ldr	r2, [r4, #4]
 80039ac:	4e1d      	ldr	r6, [pc, #116]	; (8003a24 <HAL_RCC_ClockConfig+0x128>)
 80039ae:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b2:	d11a      	bne.n	80039ea <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	d0a5      	beq.n	8003906 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c0:	f023 0303 	bic.w	r3, r3, #3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039c8:	f7fe fea4 	bl	8002714 <HAL_GetTick>
 80039cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	6873      	ldr	r3, [r6, #4]
 80039d0:	6862      	ldr	r2, [r4, #4]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039da:	d0a2      	beq.n	8003922 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe fe9a 	bl	8002714 <HAL_GetTick>
 80039e0:	1bc0      	subs	r0, r0, r7
 80039e2:	4540      	cmp	r0, r8
 80039e4:	d9f3      	bls.n	80039ce <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80039e6:	2003      	movs	r0, #3
 80039e8:	e78e      	b.n	8003908 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	2a02      	cmp	r2, #2
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039f2:	e7e1      	b.n	80039b8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	f013 0f02 	tst.w	r3, #2
 80039f8:	e7de      	b.n	80039b8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	6813      	ldr	r3, [r2, #0]
 80039fc:	f023 0307 	bic.w	r3, r3, #7
 8003a00:	432b      	orrs	r3, r5
 8003a02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	42ab      	cmp	r3, r5
 8003a0c:	f47f af7b 	bne.w	8003906 <HAL_RCC_ClockConfig+0xa>
 8003a10:	e78d      	b.n	800392e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a12:	686b      	ldr	r3, [r5, #4]
 8003a14:	68e1      	ldr	r1, [r4, #12]
 8003a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	606b      	str	r3, [r5, #4]
 8003a1e:	e78b      	b.n	8003938 <HAL_RCC_ClockConfig+0x3c>
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08007867 	.word	0x08007867
 8003a2c:	20000024 	.word	0x20000024
 8003a30:	2000002c 	.word	0x2000002c

08003a34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a42:	6810      	ldr	r0, [r2, #0]
}
 8003a44:	40d8      	lsrs	r0, r3
 8003a46:	4770      	bx	lr
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08007877 	.word	0x08007877
 8003a50:	20000024 	.word	0x20000024

08003a54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	4a03      	ldr	r2, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a62:	6810      	ldr	r0, [r2, #0]
}
 8003a64:	40d8      	lsrs	r0, r3
 8003a66:	4770      	bx	lr
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08007877 	.word	0x08007877
 8003a70:	20000024 	.word	0x20000024

08003a74 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a74:	6803      	ldr	r3, [r0, #0]
{
 8003a76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a7a:	07d9      	lsls	r1, r3, #31
{
 8003a7c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a7e:	d520      	bpl.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4c36      	ldr	r4, [pc, #216]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a82:	69e3      	ldr	r3, [r4, #28]
 8003a84:	00da      	lsls	r2, r3, #3
 8003a86:	d432      	bmi.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003a88:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	69e3      	ldr	r3, [r4, #28]
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61e3      	str	r3, [r4, #28]
 8003a92:	69e3      	ldr	r3, [r4, #28]
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4f30      	ldr	r7, [pc, #192]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	05db      	lsls	r3, r3, #23
 8003aa2:	d526      	bpl.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aa4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003aaa:	d136      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	6a23      	ldr	r3, [r4, #32]
 8003aae:	686a      	ldr	r2, [r5, #4]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab8:	b11e      	cbz	r6, 8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	69e3      	ldr	r3, [r4, #28]
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac2:	6828      	ldr	r0, [r5, #0]
 8003ac4:	0783      	lsls	r3, r0, #30
 8003ac6:	d506      	bpl.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac8:	4924      	ldr	r1, [pc, #144]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aca:	68ab      	ldr	r3, [r5, #8]
 8003acc:	684a      	ldr	r2, [r1, #4]
 8003ace:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad6:	f010 0010 	ands.w	r0, r0, #16
 8003ada:	d01b      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003adc:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ade:	68e9      	ldr	r1, [r5, #12]
 8003ae0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ae2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6053      	str	r3, [r2, #4]
 8003aec:	e012      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8003aee:	2600      	movs	r6, #0
 8003af0:	e7d4      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003afa:	f7fe fe0b 	bl	8002714 <HAL_GetTick>
 8003afe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	05d8      	lsls	r0, r3, #23
 8003b04:	d4ce      	bmi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fe fe05 	bl	8002714 <HAL_GetTick>
 8003b0a:	eba0 0008 	sub.w	r0, r0, r8
 8003b0e:	2864      	cmp	r0, #100	; 0x64
 8003b10:	d9f6      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003b12:	2003      	movs	r0, #3
}
 8003b14:	b002      	add	sp, #8
 8003b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b1a:	686a      	ldr	r2, [r5, #4]
 8003b1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d0c3      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b24:	2001      	movs	r0, #1
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b28:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b2a:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b34:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003b38:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b3a:	07d9      	lsls	r1, r3, #31
 8003b3c:	d5b6      	bpl.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fde9 	bl	8002714 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b46:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	6a23      	ldr	r3, [r4, #32]
 8003b4a:	079a      	lsls	r2, r3, #30
 8003b4c:	d4ae      	bmi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe fde1 	bl	8002714 <HAL_GetTick>
 8003b52:	1bc0      	subs	r0, r0, r7
 8003b54:	4540      	cmp	r0, r8
 8003b56:	d9f7      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b58:	e7db      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
 8003b64:	42420000 	.word	0x42420000

08003b68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b68:	4602      	mov	r2, r0
 8003b6a:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b6c:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 8003b6e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b70:	ad02      	add	r5, sp, #8
 8003b72:	f103 0610 	add.w	r6, r3, #16
 8003b76:	462c      	mov	r4, r5
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	c403      	stmia	r4!, {r0, r1}
 8003b80:	42b3      	cmp	r3, r6
 8003b82:	4625      	mov	r5, r4
 8003b84:	d1f7      	bne.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b86:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b8a:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b8c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8003b90:	d047      	beq.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8003b92:	2a10      	cmp	r2, #16
 8003b94:	d003      	beq.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8003b96:	2a01      	cmp	r2, #1
 8003b98:	d024      	beq.n	8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b9a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8003b9c:	e036      	b.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003ba0:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ba2:	6810      	ldr	r0, [r2, #0]
 8003ba4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003ba8:	d030      	beq.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003baa:	f3c1 4383 	ubfx	r3, r1, #18, #4
 8003bae:	3318      	adds	r3, #24
 8003bb0:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bb2:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bb4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb8:	bf49      	itett	mi
 8003bba:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bbc:	4b21      	ldrpl	r3, [pc, #132]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bbe:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 8003bc2:	3318      	addmi	r3, #24
 8003bc4:	bf41      	itttt	mi
 8003bc6:	446b      	addmi	r3, sp
 8003bc8:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bcc:	4b1e      	ldrmi	r3, [pc, #120]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003bce:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bd2:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bd4:	6853      	ldr	r3, [r2, #4]
 8003bd6:	025b      	lsls	r3, r3, #9
 8003bd8:	d418      	bmi.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003bde:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003be2:	e013      	b.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003be4:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003be8:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003bea:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bec:	4019      	ands	r1, r3
 8003bee:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8003bf2:	d01f      	beq.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d108      	bne.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 8003bfe:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c02:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8003c04:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8003c08:	bf18      	it	ne
 8003c0a:	4618      	movne	r0, r3
}
 8003c0c:	b006      	add	sp, #24
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c14:	d1c1      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8003c16:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8003c18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c1c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003c20:	e7f2      	b.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c22:	f7ff ff17 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	e7d4      	b.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8003c34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c38:	e7e8      	b.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003c3a:	bf00      	nop
 8003c3c:	0800787f 	.word	0x0800787f
 8003c40:	40021000 	.word	0x40021000
 8003c44:	003d0900 	.word	0x003d0900
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c4c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4e:	4604      	mov	r4, r0
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d051      	beq.n	8003cf8 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d14a      	bne.n	8003cf0 <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	6842      	ldr	r2, [r0, #4]
 8003c5c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003c60:	d000      	beq.n	8003c64 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c62:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c68:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003c6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c70:	b923      	cbnz	r3, 8003c7c <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c72:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003c74:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003c78:	f7fe fbf6 	bl	8002468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c7c:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c7e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003c84:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c86:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003c94:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003c98:	4303      	orrs	r3, r0
 8003c9a:	68e0      	ldr	r0, [r4, #12]
 8003c9c:	69a1      	ldr	r1, [r4, #24]
 8003c9e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8003ca2:	4303      	orrs	r3, r0
 8003ca4:	6920      	ldr	r0, [r4, #16]
 8003ca6:	f000 0002 	and.w	r0, r0, #2
 8003caa:	4303      	orrs	r3, r0
 8003cac:	6960      	ldr	r0, [r4, #20]
 8003cae:	f000 0001 	and.w	r0, r0, #1
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003cb8:	4303      	orrs	r3, r0
 8003cba:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cbc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cbe:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003cc2:	4303      	orrs	r3, r0
 8003cc4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cc6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cca:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003cce:	4303      	orrs	r3, r0
 8003cd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cd2:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003cd6:	4303      	orrs	r3, r0
 8003cd8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cda:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cdc:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cde:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8003cee:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cf6:	e7b5      	b.n	8003c64 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	e7f8      	b.n	8003cee <HAL_SPI_Init+0xa2>

08003cfc <HAL_SPI_ErrorCallback>:
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003d02:	6803      	ldr	r3, [r0, #0]
{
 8003d04:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003d06:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003d08:	689a      	ldr	r2, [r3, #8]
{
 8003d0a:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003d0c:	0656      	lsls	r6, r2, #25
 8003d0e:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8003d12:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8003d16:	d408      	bmi.n	8003d2a <HAL_SPI_IRQHandler+0x2a>
 8003d18:	07d6      	lsls	r6, r2, #31
 8003d1a:	d506      	bpl.n	8003d2a <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003d1c:	064e      	lsls	r6, r1, #25
 8003d1e:	d504      	bpl.n	8003d2a <HAL_SPI_IRQHandler+0x2a>
  {
    hspi->RxISR(hspi);
 8003d20:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 8003d22:	b005      	add	sp, #20
 8003d24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003d28:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003d2a:	0796      	lsls	r6, r2, #30
 8003d2c:	d504      	bpl.n	8003d38 <HAL_SPI_IRQHandler+0x38>
 8003d2e:	0608      	lsls	r0, r1, #24
 8003d30:	d502      	bpl.n	8003d38 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8003d32:	4620      	mov	r0, r4
 8003d34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d36:	e7f4      	b.n	8003d22 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003d38:	0956      	lsrs	r6, r2, #5
 8003d3a:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8003d3e:	07d2      	lsls	r2, r2, #31
 8003d40:	d54c      	bpl.n	8003ddc <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d42:	068d      	lsls	r5, r1, #26
 8003d44:	d54a      	bpl.n	8003ddc <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d46:	b177      	cbz	r7, 8003d66 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d48:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	2a03      	cmp	r2, #3
 8003d50:	d03e      	beq.n	8003dd0 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d54:	f042 0204 	orr.w	r2, r2, #4
 8003d58:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d5a:	9001      	str	r0, [sp, #4]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	9201      	str	r2, [sp, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	9201      	str	r2, [sp, #4]
 8003d64:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d66:	07f0      	lsls	r0, r6, #31
 8003d68:	d50c      	bpl.n	8003d84 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d72:	2200      	movs	r2, #0
 8003d74:	9203      	str	r2, [sp, #12]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	9203      	str	r2, [sp, #12]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d84:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003d86:	b34a      	cbz	r2, 8003ddc <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d8e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003d90:	2201      	movs	r2, #1
 8003d92:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d96:	078a      	lsls	r2, r1, #30
 8003d98:	d022      	beq.n	8003de0 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d9a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003d9c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d9e:	f022 0203 	bic.w	r2, r2, #3
 8003da2:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003da4:	b140      	cbz	r0, 8003db8 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_SPI_IRQHandler+0xe8>)
 8003da8:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003daa:	f7fe ffa1 	bl	8002cf0 <HAL_DMA_Abort_IT>
 8003dae:	b118      	cbz	r0, 8003db8 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003db0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db6:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003db8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003dba:	b178      	cbz	r0, 8003ddc <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_SPI_IRQHandler+0xe8>)
 8003dbe:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dc0:	f7fe ff96 	bl	8002cf0 <HAL_DMA_Abort_IT>
 8003dc4:	b150      	cbz	r0, 8003ddc <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dcc:	6563      	str	r3, [r4, #84]	; 0x54
 8003dce:	e005      	b.n	8003ddc <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dd0:	9002      	str	r0, [sp, #8]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	9202      	str	r2, [sp, #8]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	9302      	str	r3, [sp, #8]
 8003dda:	9b02      	ldr	r3, [sp, #8]
}
 8003ddc:	b005      	add	sp, #20
 8003dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8003de0:	4620      	mov	r0, r4
 8003de2:	f7ff ff8b 	bl	8003cfc <HAL_SPI_ErrorCallback>
 8003de6:	e7f9      	b.n	8003ddc <HAL_SPI_IRQHandler+0xdc>
 8003de8:	08003ded 	.word	0x08003ded

08003dec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dec:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8003dee:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003df0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003df2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003df4:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003df6:	f7ff ff81 	bl	8003cfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dfa:	bd08      	pop	{r3, pc}

08003dfc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfc:	6a03      	ldr	r3, [r0, #32]
{
 8003dfe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e0e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e12:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003e16:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003e1a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e1c:	4d0a      	ldr	r5, [pc, #40]	; (8003e48 <TIM_OC1_SetConfig+0x4c>)
 8003e1e:	42a8      	cmp	r0, r5
 8003e20:	d10b      	bne.n	8003e3a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e24:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003e28:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e2e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003e32:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e34:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e38:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e3c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3e:	684a      	ldr	r2, [r1, #4]
 8003e40:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	6203      	str	r3, [r0, #32]
}
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
 8003e46:	bf00      	nop
 8003e48:	40012c00 	.word	0x40012c00

08003e4c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e4c:	6a03      	ldr	r3, [r0, #32]
{
 8003e4e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e5e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e64:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003e66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e6e:	4d0b      	ldr	r5, [pc, #44]	; (8003e9c <TIM_OC3_SetConfig+0x50>)
 8003e70:	42a8      	cmp	r0, r5
 8003e72:	d10d      	bne.n	8003e90 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e74:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e7e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e82:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003e86:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e8c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e92:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e94:	684a      	ldr	r2, [r1, #4]
 8003e96:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e98:	6203      	str	r3, [r0, #32]
}
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	40012c00 	.word	0x40012c00

08003ea0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea0:	6a03      	ldr	r3, [r0, #32]
{
 8003ea2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec4:	4d06      	ldr	r5, [pc, #24]	; (8003ee0 <TIM_OC4_SetConfig+0x40>)
 8003ec6:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec8:	bf02      	ittt	eq
 8003eca:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ecc:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ed8:	684a      	ldr	r2, [r1, #4]
 8003eda:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	6203      	str	r3, [r0, #32]
}
 8003ede:	bd30      	pop	{r4, r5, pc}
 8003ee0:	40012c00 	.word	0x40012c00

08003ee4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d120      	bne.n	8003f2e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ef2:	6803      	ldr	r3, [r0, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <HAL_TIM_Base_Start_IT+0x50>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00a      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x34>
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d007      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x34>
 8003f08:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x34>
 8003f10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	2a06      	cmp	r2, #6
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f2a:	2000      	movs	r0, #0
}
 8003f2c:	4770      	bx	lr
    return HAL_ERROR;
 8003f2e:	2001      	movs	r0, #1
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
 8003f38:	4770      	bx	lr

08003f3a <HAL_TIM_IC_CaptureCallback>:
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIM_PWM_PulseFinishedCallback>:
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_TriggerCallback>:
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f40:	6803      	ldr	r3, [r0, #0]
{
 8003f42:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f44:	691a      	ldr	r2, [r3, #16]
{
 8003f46:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f48:	0791      	lsls	r1, r2, #30
 8003f4a:	d50e      	bpl.n	8003f6a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	0792      	lsls	r2, r2, #30
 8003f50:	d50b      	bpl.n	8003f6a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f52:	f06f 0202 	mvn.w	r2, #2
 8003f56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f58:	2201      	movs	r2, #1
 8003f5a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	079b      	lsls	r3, r3, #30
 8003f60:	d077      	beq.n	8004052 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	f7ff ffea 	bl	8003f3a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	2300      	movs	r3, #0
 8003f68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	0750      	lsls	r0, r2, #29
 8003f70:	d510      	bpl.n	8003f94 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	0751      	lsls	r1, r2, #29
 8003f76:	d50d      	bpl.n	8003f94 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f78:	f06f 0204 	mvn.w	r2, #4
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7e:	2202      	movs	r2, #2
 8003f80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f82:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003f84:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f86:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f8a:	d068      	beq.n	800405e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8c:	f7ff ffd5 	bl	8003f3a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f90:	2300      	movs	r3, #0
 8003f92:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	0712      	lsls	r2, r2, #28
 8003f9a:	d50f      	bpl.n	8003fbc <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	0710      	lsls	r0, r2, #28
 8003fa0:	d50c      	bpl.n	8003fbc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa2:	f06f 0208 	mvn.w	r2, #8
 8003fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fa8:	2204      	movs	r2, #4
 8003faa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fac:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb0:	0799      	lsls	r1, r3, #30
 8003fb2:	d05a      	beq.n	800406a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb4:	f7ff ffc1 	bl	8003f3a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	06d2      	lsls	r2, r2, #27
 8003fc2:	d510      	bpl.n	8003fe6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	06d0      	lsls	r0, r2, #27
 8003fc8:	d50d      	bpl.n	8003fe6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fca:	f06f 0210 	mvn.w	r2, #16
 8003fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003fdc:	d04b      	beq.n	8004076 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	f7ff ffac 	bl	8003f3a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	07d1      	lsls	r1, r2, #31
 8003fec:	d508      	bpl.n	8004000 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	07d2      	lsls	r2, r2, #31
 8003ff2:	d505      	bpl.n	8004000 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ffa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffc:	f7fd fb7c 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	0610      	lsls	r0, r2, #24
 8004006:	d508      	bpl.n	800401a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	0611      	lsls	r1, r2, #24
 800400c:	d505      	bpl.n	800401a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800400e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004012:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004016:	f000 faa2 	bl	800455e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	0652      	lsls	r2, r2, #25
 8004020:	d508      	bpl.n	8004034 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	0650      	lsls	r0, r2, #25
 8004026:	d505      	bpl.n	8004034 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004028:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800402c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800402e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004030:	f7ff ff85 	bl	8003f3e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	0691      	lsls	r1, r2, #26
 800403a:	d522      	bpl.n	8004082 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	0692      	lsls	r2, r2, #26
 8004040:	d51f      	bpl.n	8004082 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004042:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004046:	4620      	mov	r0, r4
}
 8004048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800404e:	f000 ba85 	b.w	800455c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	f7ff ff71 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff ff70 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 800405c:	e783      	b.n	8003f66 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	f7ff ff6b 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004062:	4620      	mov	r0, r4
 8004064:	f7ff ff6a 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8004068:	e792      	b.n	8003f90 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	f7ff ff65 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406e:	4620      	mov	r0, r4
 8004070:	f7ff ff64 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8004074:	e7a0      	b.n	8003fb8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	f7ff ff5f 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407a:	4620      	mov	r0, r4
 800407c:	f7ff ff5e 	bl	8003f3c <HAL_TIM_PWM_PulseFinishedCallback>
 8004080:	e7af      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xa2>
}
 8004082:	bd10      	pop	{r4, pc}

08004084 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004084:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8004086:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004088:	4290      	cmp	r0, r2
 800408a:	d00a      	beq.n	80040a2 <TIM_Base_SetConfig+0x1e>
 800408c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0x1e>
 8004092:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004096:	4290      	cmp	r0, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0x1e>
 800409a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800409e:	4290      	cmp	r0, r2
 80040a0:	d115      	bne.n	80040ce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80040a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040a8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040aa:	4a11      	ldr	r2, [pc, #68]	; (80040f0 <TIM_Base_SetConfig+0x6c>)
 80040ac:	4290      	cmp	r0, r2
 80040ae:	d00a      	beq.n	80040c6 <TIM_Base_SetConfig+0x42>
 80040b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040b4:	d007      	beq.n	80040c6 <TIM_Base_SetConfig+0x42>
 80040b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80040ba:	4290      	cmp	r0, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_Base_SetConfig+0x42>
 80040be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040c2:	4290      	cmp	r0, r2
 80040c4:	d103      	bne.n	80040ce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ce:	694a      	ldr	r2, [r1, #20]
 80040d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80040d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	688b      	ldr	r3, [r1, #8]
 80040da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040dc:	680b      	ldr	r3, [r1, #0]
 80040de:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <TIM_Base_SetConfig+0x6c>)
 80040e2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80040e4:	bf04      	itt	eq
 80040e6:	690b      	ldreq	r3, [r1, #16]
 80040e8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80040ea:	2301      	movs	r3, #1
 80040ec:	6143      	str	r3, [r0, #20]
}
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <HAL_TIM_Base_Init>:
{
 80040f4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80040f6:	4604      	mov	r4, r0
 80040f8:	b330      	cbz	r0, 8004148 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004102:	b91b      	cbnz	r3, 800410c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004104:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004108:	f7fe fa14 	bl	8002534 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800410e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004114:	1d21      	adds	r1, r4, #4
 8004116:	f7ff ffb5 	bl	8004084 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411a:	2301      	movs	r3, #1
  return HAL_OK;
 800411c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004126:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800412a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800412e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800413e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004146:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004148:	2001      	movs	r0, #1
 800414a:	e7fc      	b.n	8004146 <HAL_TIM_Base_Init+0x52>

0800414c <HAL_TIM_PWM_Init>:
{
 800414c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800414e:	4604      	mov	r4, r0
 8004150:	b330      	cbz	r0, 80041a0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004156:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800415a:	b91b      	cbnz	r3, 8004164 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800415c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004160:	f7fe f9c4 	bl	80024ec <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004166:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	1d21      	adds	r1, r4, #4
 800416e:	f7ff ff89 	bl	8004084 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004172:	2301      	movs	r3, #1
  return HAL_OK;
 8004174:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004176:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800417e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004182:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004186:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800418e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004192:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800419a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800419e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041a0:	2001      	movs	r0, #1
 80041a2:	e7fc      	b.n	800419e <HAL_TIM_PWM_Init+0x52>

080041a4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a4:	6a03      	ldr	r3, [r0, #32]
{
 80041a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a8:	f023 0310 	bic.w	r3, r3, #16
 80041ac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80041ae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80041b0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80041b2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041be:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80041c0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c8:	4d0b      	ldr	r5, [pc, #44]	; (80041f8 <TIM_OC2_SetConfig+0x54>)
 80041ca:	42a8      	cmp	r0, r5
 80041cc:	d10d      	bne.n	80041ea <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041dc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80041e0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80041ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80041ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80041ee:	684a      	ldr	r2, [r1, #4]
 80041f0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80041f2:	6203      	str	r3, [r0, #32]
}
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	bf00      	nop
 80041f8:	40012c00 	.word	0x40012c00

080041fc <HAL_TIM_PWM_ConfigChannel>:
{
 80041fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80041fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004202:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004204:	2b01      	cmp	r3, #1
 8004206:	d052      	beq.n	80042ae <HAL_TIM_PWM_ConfigChannel+0xb2>
 8004208:	2301      	movs	r3, #1
  switch (Channel)
 800420a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800420c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004210:	d03c      	beq.n	800428c <HAL_TIM_PWM_ConfigChannel+0x90>
 8004212:	d806      	bhi.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x26>
 8004214:	b1c2      	cbz	r2, 8004248 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8004216:	2a04      	cmp	r2, #4
 8004218:	d027      	beq.n	800426a <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800421a:	2000      	movs	r0, #0
 800421c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004220:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004222:	2a0c      	cmp	r2, #12
 8004224:	d1f9      	bne.n	800421a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004226:	6800      	ldr	r0, [r0, #0]
 8004228:	f7ff fe3a 	bl	8003ea0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004236:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004246:	e030      	b.n	80042aa <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	6800      	ldr	r0, [r0, #0]
 800424a:	f7ff fdd7 	bl	8003dfc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800424e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004250:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	f042 0208 	orr.w	r2, r2, #8
 8004258:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	f022 0204 	bic.w	r2, r2, #4
 8004260:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004266:	619a      	str	r2, [r3, #24]
      break;
 8004268:	e7d7      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	f7ff ff9a 	bl	80041a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004270:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004272:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800428a:	e7ec      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f7ff fddd 	bl	8003e4c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004292:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004294:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	f042 0208 	orr.w	r2, r2, #8
 800429c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	f022 0204 	bic.w	r2, r2, #4
 80042a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042aa:	61da      	str	r2, [r3, #28]
      break;
 80042ac:	e7b5      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 80042ae:	2002      	movs	r0, #2
 80042b0:	e7b6      	b.n	8004220 <HAL_TIM_PWM_ConfigChannel+0x24>

080042b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b2:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b6:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042bc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80042c0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	6082      	str	r2, [r0, #8]
}
 80042c4:	bd10      	pop	{r4, pc}

080042c6 <HAL_TIM_ConfigClockSource>:
{
 80042c6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80042c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80042cc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f04f 0002 	mov.w	r0, #2
 80042d4:	d027      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x60>
 80042d6:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80042de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80042e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80042ec:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80042ee:	680b      	ldr	r3, [r1, #0]
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d04d      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0xca>
 80042f4:	d832      	bhi.n	800435c <HAL_TIM_ConfigClockSource+0x96>
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d062      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0xfa>
 80042fa:	d815      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x62>
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d003      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x42>
 8004300:	d809      	bhi.n	8004316 <HAL_TIM_ConfigClockSource+0x50>
 8004302:	f033 0210 	bics.w	r2, r3, #16
 8004306:	d108      	bne.n	800431a <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8004308:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800430a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430e:	4313      	orrs	r3, r2
 8004310:	f043 0307 	orr.w	r3, r3, #7
 8004314:	e020      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004316:	2b30      	cmp	r3, #48	; 0x30
 8004318:	d0f6      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800431a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800431c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800431e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004322:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004326:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004328:	2b50      	cmp	r3, #80	; 0x50
 800432a:	d1f6      	bne.n	800431a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432c:	684a      	ldr	r2, [r1, #4]
 800432e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004330:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004332:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004334:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004338:	f025 0501 	bic.w	r5, r5, #1
 800433c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004340:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004346:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800434a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800434c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800434e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004354:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004358:	6083      	str	r3, [r0, #8]
}
 800435a:	e7de      	b.n	800431a <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 800435c:	2b70      	cmp	r3, #112	; 0x70
 800435e:	d00c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xb4>
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004364:	d1d9      	bne.n	800431a <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	68cb      	ldr	r3, [r1, #12]
 8004368:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800436c:	f7ff ffa1 	bl	80042b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004370:	6822      	ldr	r2, [r4, #0]
 8004372:	6893      	ldr	r3, [r2, #8]
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	e008      	b.n	800438c <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	68cb      	ldr	r3, [r1, #12]
 800437c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004380:	f7ff ff97 	bl	80042b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438c:	6093      	str	r3, [r2, #8]
      break;
 800438e:	e7c4      	b.n	800431a <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004390:	684d      	ldr	r5, [r1, #4]
 8004392:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	6a01      	ldr	r1, [r0, #32]
 8004396:	f021 0110 	bic.w	r1, r1, #16
 800439a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800439e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ac:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80043b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80043b2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80043b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ba:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80043be:	e7cb      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c0:	684a      	ldr	r2, [r1, #4]
 80043c2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80043c4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043cc:	f025 0501 	bic.w	r5, r5, #1
 80043d0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80043d4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043da:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80043de:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80043e0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80043e2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80043ec:	e7b4      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x92>

080043ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ee:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f0:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043f2:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f4:	f001 011f 	and.w	r1, r1, #31
 80043f8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80043fa:	ea23 0304 	bic.w	r3, r3, r4
 80043fe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004400:	6a03      	ldr	r3, [r0, #32]
 8004402:	408a      	lsls	r2, r1
 8004404:	431a      	orrs	r2, r3
 8004406:	6202      	str	r2, [r0, #32]
}
 8004408:	bd10      	pop	{r4, pc}
	...

0800440c <HAL_TIM_OC_Start>:
{
 800440c:	b510      	push	{r4, lr}
 800440e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004410:	b929      	cbnz	r1, 800441e <HAL_TIM_OC_Start+0x12>
 8004412:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004416:	2b01      	cmp	r3, #1
 8004418:	d021      	beq.n	800445e <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 800441a:	2001      	movs	r0, #1
}
 800441c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	2904      	cmp	r1, #4
 8004420:	d107      	bne.n	8004432 <HAL_TIM_OC_Start+0x26>
 8004422:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004426:	2b01      	cmp	r3, #1
 8004428:	d1f7      	bne.n	800441a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800442a:	2302      	movs	r3, #2
 800442c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004430:	e018      	b.n	8004464 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004432:	2908      	cmp	r1, #8
 8004434:	d107      	bne.n	8004446 <HAL_TIM_OC_Start+0x3a>
 8004436:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800443a:	2b01      	cmp	r3, #1
 800443c:	d1ed      	bne.n	800441a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	2302      	movs	r3, #2
 8004440:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004444:	e00e      	b.n	8004464 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800444a:	2b01      	cmp	r3, #1
 800444c:	d1e5      	bne.n	800441a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	2904      	cmp	r1, #4
 8004450:	d0eb      	beq.n	800442a <HAL_TIM_OC_Start+0x1e>
 8004452:	2908      	cmp	r1, #8
 8004454:	d0f3      	beq.n	800443e <HAL_TIM_OC_Start+0x32>
 8004456:	2302      	movs	r3, #2
 8004458:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800445c:	e002      	b.n	8004464 <HAL_TIM_OC_Start+0x58>
 800445e:	2302      	movs	r3, #2
 8004460:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004464:	2201      	movs	r2, #1
 8004466:	6820      	ldr	r0, [r4, #0]
 8004468:	f7ff ffc1 	bl	80043ee <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_TIM_OC_Start+0x9c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10a      	bne.n	800448a <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8004474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	2a06      	cmp	r2, #6
 8004484:	d10b      	bne.n	800449e <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8004486:	2000      	movs	r0, #0
 8004488:	e7c8      	b.n	800441c <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d0f5      	beq.n	800447c <HAL_TIM_OC_Start+0x70>
 8004490:	4a06      	ldr	r2, [pc, #24]	; (80044ac <HAL_TIM_OC_Start+0xa0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d0f2      	beq.n	800447c <HAL_TIM_OC_Start+0x70>
 8004496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800449a:	4293      	cmp	r3, r2
 800449c:	d0ee      	beq.n	800447c <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e7ee      	b.n	8004486 <HAL_TIM_OC_Start+0x7a>
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400

080044b0 <HAL_TIM_PWM_Start>:
 80044b0:	f7ff bfac 	b.w	800440c <HAL_TIM_OC_Start>

080044b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80044ba:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f04f 0002 	mov.w	r0, #2
 80044c2:	d022      	beq.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80044c6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80044ca:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044cc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ce:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	4c0c      	ldr	r4, [pc, #48]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80044da:	42a3      	cmp	r3, r4
 80044dc:	d00a      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d007      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80044e4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d003      	beq.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80044ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d104      	bne.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044fa:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fc:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fe:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004500:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004502:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004506:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800450a:	bd30      	pop	{r4, r5, pc}
 800450c:	40012c00 	.word	0x40012c00

08004510 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004510:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d01f      	beq.n	8004558 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004518:	68cb      	ldr	r3, [r1, #12]
 800451a:	688a      	ldr	r2, [r1, #8]
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004522:	684a      	ldr	r2, [r1, #4]
 8004524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004528:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800452a:	680a      	ldr	r2, [r1, #0]
 800452c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004530:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004532:	690a      	ldr	r2, [r1, #16]
 8004534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004538:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800453a:	694a      	ldr	r2, [r1, #20]
 800453c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004540:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004542:	69ca      	ldr	r2, [r1, #28]
 8004544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004548:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800454a:	6802      	ldr	r2, [r0, #0]
 800454c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800454e:	2300      	movs	r3, #0
 8004550:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004554:	4618      	mov	r0, r3
 8004556:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004558:	2002      	movs	r0, #2
}
 800455a:	4770      	bx	lr

0800455c <HAL_TIMEx_CommutCallback>:
 800455c:	4770      	bx	lr

0800455e <HAL_TIMEx_BreakCallback>:
 800455e:	4770      	bx	lr

08004560 <tan>:
 8004560:	b530      	push	{r4, r5, lr}
 8004562:	4a12      	ldr	r2, [pc, #72]	; (80045ac <tan+0x4c>)
 8004564:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004568:	4293      	cmp	r3, r2
 800456a:	b087      	sub	sp, #28
 800456c:	dc06      	bgt.n	800457c <tan+0x1c>
 800456e:	2301      	movs	r3, #1
 8004570:	2200      	movs	r2, #0
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	f000 fd5b 	bl	8005030 <__kernel_tan>
 800457a:	e006      	b.n	800458a <tan+0x2a>
 800457c:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <tan+0x50>)
 800457e:	4293      	cmp	r3, r2
 8004580:	dd05      	ble.n	800458e <tan+0x2e>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	f7fb fde7 	bl	8000158 <__aeabi_dsub>
 800458a:	b007      	add	sp, #28
 800458c:	bd30      	pop	{r4, r5, pc}
 800458e:	aa02      	add	r2, sp, #8
 8004590:	f000 f812 	bl	80045b8 <__ieee754_rem_pio2>
 8004594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004598:	0040      	lsls	r0, r0, #1
 800459a:	f000 0002 	and.w	r0, r0, #2
 800459e:	f1c0 0001 	rsb	r0, r0, #1
 80045a2:	9000      	str	r0, [sp, #0]
 80045a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045a8:	e7e5      	b.n	8004576 <tan+0x16>
 80045aa:	bf00      	nop
 80045ac:	3fe921fb 	.word	0x3fe921fb
 80045b0:	7fefffff 	.word	0x7fefffff
 80045b4:	00000000 	.word	0x00000000

080045b8 <__ieee754_rem_pio2>:
 80045b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	4614      	mov	r4, r2
 80045be:	4ac4      	ldr	r2, [pc, #784]	; (80048d0 <__ieee754_rem_pio2+0x318>)
 80045c0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80045c4:	b08d      	sub	sp, #52	; 0x34
 80045c6:	4592      	cmp	sl, r2
 80045c8:	9104      	str	r1, [sp, #16]
 80045ca:	dc07      	bgt.n	80045dc <__ieee754_rem_pio2+0x24>
 80045cc:	2200      	movs	r2, #0
 80045ce:	2300      	movs	r3, #0
 80045d0:	e9c4 0100 	strd	r0, r1, [r4]
 80045d4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80045d8:	2500      	movs	r5, #0
 80045da:	e024      	b.n	8004626 <__ieee754_rem_pio2+0x6e>
 80045dc:	4abd      	ldr	r2, [pc, #756]	; (80048d4 <__ieee754_rem_pio2+0x31c>)
 80045de:	4592      	cmp	sl, r2
 80045e0:	dc72      	bgt.n	80046c8 <__ieee754_rem_pio2+0x110>
 80045e2:	9b04      	ldr	r3, [sp, #16]
 80045e4:	4dbc      	ldr	r5, [pc, #752]	; (80048d8 <__ieee754_rem_pio2+0x320>)
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	a3ab      	add	r3, pc, #684	; (adr r3, 8004898 <__ieee754_rem_pio2+0x2e0>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	dd36      	ble.n	800465e <__ieee754_rem_pio2+0xa6>
 80045f0:	f7fb fdb2 	bl	8000158 <__aeabi_dsub>
 80045f4:	45aa      	cmp	sl, r5
 80045f6:	4606      	mov	r6, r0
 80045f8:	460f      	mov	r7, r1
 80045fa:	d018      	beq.n	800462e <__ieee754_rem_pio2+0x76>
 80045fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x2e8>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fda9 	bl	8000158 <__aeabi_dsub>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4630      	mov	r0, r6
 800460c:	e9c4 2300 	strd	r2, r3, [r4]
 8004610:	4639      	mov	r1, r7
 8004612:	f7fb fda1 	bl	8000158 <__aeabi_dsub>
 8004616:	a3a2      	add	r3, pc, #648	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x2e8>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fb fd9c 	bl	8000158 <__aeabi_dsub>
 8004620:	2501      	movs	r5, #1
 8004622:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004626:	4628      	mov	r0, r5
 8004628:	b00d      	add	sp, #52	; 0x34
 800462a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462e:	a39e      	add	r3, pc, #632	; (adr r3, 80048a8 <__ieee754_rem_pio2+0x2f0>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fb fd90 	bl	8000158 <__aeabi_dsub>
 8004638:	a39d      	add	r3, pc, #628	; (adr r3, 80048b0 <__ieee754_rem_pio2+0x2f8>)
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	4606      	mov	r6, r0
 8004640:	460f      	mov	r7, r1
 8004642:	f7fb fd89 	bl	8000158 <__aeabi_dsub>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4630      	mov	r0, r6
 800464c:	e9c4 2300 	strd	r2, r3, [r4]
 8004650:	4639      	mov	r1, r7
 8004652:	f7fb fd81 	bl	8000158 <__aeabi_dsub>
 8004656:	a396      	add	r3, pc, #600	; (adr r3, 80048b0 <__ieee754_rem_pio2+0x2f8>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	e7de      	b.n	800461c <__ieee754_rem_pio2+0x64>
 800465e:	f7fb fd7d 	bl	800015c <__adddf3>
 8004662:	45aa      	cmp	sl, r5
 8004664:	4606      	mov	r6, r0
 8004666:	460f      	mov	r7, r1
 8004668:	d016      	beq.n	8004698 <__ieee754_rem_pio2+0xe0>
 800466a:	a38d      	add	r3, pc, #564	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x2e8>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f7fb fd74 	bl	800015c <__adddf3>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4630      	mov	r0, r6
 800467a:	e9c4 2300 	strd	r2, r3, [r4]
 800467e:	4639      	mov	r1, r7
 8004680:	f7fb fd6a 	bl	8000158 <__aeabi_dsub>
 8004684:	a386      	add	r3, pc, #536	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x2e8>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f7fb fd67 	bl	800015c <__adddf3>
 800468e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004692:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004696:	e7c6      	b.n	8004626 <__ieee754_rem_pio2+0x6e>
 8004698:	a383      	add	r3, pc, #524	; (adr r3, 80048a8 <__ieee754_rem_pio2+0x2f0>)
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	f7fb fd5d 	bl	800015c <__adddf3>
 80046a2:	a383      	add	r3, pc, #524	; (adr r3, 80048b0 <__ieee754_rem_pio2+0x2f8>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	4606      	mov	r6, r0
 80046aa:	460f      	mov	r7, r1
 80046ac:	f7fb fd56 	bl	800015c <__adddf3>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4630      	mov	r0, r6
 80046b6:	e9c4 2300 	strd	r2, r3, [r4]
 80046ba:	4639      	mov	r1, r7
 80046bc:	f7fb fd4c 	bl	8000158 <__aeabi_dsub>
 80046c0:	a37b      	add	r3, pc, #492	; (adr r3, 80048b0 <__ieee754_rem_pio2+0x2f8>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	e7e0      	b.n	800468a <__ieee754_rem_pio2+0xd2>
 80046c8:	4a84      	ldr	r2, [pc, #528]	; (80048dc <__ieee754_rem_pio2+0x324>)
 80046ca:	4592      	cmp	sl, r2
 80046cc:	f300 80d5 	bgt.w	800487a <__ieee754_rem_pio2+0x2c2>
 80046d0:	f000 feaa 	bl	8005428 <fabs>
 80046d4:	a378      	add	r3, pc, #480	; (adr r3, 80048b8 <__ieee754_rem_pio2+0x300>)
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	4606      	mov	r6, r0
 80046dc:	460f      	mov	r7, r1
 80046de:	f7fb fef3 	bl	80004c8 <__aeabi_dmul>
 80046e2:	2200      	movs	r2, #0
 80046e4:	4b7e      	ldr	r3, [pc, #504]	; (80048e0 <__ieee754_rem_pio2+0x328>)
 80046e6:	f7fb fd39 	bl	800015c <__adddf3>
 80046ea:	f7fc f987 	bl	80009fc <__aeabi_d2iz>
 80046ee:	4605      	mov	r5, r0
 80046f0:	f7fb fe80 	bl	80003f4 <__aeabi_i2d>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046fc:	a366      	add	r3, pc, #408	; (adr r3, 8004898 <__ieee754_rem_pio2+0x2e0>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fee1 	bl	80004c8 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4630      	mov	r0, r6
 800470c:	4639      	mov	r1, r7
 800470e:	f7fb fd23 	bl	8000158 <__aeabi_dsub>
 8004712:	a363      	add	r3, pc, #396	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x2e8>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	4680      	mov	r8, r0
 800471a:	4689      	mov	r9, r1
 800471c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004720:	f7fb fed2 	bl	80004c8 <__aeabi_dmul>
 8004724:	2d1f      	cmp	r5, #31
 8004726:	4606      	mov	r6, r0
 8004728:	460f      	mov	r7, r1
 800472a:	dc0e      	bgt.n	800474a <__ieee754_rem_pio2+0x192>
 800472c:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <__ieee754_rem_pio2+0x32c>)
 800472e:	1e6a      	subs	r2, r5, #1
 8004730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004734:	4553      	cmp	r3, sl
 8004736:	d008      	beq.n	800474a <__ieee754_rem_pio2+0x192>
 8004738:	4632      	mov	r2, r6
 800473a:	463b      	mov	r3, r7
 800473c:	4640      	mov	r0, r8
 800473e:	4649      	mov	r1, r9
 8004740:	f7fb fd0a 	bl	8000158 <__aeabi_dsub>
 8004744:	e9c4 0100 	strd	r0, r1, [r4]
 8004748:	e013      	b.n	8004772 <__ieee754_rem_pio2+0x1ba>
 800474a:	463b      	mov	r3, r7
 800474c:	4632      	mov	r2, r6
 800474e:	4640      	mov	r0, r8
 8004750:	4649      	mov	r1, r9
 8004752:	f7fb fd01 	bl	8000158 <__aeabi_dsub>
 8004756:	ea4f 532a 	mov.w	r3, sl, asr #20
 800475a:	9305      	str	r3, [sp, #20]
 800475c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004760:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8004764:	f1ba 0f10 	cmp.w	sl, #16
 8004768:	dc1f      	bgt.n	80047aa <__ieee754_rem_pio2+0x1f2>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	e9c4 2300 	strd	r2, r3, [r4]
 8004772:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8004776:	4640      	mov	r0, r8
 8004778:	4653      	mov	r3, sl
 800477a:	4649      	mov	r1, r9
 800477c:	f7fb fcec 	bl	8000158 <__aeabi_dsub>
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	f7fb fce8 	bl	8000158 <__aeabi_dsub>
 8004788:	460b      	mov	r3, r1
 800478a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800478e:	9904      	ldr	r1, [sp, #16]
 8004790:	4602      	mov	r2, r0
 8004792:	2900      	cmp	r1, #0
 8004794:	f6bf af47 	bge.w	8004626 <__ieee754_rem_pio2+0x6e>
 8004798:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800479c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80047a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047a4:	60e3      	str	r3, [r4, #12]
 80047a6:	426d      	negs	r5, r5
 80047a8:	e73d      	b.n	8004626 <__ieee754_rem_pio2+0x6e>
 80047aa:	a33f      	add	r3, pc, #252	; (adr r3, 80048a8 <__ieee754_rem_pio2+0x2f0>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b4:	f7fb fe88 	bl	80004c8 <__aeabi_dmul>
 80047b8:	4606      	mov	r6, r0
 80047ba:	460f      	mov	r7, r1
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4640      	mov	r0, r8
 80047c2:	4649      	mov	r1, r9
 80047c4:	f7fb fcc8 	bl	8000158 <__aeabi_dsub>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4682      	mov	sl, r0
 80047ce:	468b      	mov	fp, r1
 80047d0:	4640      	mov	r0, r8
 80047d2:	4649      	mov	r1, r9
 80047d4:	f7fb fcc0 	bl	8000158 <__aeabi_dsub>
 80047d8:	4632      	mov	r2, r6
 80047da:	463b      	mov	r3, r7
 80047dc:	f7fb fcbc 	bl	8000158 <__aeabi_dsub>
 80047e0:	a333      	add	r3, pc, #204	; (adr r3, 80048b0 <__ieee754_rem_pio2+0x2f8>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	4606      	mov	r6, r0
 80047e8:	460f      	mov	r7, r1
 80047ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ee:	f7fb fe6b 	bl	80004c8 <__aeabi_dmul>
 80047f2:	4632      	mov	r2, r6
 80047f4:	463b      	mov	r3, r7
 80047f6:	f7fb fcaf 	bl	8000158 <__aeabi_dsub>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4606      	mov	r6, r0
 8004800:	460f      	mov	r7, r1
 8004802:	4650      	mov	r0, sl
 8004804:	4659      	mov	r1, fp
 8004806:	f7fb fca7 	bl	8000158 <__aeabi_dsub>
 800480a:	9a05      	ldr	r2, [sp, #20]
 800480c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b31      	cmp	r3, #49	; 0x31
 8004814:	dc06      	bgt.n	8004824 <__ieee754_rem_pio2+0x26c>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	46d0      	mov	r8, sl
 800481c:	46d9      	mov	r9, fp
 800481e:	e9c4 2300 	strd	r2, r3, [r4]
 8004822:	e7a6      	b.n	8004772 <__ieee754_rem_pio2+0x1ba>
 8004824:	a326      	add	r3, pc, #152	; (adr r3, 80048c0 <__ieee754_rem_pio2+0x308>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800482e:	f7fb fe4b 	bl	80004c8 <__aeabi_dmul>
 8004832:	4606      	mov	r6, r0
 8004834:	460f      	mov	r7, r1
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4650      	mov	r0, sl
 800483c:	4659      	mov	r1, fp
 800483e:	f7fb fc8b 	bl	8000158 <__aeabi_dsub>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4680      	mov	r8, r0
 8004848:	4689      	mov	r9, r1
 800484a:	4650      	mov	r0, sl
 800484c:	4659      	mov	r1, fp
 800484e:	f7fb fc83 	bl	8000158 <__aeabi_dsub>
 8004852:	4632      	mov	r2, r6
 8004854:	463b      	mov	r3, r7
 8004856:	f7fb fc7f 	bl	8000158 <__aeabi_dsub>
 800485a:	a31b      	add	r3, pc, #108	; (adr r3, 80048c8 <__ieee754_rem_pio2+0x310>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	4606      	mov	r6, r0
 8004862:	460f      	mov	r7, r1
 8004864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004868:	f7fb fe2e 	bl	80004c8 <__aeabi_dmul>
 800486c:	4632      	mov	r2, r6
 800486e:	463b      	mov	r3, r7
 8004870:	f7fb fc72 	bl	8000158 <__aeabi_dsub>
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
 8004878:	e75e      	b.n	8004738 <__ieee754_rem_pio2+0x180>
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <__ieee754_rem_pio2+0x330>)
 800487c:	4592      	cmp	sl, r2
 800487e:	dd35      	ble.n	80048ec <__ieee754_rem_pio2+0x334>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	f7fb fc68 	bl	8000158 <__aeabi_dsub>
 8004888:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800488c:	e9c4 0100 	strd	r0, r1, [r4]
 8004890:	e6a2      	b.n	80045d8 <__ieee754_rem_pio2+0x20>
 8004892:	bf00      	nop
 8004894:	f3af 8000 	nop.w
 8004898:	54400000 	.word	0x54400000
 800489c:	3ff921fb 	.word	0x3ff921fb
 80048a0:	1a626331 	.word	0x1a626331
 80048a4:	3dd0b461 	.word	0x3dd0b461
 80048a8:	1a600000 	.word	0x1a600000
 80048ac:	3dd0b461 	.word	0x3dd0b461
 80048b0:	2e037073 	.word	0x2e037073
 80048b4:	3ba3198a 	.word	0x3ba3198a
 80048b8:	6dc9c883 	.word	0x6dc9c883
 80048bc:	3fe45f30 	.word	0x3fe45f30
 80048c0:	2e000000 	.word	0x2e000000
 80048c4:	3ba3198a 	.word	0x3ba3198a
 80048c8:	252049c1 	.word	0x252049c1
 80048cc:	397b839a 	.word	0x397b839a
 80048d0:	3fe921fb 	.word	0x3fe921fb
 80048d4:	4002d97b 	.word	0x4002d97b
 80048d8:	3ff921fb 	.word	0x3ff921fb
 80048dc:	413921fb 	.word	0x413921fb
 80048e0:	3fe00000 	.word	0x3fe00000
 80048e4:	08007890 	.word	0x08007890
 80048e8:	7fefffff 	.word	0x7fefffff
 80048ec:	ea4f 552a 	mov.w	r5, sl, asr #20
 80048f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80048f4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80048f8:	460f      	mov	r7, r1
 80048fa:	4606      	mov	r6, r0
 80048fc:	f7fc f87e 	bl	80009fc <__aeabi_d2iz>
 8004900:	f7fb fd78 	bl	80003f4 <__aeabi_i2d>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4630      	mov	r0, r6
 800490a:	4639      	mov	r1, r7
 800490c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004910:	f7fb fc22 	bl	8000158 <__aeabi_dsub>
 8004914:	2200      	movs	r2, #0
 8004916:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <__ieee754_rem_pio2+0x3e8>)
 8004918:	f7fb fdd6 	bl	80004c8 <__aeabi_dmul>
 800491c:	460f      	mov	r7, r1
 800491e:	4606      	mov	r6, r0
 8004920:	f7fc f86c 	bl	80009fc <__aeabi_d2iz>
 8004924:	f7fb fd66 	bl	80003f4 <__aeabi_i2d>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4630      	mov	r0, r6
 800492e:	4639      	mov	r1, r7
 8004930:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004934:	f7fb fc10 	bl	8000158 <__aeabi_dsub>
 8004938:	2200      	movs	r2, #0
 800493a:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <__ieee754_rem_pio2+0x3e8>)
 800493c:	f7fb fdc4 	bl	80004c8 <__aeabi_dmul>
 8004940:	f04f 0803 	mov.w	r8, #3
 8004944:	2600      	movs	r6, #0
 8004946:	2700      	movs	r7, #0
 8004948:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800494c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004950:	4632      	mov	r2, r6
 8004952:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8004956:	463b      	mov	r3, r7
 8004958:	46c2      	mov	sl, r8
 800495a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800495e:	f7fc f81b 	bl	8000998 <__aeabi_dcmpeq>
 8004962:	2800      	cmp	r0, #0
 8004964:	d1f4      	bne.n	8004950 <__ieee754_rem_pio2+0x398>
 8004966:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <__ieee754_rem_pio2+0x3ec>)
 8004968:	462a      	mov	r2, r5
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	2302      	movs	r3, #2
 800496e:	4621      	mov	r1, r4
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	a806      	add	r0, sp, #24
 8004974:	4653      	mov	r3, sl
 8004976:	f000 f817 	bl	80049a8 <__kernel_rem_pio2>
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	4605      	mov	r5, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f6bf ae51 	bge.w	8004626 <__ieee754_rem_pio2+0x6e>
 8004984:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800498c:	e9c4 2300 	strd	r2, r3, [r4]
 8004990:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004998:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800499c:	e703      	b.n	80047a6 <__ieee754_rem_pio2+0x1ee>
 800499e:	bf00      	nop
 80049a0:	41700000 	.word	0x41700000
 80049a4:	08007910 	.word	0x08007910

080049a8 <__kernel_rem_pio2>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80049b0:	9308      	str	r3, [sp, #32]
 80049b2:	9106      	str	r1, [sp, #24]
 80049b4:	4bb6      	ldr	r3, [pc, #728]	; (8004c90 <__kernel_rem_pio2+0x2e8>)
 80049b6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80049b8:	f112 0f14 	cmn.w	r2, #20
 80049bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049c0:	bfa8      	it	ge
 80049c2:	1ed4      	subge	r4, r2, #3
 80049c4:	9302      	str	r3, [sp, #8]
 80049c6:	9b08      	ldr	r3, [sp, #32]
 80049c8:	bfb8      	it	lt
 80049ca:	2400      	movlt	r4, #0
 80049cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80049d0:	9307      	str	r3, [sp, #28]
 80049d2:	bfa4      	itt	ge
 80049d4:	2318      	movge	r3, #24
 80049d6:	fb94 f4f3 	sdivge	r4, r4, r3
 80049da:	f06f 0317 	mvn.w	r3, #23
 80049de:	fb04 3303 	mla	r3, r4, r3, r3
 80049e2:	eb03 0b02 	add.w	fp, r3, r2
 80049e6:	9a07      	ldr	r2, [sp, #28]
 80049e8:	9b02      	ldr	r3, [sp, #8]
 80049ea:	1aa7      	subs	r7, r4, r2
 80049ec:	eb03 0802 	add.w	r8, r3, r2
 80049f0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80049f2:	2500      	movs	r5, #0
 80049f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80049f8:	2200      	movs	r2, #0
 80049fa:	2300      	movs	r3, #0
 80049fc:	9009      	str	r0, [sp, #36]	; 0x24
 80049fe:	ae20      	add	r6, sp, #128	; 0x80
 8004a00:	4545      	cmp	r5, r8
 8004a02:	dd14      	ble.n	8004a2e <__kernel_rem_pio2+0x86>
 8004a04:	f04f 0800 	mov.w	r8, #0
 8004a08:	9a08      	ldr	r2, [sp, #32]
 8004a0a:	ab20      	add	r3, sp, #128	; 0x80
 8004a0c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8004a10:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8004a14:	9b02      	ldr	r3, [sp, #8]
 8004a16:	4598      	cmp	r8, r3
 8004a18:	dc35      	bgt.n	8004a86 <__kernel_rem_pio2+0xde>
 8004a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f1a3 0908 	sub.w	r9, r3, #8
 8004a22:	2300      	movs	r3, #0
 8004a24:	462f      	mov	r7, r5
 8004a26:	2600      	movs	r6, #0
 8004a28:	e9cd 2300 	strd	r2, r3, [sp]
 8004a2c:	e01f      	b.n	8004a6e <__kernel_rem_pio2+0xc6>
 8004a2e:	42ef      	cmn	r7, r5
 8004a30:	d40b      	bmi.n	8004a4a <__kernel_rem_pio2+0xa2>
 8004a32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004a36:	e9cd 2300 	strd	r2, r3, [sp]
 8004a3a:	f7fb fcdb 	bl	80003f4 <__aeabi_i2d>
 8004a3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004a46:	3501      	adds	r5, #1
 8004a48:	e7da      	b.n	8004a00 <__kernel_rem_pio2+0x58>
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	e7f8      	b.n	8004a42 <__kernel_rem_pio2+0x9a>
 8004a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a54:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004a58:	f7fb fd36 	bl	80004c8 <__aeabi_dmul>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a64:	f7fb fb7a 	bl	800015c <__adddf3>
 8004a68:	e9cd 0100 	strd	r0, r1, [sp]
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	9b07      	ldr	r3, [sp, #28]
 8004a70:	3f08      	subs	r7, #8
 8004a72:	429e      	cmp	r6, r3
 8004a74:	ddec      	ble.n	8004a50 <__kernel_rem_pio2+0xa8>
 8004a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a7a:	f108 0801 	add.w	r8, r8, #1
 8004a7e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004a82:	3508      	adds	r5, #8
 8004a84:	e7c6      	b.n	8004a14 <__kernel_rem_pio2+0x6c>
 8004a86:	9b02      	ldr	r3, [sp, #8]
 8004a88:	aa0c      	add	r2, sp, #48	; 0x30
 8004a8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a90:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004a92:	9e02      	ldr	r6, [sp, #8]
 8004a94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004a98:	930a      	str	r3, [sp, #40]	; 0x28
 8004a9a:	ab98      	add	r3, sp, #608	; 0x260
 8004a9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004aa0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004aa4:	ab70      	add	r3, sp, #448	; 0x1c0
 8004aa6:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004aaa:	46d0      	mov	r8, sl
 8004aac:	46b1      	mov	r9, r6
 8004aae:	af0c      	add	r7, sp, #48	; 0x30
 8004ab0:	9700      	str	r7, [sp, #0]
 8004ab2:	f1b9 0f00 	cmp.w	r9, #0
 8004ab6:	f1a8 0808 	sub.w	r8, r8, #8
 8004aba:	dc71      	bgt.n	8004ba0 <__kernel_rem_pio2+0x1f8>
 8004abc:	465a      	mov	r2, fp
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f000 fd35 	bl	8005530 <scalbn>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004acc:	4604      	mov	r4, r0
 8004ace:	460d      	mov	r5, r1
 8004ad0:	f7fb fcfa 	bl	80004c8 <__aeabi_dmul>
 8004ad4:	f000 fcac 	bl	8005430 <floor>
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4b6e      	ldr	r3, [pc, #440]	; (8004c94 <__kernel_rem_pio2+0x2ec>)
 8004adc:	f7fb fcf4 	bl	80004c8 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb fb36 	bl	8000158 <__aeabi_dsub>
 8004aec:	460d      	mov	r5, r1
 8004aee:	4604      	mov	r4, r0
 8004af0:	f7fb ff84 	bl	80009fc <__aeabi_d2iz>
 8004af4:	9004      	str	r0, [sp, #16]
 8004af6:	f7fb fc7d 	bl	80003f4 <__aeabi_i2d>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb fb29 	bl	8000158 <__aeabi_dsub>
 8004b06:	f1bb 0f00 	cmp.w	fp, #0
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	4689      	mov	r9, r1
 8004b0e:	dd70      	ble.n	8004bf2 <__kernel_rem_pio2+0x24a>
 8004b10:	1e72      	subs	r2, r6, #1
 8004b12:	ab0c      	add	r3, sp, #48	; 0x30
 8004b14:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b18:	9c04      	ldr	r4, [sp, #16]
 8004b1a:	f1cb 0118 	rsb	r1, fp, #24
 8004b1e:	fa40 f301 	asr.w	r3, r0, r1
 8004b22:	441c      	add	r4, r3
 8004b24:	408b      	lsls	r3, r1
 8004b26:	1ac0      	subs	r0, r0, r3
 8004b28:	ab0c      	add	r3, sp, #48	; 0x30
 8004b2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004b2e:	f1cb 0317 	rsb	r3, fp, #23
 8004b32:	9404      	str	r4, [sp, #16]
 8004b34:	fa40 f303 	asr.w	r3, r0, r3
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	9b00      	ldr	r3, [sp, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dd66      	ble.n	8004c0e <__kernel_rem_pio2+0x266>
 8004b40:	2200      	movs	r2, #0
 8004b42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004b46:	4614      	mov	r4, r2
 8004b48:	9b04      	ldr	r3, [sp, #16]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	4296      	cmp	r6, r2
 8004b50:	f300 80ac 	bgt.w	8004cac <__kernel_rem_pio2+0x304>
 8004b54:	f1bb 0f00 	cmp.w	fp, #0
 8004b58:	dd07      	ble.n	8004b6a <__kernel_rem_pio2+0x1c2>
 8004b5a:	f1bb 0f01 	cmp.w	fp, #1
 8004b5e:	f000 80b4 	beq.w	8004cca <__kernel_rem_pio2+0x322>
 8004b62:	f1bb 0f02 	cmp.w	fp, #2
 8004b66:	f000 80ba 	beq.w	8004cde <__kernel_rem_pio2+0x336>
 8004b6a:	9b00      	ldr	r3, [sp, #0]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d14e      	bne.n	8004c0e <__kernel_rem_pio2+0x266>
 8004b70:	4642      	mov	r2, r8
 8004b72:	464b      	mov	r3, r9
 8004b74:	2000      	movs	r0, #0
 8004b76:	4948      	ldr	r1, [pc, #288]	; (8004c98 <__kernel_rem_pio2+0x2f0>)
 8004b78:	f7fb faee 	bl	8000158 <__aeabi_dsub>
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	4689      	mov	r9, r1
 8004b80:	2c00      	cmp	r4, #0
 8004b82:	d044      	beq.n	8004c0e <__kernel_rem_pio2+0x266>
 8004b84:	465a      	mov	r2, fp
 8004b86:	2000      	movs	r0, #0
 8004b88:	4943      	ldr	r1, [pc, #268]	; (8004c98 <__kernel_rem_pio2+0x2f0>)
 8004b8a:	f000 fcd1 	bl	8005530 <scalbn>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4640      	mov	r0, r8
 8004b94:	4649      	mov	r1, r9
 8004b96:	f7fb fadf 	bl	8000158 <__aeabi_dsub>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	4689      	mov	r9, r1
 8004b9e:	e036      	b.n	8004c0e <__kernel_rem_pio2+0x266>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <__kernel_rem_pio2+0x2f4>)
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7fb fc8e 	bl	80004c8 <__aeabi_dmul>
 8004bac:	f7fb ff26 	bl	80009fc <__aeabi_d2iz>
 8004bb0:	f7fb fc20 	bl	80003f4 <__aeabi_i2d>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <__kernel_rem_pio2+0x2f8>)
 8004bc0:	f7fb fc82 	bl	80004c8 <__aeabi_dmul>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f7fb fac4 	bl	8000158 <__aeabi_dsub>
 8004bd0:	f7fb ff14 	bl	80009fc <__aeabi_d2iz>
 8004bd4:	9b00      	ldr	r3, [sp, #0]
 8004bd6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004bda:	f843 0b04 	str.w	r0, [r3], #4
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004be4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004be8:	f7fb fab8 	bl	800015c <__adddf3>
 8004bec:	4604      	mov	r4, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	e75f      	b.n	8004ab2 <__kernel_rem_pio2+0x10a>
 8004bf2:	d105      	bne.n	8004c00 <__kernel_rem_pio2+0x258>
 8004bf4:	1e73      	subs	r3, r6, #1
 8004bf6:	aa0c      	add	r2, sp, #48	; 0x30
 8004bf8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bfc:	15c3      	asrs	r3, r0, #23
 8004bfe:	e79b      	b.n	8004b38 <__kernel_rem_pio2+0x190>
 8004c00:	2200      	movs	r2, #0
 8004c02:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <__kernel_rem_pio2+0x2fc>)
 8004c04:	f7fb fee6 	bl	80009d4 <__aeabi_dcmpge>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d13e      	bne.n	8004c8a <__kernel_rem_pio2+0x2e2>
 8004c0c:	9000      	str	r0, [sp, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2300      	movs	r3, #0
 8004c12:	4640      	mov	r0, r8
 8004c14:	4649      	mov	r1, r9
 8004c16:	f7fb febf 	bl	8000998 <__aeabi_dcmpeq>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	f000 80b1 	beq.w	8004d82 <__kernel_rem_pio2+0x3da>
 8004c20:	1e74      	subs	r4, r6, #1
 8004c22:	4623      	mov	r3, r4
 8004c24:	2200      	movs	r2, #0
 8004c26:	9902      	ldr	r1, [sp, #8]
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	da5f      	bge.n	8004cec <__kernel_rem_pio2+0x344>
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d074      	beq.n	8004d1a <__kernel_rem_pio2+0x372>
 8004c30:	ab0c      	add	r3, sp, #48	; 0x30
 8004c32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004c36:	f1ab 0b18 	sub.w	fp, fp, #24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 809f 	beq.w	8004d7e <__kernel_rem_pio2+0x3d6>
 8004c40:	465a      	mov	r2, fp
 8004c42:	2000      	movs	r0, #0
 8004c44:	4914      	ldr	r1, [pc, #80]	; (8004c98 <__kernel_rem_pio2+0x2f0>)
 8004c46:	f000 fc73 	bl	8005530 <scalbn>
 8004c4a:	46a2      	mov	sl, r4
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	460f      	mov	r7, r1
 8004c50:	f04f 0800 	mov.w	r8, #0
 8004c54:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c56:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004c9c <__kernel_rem_pio2+0x2f4>
 8004c5a:	00e5      	lsls	r5, r4, #3
 8004c5c:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004c60:	f1ba 0f00 	cmp.w	sl, #0
 8004c64:	f280 80c3 	bge.w	8004dee <__kernel_rem_pio2+0x446>
 8004c68:	4626      	mov	r6, r4
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	f2c0 80f5 	blt.w	8004e5a <__kernel_rem_pio2+0x4b2>
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <__kernel_rem_pio2+0x300>)
 8004c72:	f04f 0a00 	mov.w	sl, #0
 8004c76:	9307      	str	r3, [sp, #28]
 8004c78:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c7a:	f04f 0b00 	mov.w	fp, #0
 8004c7e:	f04f 0800 	mov.w	r8, #0
 8004c82:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004c86:	1ba7      	subs	r7, r4, r6
 8004c88:	e0db      	b.n	8004e42 <__kernel_rem_pio2+0x49a>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	e757      	b.n	8004b40 <__kernel_rem_pio2+0x198>
 8004c90:	08007a58 	.word	0x08007a58
 8004c94:	40200000 	.word	0x40200000
 8004c98:	3ff00000 	.word	0x3ff00000
 8004c9c:	3e700000 	.word	0x3e700000
 8004ca0:	41700000 	.word	0x41700000
 8004ca4:	3fe00000 	.word	0x3fe00000
 8004ca8:	08007a18 	.word	0x08007a18
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	b944      	cbnz	r4, 8004cc2 <__kernel_rem_pio2+0x31a>
 8004cb0:	b11b      	cbz	r3, 8004cba <__kernel_rem_pio2+0x312>
 8004cb2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	461c      	mov	r4, r3
 8004cbc:	3201      	adds	r2, #1
 8004cbe:	3704      	adds	r7, #4
 8004cc0:	e745      	b.n	8004b4e <__kernel_rem_pio2+0x1a6>
 8004cc2:	1acb      	subs	r3, r1, r3
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	e7f7      	b.n	8004cba <__kernel_rem_pio2+0x312>
 8004cca:	1e72      	subs	r2, r6, #1
 8004ccc:	ab0c      	add	r3, sp, #48	; 0x30
 8004cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004cd6:	a90c      	add	r1, sp, #48	; 0x30
 8004cd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004cdc:	e745      	b.n	8004b6a <__kernel_rem_pio2+0x1c2>
 8004cde:	1e72      	subs	r2, r6, #1
 8004ce0:	ab0c      	add	r3, sp, #48	; 0x30
 8004ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004cea:	e7f4      	b.n	8004cd6 <__kernel_rem_pio2+0x32e>
 8004cec:	a90c      	add	r1, sp, #48	; 0x30
 8004cee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	e796      	b.n	8004c26 <__kernel_rem_pio2+0x27e>
 8004cf8:	3401      	adds	r4, #1
 8004cfa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	d0fa      	beq.n	8004cf8 <__kernel_rem_pio2+0x350>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	f106 0801 	add.w	r8, r6, #1
 8004d08:	18f5      	adds	r5, r6, r3
 8004d0a:	ab20      	add	r3, sp, #128	; 0x80
 8004d0c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004d10:	4434      	add	r4, r6
 8004d12:	4544      	cmp	r4, r8
 8004d14:	da04      	bge.n	8004d20 <__kernel_rem_pio2+0x378>
 8004d16:	4626      	mov	r6, r4
 8004d18:	e6bf      	b.n	8004a9a <__kernel_rem_pio2+0xf2>
 8004d1a:	2401      	movs	r4, #1
 8004d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d1e:	e7ec      	b.n	8004cfa <__kernel_rem_pio2+0x352>
 8004d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d22:	f04f 0900 	mov.w	r9, #0
 8004d26:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004d2a:	f7fb fb63 	bl	80003f4 <__aeabi_i2d>
 8004d2e:	2600      	movs	r6, #0
 8004d30:	2700      	movs	r7, #0
 8004d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d34:	e9c5 0100 	strd	r0, r1, [r5]
 8004d38:	3b08      	subs	r3, #8
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	9504      	str	r5, [sp, #16]
 8004d3e:	9b07      	ldr	r3, [sp, #28]
 8004d40:	4599      	cmp	r9, r3
 8004d42:	dd05      	ble.n	8004d50 <__kernel_rem_pio2+0x3a8>
 8004d44:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004d48:	f108 0801 	add.w	r8, r8, #1
 8004d4c:	3508      	adds	r5, #8
 8004d4e:	e7e0      	b.n	8004d12 <__kernel_rem_pio2+0x36a>
 8004d50:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004d54:	9900      	ldr	r1, [sp, #0]
 8004d56:	f109 0901 	add.w	r9, r9, #1
 8004d5a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004d5e:	9100      	str	r1, [sp, #0]
 8004d60:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004d64:	f8cd c010 	str.w	ip, [sp, #16]
 8004d68:	f7fb fbae 	bl	80004c8 <__aeabi_dmul>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb f9f2 	bl	800015c <__adddf3>
 8004d78:	4606      	mov	r6, r0
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	e7df      	b.n	8004d3e <__kernel_rem_pio2+0x396>
 8004d7e:	3c01      	subs	r4, #1
 8004d80:	e756      	b.n	8004c30 <__kernel_rem_pio2+0x288>
 8004d82:	f1cb 0200 	rsb	r2, fp, #0
 8004d86:	4640      	mov	r0, r8
 8004d88:	4649      	mov	r1, r9
 8004d8a:	f000 fbd1 	bl	8005530 <scalbn>
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4ba4      	ldr	r3, [pc, #656]	; (8005024 <__kernel_rem_pio2+0x67c>)
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	f7fb fe1d 	bl	80009d4 <__aeabi_dcmpge>
 8004d9a:	b1f8      	cbz	r0, 8004ddc <__kernel_rem_pio2+0x434>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4ba2      	ldr	r3, [pc, #648]	; (8005028 <__kernel_rem_pio2+0x680>)
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7fb fb90 	bl	80004c8 <__aeabi_dmul>
 8004da8:	f7fb fe28 	bl	80009fc <__aeabi_d2iz>
 8004dac:	4607      	mov	r7, r0
 8004dae:	f7fb fb21 	bl	80003f4 <__aeabi_i2d>
 8004db2:	2200      	movs	r2, #0
 8004db4:	4b9b      	ldr	r3, [pc, #620]	; (8005024 <__kernel_rem_pio2+0x67c>)
 8004db6:	f7fb fb87 	bl	80004c8 <__aeabi_dmul>
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7fb f9c9 	bl	8000158 <__aeabi_dsub>
 8004dc6:	f7fb fe19 	bl	80009fc <__aeabi_d2iz>
 8004dca:	1c74      	adds	r4, r6, #1
 8004dcc:	ab0c      	add	r3, sp, #48	; 0x30
 8004dce:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004dd2:	f10b 0b18 	add.w	fp, fp, #24
 8004dd6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004dda:	e731      	b.n	8004c40 <__kernel_rem_pio2+0x298>
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb fe0c 	bl	80009fc <__aeabi_d2iz>
 8004de4:	ab0c      	add	r3, sp, #48	; 0x30
 8004de6:	4634      	mov	r4, r6
 8004de8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004dec:	e728      	b.n	8004c40 <__kernel_rem_pio2+0x298>
 8004dee:	ab0c      	add	r3, sp, #48	; 0x30
 8004df0:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004df4:	f7fb fafe 	bl	80003f4 <__aeabi_i2d>
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	f7fb fb64 	bl	80004c8 <__aeabi_dmul>
 8004e00:	4642      	mov	r2, r8
 8004e02:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004e06:	464b      	mov	r3, r9
 8004e08:	4630      	mov	r0, r6
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fb5c 	bl	80004c8 <__aeabi_dmul>
 8004e10:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	e722      	b.n	8004c60 <__kernel_rem_pio2+0x2b8>
 8004e1a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004e1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004e22:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004e26:	f8cd c01c 	str.w	ip, [sp, #28]
 8004e2a:	f7fb fb4d 	bl	80004c8 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4650      	mov	r0, sl
 8004e34:	4659      	mov	r1, fp
 8004e36:	f7fb f991 	bl	800015c <__adddf3>
 8004e3a:	4682      	mov	sl, r0
 8004e3c:	468b      	mov	fp, r1
 8004e3e:	f108 0801 	add.w	r8, r8, #1
 8004e42:	9b02      	ldr	r3, [sp, #8]
 8004e44:	4598      	cmp	r8, r3
 8004e46:	dc01      	bgt.n	8004e4c <__kernel_rem_pio2+0x4a4>
 8004e48:	45b8      	cmp	r8, r7
 8004e4a:	dde6      	ble.n	8004e1a <__kernel_rem_pio2+0x472>
 8004e4c:	ab48      	add	r3, sp, #288	; 0x120
 8004e4e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e52:	e9c7 ab00 	strd	sl, fp, [r7]
 8004e56:	3e01      	subs	r6, #1
 8004e58:	e707      	b.n	8004c6a <__kernel_rem_pio2+0x2c2>
 8004e5a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	dc09      	bgt.n	8004e74 <__kernel_rem_pio2+0x4cc>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	dc32      	bgt.n	8004eca <__kernel_rem_pio2+0x522>
 8004e64:	d05a      	beq.n	8004f1c <__kernel_rem_pio2+0x574>
 8004e66:	9b04      	ldr	r3, [sp, #16]
 8004e68:	f003 0007 	and.w	r0, r3, #7
 8004e6c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e74:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d1f5      	bne.n	8004e66 <__kernel_rem_pio2+0x4be>
 8004e7a:	ab48      	add	r3, sp, #288	; 0x120
 8004e7c:	441d      	add	r5, r3
 8004e7e:	46aa      	mov	sl, r5
 8004e80:	46a3      	mov	fp, r4
 8004e82:	f1bb 0f00 	cmp.w	fp, #0
 8004e86:	dc76      	bgt.n	8004f76 <__kernel_rem_pio2+0x5ce>
 8004e88:	46aa      	mov	sl, r5
 8004e8a:	46a3      	mov	fp, r4
 8004e8c:	f1bb 0f01 	cmp.w	fp, #1
 8004e90:	f300 8090 	bgt.w	8004fb4 <__kernel_rem_pio2+0x60c>
 8004e94:	2700      	movs	r7, #0
 8004e96:	463e      	mov	r6, r7
 8004e98:	2c01      	cmp	r4, #1
 8004e9a:	f300 80aa 	bgt.w	8004ff2 <__kernel_rem_pio2+0x64a>
 8004e9e:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004ea2:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004ea6:	9b00      	ldr	r3, [sp, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 80ac 	bne.w	8005006 <__kernel_rem_pio2+0x65e>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	9806      	ldr	r0, [sp, #24]
 8004eb4:	e9c0 2300 	strd	r2, r3, [r0]
 8004eb8:	4622      	mov	r2, r4
 8004eba:	460b      	mov	r3, r1
 8004ebc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004ec0:	463a      	mov	r2, r7
 8004ec2:	4633      	mov	r3, r6
 8004ec4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004ec8:	e7cd      	b.n	8004e66 <__kernel_rem_pio2+0x4be>
 8004eca:	2000      	movs	r0, #0
 8004ecc:	46a0      	mov	r8, r4
 8004ece:	4601      	mov	r1, r0
 8004ed0:	ab48      	add	r3, sp, #288	; 0x120
 8004ed2:	441d      	add	r5, r3
 8004ed4:	f1b8 0f00 	cmp.w	r8, #0
 8004ed8:	da3a      	bge.n	8004f50 <__kernel_rem_pio2+0x5a8>
 8004eda:	9b00      	ldr	r3, [sp, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03e      	beq.n	8004f5e <__kernel_rem_pio2+0x5b6>
 8004ee0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	9d06      	ldr	r5, [sp, #24]
 8004eea:	2601      	movs	r6, #1
 8004eec:	e9c5 2300 	strd	r2, r3, [r5]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004ef6:	f7fb f92f 	bl	8000158 <__aeabi_dsub>
 8004efa:	4684      	mov	ip, r0
 8004efc:	460f      	mov	r7, r1
 8004efe:	ad48      	add	r5, sp, #288	; 0x120
 8004f00:	42b4      	cmp	r4, r6
 8004f02:	f105 0508 	add.w	r5, r5, #8
 8004f06:	da2c      	bge.n	8004f62 <__kernel_rem_pio2+0x5ba>
 8004f08:	9b00      	ldr	r3, [sp, #0]
 8004f0a:	b10b      	cbz	r3, 8004f10 <__kernel_rem_pio2+0x568>
 8004f0c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004f10:	4662      	mov	r2, ip
 8004f12:	463b      	mov	r3, r7
 8004f14:	9906      	ldr	r1, [sp, #24]
 8004f16:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004f1a:	e7a4      	b.n	8004e66 <__kernel_rem_pio2+0x4be>
 8004f1c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004f1e:	ab48      	add	r3, sp, #288	; 0x120
 8004f20:	4637      	mov	r7, r6
 8004f22:	441d      	add	r5, r3
 8004f24:	2c00      	cmp	r4, #0
 8004f26:	da09      	bge.n	8004f3c <__kernel_rem_pio2+0x594>
 8004f28:	9b00      	ldr	r3, [sp, #0]
 8004f2a:	b10b      	cbz	r3, 8004f30 <__kernel_rem_pio2+0x588>
 8004f2c:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004f30:	4632      	mov	r2, r6
 8004f32:	463b      	mov	r3, r7
 8004f34:	9906      	ldr	r1, [sp, #24]
 8004f36:	e9c1 2300 	strd	r2, r3, [r1]
 8004f3a:	e794      	b.n	8004e66 <__kernel_rem_pio2+0x4be>
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004f42:	4639      	mov	r1, r7
 8004f44:	f7fb f90a 	bl	800015c <__adddf3>
 8004f48:	3c01      	subs	r4, #1
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	e7e9      	b.n	8004f24 <__kernel_rem_pio2+0x57c>
 8004f50:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004f54:	f7fb f902 	bl	800015c <__adddf3>
 8004f58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004f5c:	e7ba      	b.n	8004ed4 <__kernel_rem_pio2+0x52c>
 8004f5e:	460d      	mov	r5, r1
 8004f60:	e7c0      	b.n	8004ee4 <__kernel_rem_pio2+0x53c>
 8004f62:	4660      	mov	r0, ip
 8004f64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb f8f7 	bl	800015c <__adddf3>
 8004f6e:	3601      	adds	r6, #1
 8004f70:	4684      	mov	ip, r0
 8004f72:	460f      	mov	r7, r1
 8004f74:	e7c4      	b.n	8004f00 <__kernel_rem_pio2+0x558>
 8004f76:	e9da 6700 	ldrd	r6, r7, [sl]
 8004f7a:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004f7e:	4632      	mov	r2, r6
 8004f80:	463b      	mov	r3, r7
 8004f82:	4640      	mov	r0, r8
 8004f84:	4649      	mov	r1, r9
 8004f86:	f7fb f8e9 	bl	800015c <__adddf3>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f7fb f8df 	bl	8000158 <__aeabi_dsub>
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	f7fb f8dd 	bl	800015c <__adddf3>
 8004fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa6:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004faa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004fae:	e9ca 2300 	strd	r2, r3, [sl]
 8004fb2:	e766      	b.n	8004e82 <__kernel_rem_pio2+0x4da>
 8004fb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8004fb8:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	f7fb f8ca 	bl	800015c <__adddf3>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb f8c0 	bl	8000158 <__aeabi_dsub>
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	f7fb f8be 	bl	800015c <__adddf3>
 8004fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe4:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004fe8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004fec:	e9ca 2300 	strd	r2, r3, [sl]
 8004ff0:	e74c      	b.n	8004e8c <__kernel_rem_pio2+0x4e4>
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004ff8:	4631      	mov	r1, r6
 8004ffa:	f7fb f8af 	bl	800015c <__adddf3>
 8004ffe:	3c01      	subs	r4, #1
 8005000:	4607      	mov	r7, r0
 8005002:	460e      	mov	r6, r1
 8005004:	e748      	b.n	8004e98 <__kernel_rem_pio2+0x4f0>
 8005006:	9b06      	ldr	r3, [sp, #24]
 8005008:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800500c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005010:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005014:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005018:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800501c:	601d      	str	r5, [r3, #0]
 800501e:	615e      	str	r6, [r3, #20]
 8005020:	e721      	b.n	8004e66 <__kernel_rem_pio2+0x4be>
 8005022:	bf00      	nop
 8005024:	41700000 	.word	0x41700000
 8005028:	3e700000 	.word	0x3e700000
 800502c:	00000000 	.word	0x00000000

08005030 <__kernel_tan>:
 8005030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005034:	b08b      	sub	sp, #44	; 0x2c
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4bd9      	ldr	r3, [pc, #868]	; (80053a0 <__kernel_tan+0x370>)
 800503a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800503e:	429e      	cmp	r6, r3
 8005040:	4604      	mov	r4, r0
 8005042:	460d      	mov	r5, r1
 8005044:	4682      	mov	sl, r0
 8005046:	468b      	mov	fp, r1
 8005048:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800504a:	9202      	str	r2, [sp, #8]
 800504c:	9107      	str	r1, [sp, #28]
 800504e:	dc58      	bgt.n	8005102 <__kernel_tan+0xd2>
 8005050:	f7fb fcd4 	bl	80009fc <__aeabi_d2iz>
 8005054:	4605      	mov	r5, r0
 8005056:	2800      	cmp	r0, #0
 8005058:	d178      	bne.n	800514c <__kernel_tan+0x11c>
 800505a:	1c7b      	adds	r3, r7, #1
 800505c:	4323      	orrs	r3, r4
 800505e:	4333      	orrs	r3, r6
 8005060:	d110      	bne.n	8005084 <__kernel_tan+0x54>
 8005062:	4620      	mov	r0, r4
 8005064:	4659      	mov	r1, fp
 8005066:	f000 f9df 	bl	8005428 <fabs>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	2000      	movs	r0, #0
 8005070:	49cc      	ldr	r1, [pc, #816]	; (80053a4 <__kernel_tan+0x374>)
 8005072:	f7fb fb53 	bl	800071c <__aeabi_ddiv>
 8005076:	4682      	mov	sl, r0
 8005078:	468b      	mov	fp, r1
 800507a:	4650      	mov	r0, sl
 800507c:	4659      	mov	r1, fp
 800507e:	b00b      	add	sp, #44	; 0x2c
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	2f01      	cmp	r7, #1
 8005086:	d0f8      	beq.n	800507a <__kernel_tan+0x4a>
 8005088:	4620      	mov	r0, r4
 800508a:	4659      	mov	r1, fp
 800508c:	9a02      	ldr	r2, [sp, #8]
 800508e:	9b00      	ldr	r3, [sp, #0]
 8005090:	f7fb f864 	bl	800015c <__adddf3>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	460f      	mov	r7, r1
 800509a:	2000      	movs	r0, #0
 800509c:	49c2      	ldr	r1, [pc, #776]	; (80053a8 <__kernel_tan+0x378>)
 800509e:	f7fb fb3d 	bl	800071c <__aeabi_ddiv>
 80050a2:	462e      	mov	r6, r5
 80050a4:	4689      	mov	r9, r1
 80050a6:	4652      	mov	r2, sl
 80050a8:	465b      	mov	r3, fp
 80050aa:	4680      	mov	r8, r0
 80050ac:	462c      	mov	r4, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	460d      	mov	r5, r1
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb f850 	bl	8000158 <__aeabi_dsub>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	9802      	ldr	r0, [sp, #8]
 80050be:	9900      	ldr	r1, [sp, #0]
 80050c0:	f7fb f84a 	bl	8000158 <__aeabi_dsub>
 80050c4:	4632      	mov	r2, r6
 80050c6:	464b      	mov	r3, r9
 80050c8:	f7fb f9fe 	bl	80004c8 <__aeabi_dmul>
 80050cc:	4632      	mov	r2, r6
 80050ce:	4682      	mov	sl, r0
 80050d0:	468b      	mov	fp, r1
 80050d2:	464b      	mov	r3, r9
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	f7fb f9f6 	bl	80004c8 <__aeabi_dmul>
 80050dc:	2200      	movs	r2, #0
 80050de:	4bb1      	ldr	r3, [pc, #708]	; (80053a4 <__kernel_tan+0x374>)
 80050e0:	f7fb f83c 	bl	800015c <__adddf3>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4650      	mov	r0, sl
 80050ea:	4659      	mov	r1, fp
 80050ec:	f7fb f836 	bl	800015c <__adddf3>
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	f7fb f9e8 	bl	80004c8 <__aeabi_dmul>
 80050f8:	4622      	mov	r2, r4
 80050fa:	462b      	mov	r3, r5
 80050fc:	f7fb f82e 	bl	800015c <__adddf3>
 8005100:	e7b9      	b.n	8005076 <__kernel_tan+0x46>
 8005102:	4baa      	ldr	r3, [pc, #680]	; (80053ac <__kernel_tan+0x37c>)
 8005104:	429e      	cmp	r6, r3
 8005106:	dd21      	ble.n	800514c <__kernel_tan+0x11c>
 8005108:	2900      	cmp	r1, #0
 800510a:	da06      	bge.n	800511a <__kernel_tan+0xea>
 800510c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005110:	469b      	mov	fp, r3
 8005112:	9b00      	ldr	r3, [sp, #0]
 8005114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	4652      	mov	r2, sl
 800511c:	a182      	add	r1, pc, #520	; (adr r1, 8005328 <__kernel_tan+0x2f8>)
 800511e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005122:	465b      	mov	r3, fp
 8005124:	f7fb f818 	bl	8000158 <__aeabi_dsub>
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
 800512c:	a180      	add	r1, pc, #512	; (adr r1, 8005330 <__kernel_tan+0x300>)
 800512e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005132:	9a02      	ldr	r2, [sp, #8]
 8005134:	9b00      	ldr	r3, [sp, #0]
 8005136:	f7fb f80f 	bl	8000158 <__aeabi_dsub>
 800513a:	462b      	mov	r3, r5
 800513c:	4622      	mov	r2, r4
 800513e:	f7fb f80d 	bl	800015c <__adddf3>
 8005142:	2300      	movs	r3, #0
 8005144:	4682      	mov	sl, r0
 8005146:	468b      	mov	fp, r1
 8005148:	9302      	str	r3, [sp, #8]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	4652      	mov	r2, sl
 800514e:	465b      	mov	r3, fp
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb f9b8 	bl	80004c8 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4680      	mov	r8, r0
 800515e:	4689      	mov	r9, r1
 8005160:	f7fb f9b2 	bl	80004c8 <__aeabi_dmul>
 8005164:	4642      	mov	r2, r8
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	464b      	mov	r3, r9
 800516c:	4650      	mov	r0, sl
 800516e:	4659      	mov	r1, fp
 8005170:	f7fb f9aa 	bl	80004c8 <__aeabi_dmul>
 8005174:	a370      	add	r3, pc, #448	; (adr r3, 8005338 <__kernel_tan+0x308>)
 8005176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	f7fb f9a1 	bl	80004c8 <__aeabi_dmul>
 8005186:	a36e      	add	r3, pc, #440	; (adr r3, 8005340 <__kernel_tan+0x310>)
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f7fa ffe6 	bl	800015c <__adddf3>
 8005190:	4622      	mov	r2, r4
 8005192:	462b      	mov	r3, r5
 8005194:	f7fb f998 	bl	80004c8 <__aeabi_dmul>
 8005198:	a36b      	add	r3, pc, #428	; (adr r3, 8005348 <__kernel_tan+0x318>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fa ffdd 	bl	800015c <__adddf3>
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	f7fb f98f 	bl	80004c8 <__aeabi_dmul>
 80051aa:	a369      	add	r3, pc, #420	; (adr r3, 8005350 <__kernel_tan+0x320>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fa ffd4 	bl	800015c <__adddf3>
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	f7fb f986 	bl	80004c8 <__aeabi_dmul>
 80051bc:	a366      	add	r3, pc, #408	; (adr r3, 8005358 <__kernel_tan+0x328>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fa ffcb 	bl	800015c <__adddf3>
 80051c6:	4622      	mov	r2, r4
 80051c8:	462b      	mov	r3, r5
 80051ca:	f7fb f97d 	bl	80004c8 <__aeabi_dmul>
 80051ce:	a364      	add	r3, pc, #400	; (adr r3, 8005360 <__kernel_tan+0x330>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fa ffc2 	bl	800015c <__adddf3>
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	f7fb f974 	bl	80004c8 <__aeabi_dmul>
 80051e0:	a361      	add	r3, pc, #388	; (adr r3, 8005368 <__kernel_tan+0x338>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fb f96b 	bl	80004c8 <__aeabi_dmul>
 80051f2:	a35f      	add	r3, pc, #380	; (adr r3, 8005370 <__kernel_tan+0x340>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fa ffb0 	bl	800015c <__adddf3>
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	f7fb f962 	bl	80004c8 <__aeabi_dmul>
 8005204:	a35c      	add	r3, pc, #368	; (adr r3, 8005378 <__kernel_tan+0x348>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f7fa ffa7 	bl	800015c <__adddf3>
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	f7fb f959 	bl	80004c8 <__aeabi_dmul>
 8005216:	a35a      	add	r3, pc, #360	; (adr r3, 8005380 <__kernel_tan+0x350>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fa ff9e 	bl	800015c <__adddf3>
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	f7fb f950 	bl	80004c8 <__aeabi_dmul>
 8005228:	a357      	add	r3, pc, #348	; (adr r3, 8005388 <__kernel_tan+0x358>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fa ff95 	bl	800015c <__adddf3>
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f7fb f947 	bl	80004c8 <__aeabi_dmul>
 800523a:	a355      	add	r3, pc, #340	; (adr r3, 8005390 <__kernel_tan+0x360>)
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fa ff8c 	bl	800015c <__adddf3>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800524c:	f7fa ff86 	bl	800015c <__adddf3>
 8005250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005254:	f7fb f938 	bl	80004c8 <__aeabi_dmul>
 8005258:	9a02      	ldr	r2, [sp, #8]
 800525a:	9b00      	ldr	r3, [sp, #0]
 800525c:	f7fa ff7e 	bl	800015c <__adddf3>
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	f7fb f930 	bl	80004c8 <__aeabi_dmul>
 8005268:	9a02      	ldr	r2, [sp, #8]
 800526a:	9b00      	ldr	r3, [sp, #0]
 800526c:	f7fa ff76 	bl	800015c <__adddf3>
 8005270:	a349      	add	r3, pc, #292	; (adr r3, 8005398 <__kernel_tan+0x368>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	4604      	mov	r4, r0
 8005278:	460d      	mov	r5, r1
 800527a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800527e:	f7fb f923 	bl	80004c8 <__aeabi_dmul>
 8005282:	4622      	mov	r2, r4
 8005284:	462b      	mov	r3, r5
 8005286:	f7fa ff69 	bl	800015c <__adddf3>
 800528a:	460b      	mov	r3, r1
 800528c:	e9cd 0100 	strd	r0, r1, [sp]
 8005290:	4602      	mov	r2, r0
 8005292:	4659      	mov	r1, fp
 8005294:	4650      	mov	r0, sl
 8005296:	f7fa ff61 	bl	800015c <__adddf3>
 800529a:	4b44      	ldr	r3, [pc, #272]	; (80053ac <__kernel_tan+0x37c>)
 800529c:	4604      	mov	r4, r0
 800529e:	429e      	cmp	r6, r3
 80052a0:	460d      	mov	r5, r1
 80052a2:	f340 8085 	ble.w	80053b0 <__kernel_tan+0x380>
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7fb f8a4 	bl	80003f4 <__aeabi_i2d>
 80052ac:	4622      	mov	r2, r4
 80052ae:	4680      	mov	r8, r0
 80052b0:	4689      	mov	r9, r1
 80052b2:	462b      	mov	r3, r5
 80052b4:	4620      	mov	r0, r4
 80052b6:	4629      	mov	r1, r5
 80052b8:	f7fb f906 	bl	80004c8 <__aeabi_dmul>
 80052bc:	4642      	mov	r2, r8
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	464b      	mov	r3, r9
 80052c4:	4620      	mov	r0, r4
 80052c6:	4629      	mov	r1, r5
 80052c8:	f7fa ff48 	bl	800015c <__adddf3>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fa22 	bl	800071c <__aeabi_ddiv>
 80052d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052dc:	f7fa ff3c 	bl	8000158 <__aeabi_dsub>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4650      	mov	r0, sl
 80052e6:	4659      	mov	r1, fp
 80052e8:	f7fa ff36 	bl	8000158 <__aeabi_dsub>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	f7fa ff34 	bl	800015c <__adddf3>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fa ff2c 	bl	8000158 <__aeabi_dsub>
 8005300:	9b07      	ldr	r3, [sp, #28]
 8005302:	4604      	mov	r4, r0
 8005304:	179b      	asrs	r3, r3, #30
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	f1c3 0001 	rsb	r0, r3, #1
 800530e:	460d      	mov	r5, r1
 8005310:	f7fb f870 	bl	80003f4 <__aeabi_i2d>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4620      	mov	r0, r4
 800531a:	4629      	mov	r1, r5
 800531c:	f7fb f8d4 	bl	80004c8 <__aeabi_dmul>
 8005320:	e6a9      	b.n	8005076 <__kernel_tan+0x46>
 8005322:	bf00      	nop
 8005324:	f3af 8000 	nop.w
 8005328:	54442d18 	.word	0x54442d18
 800532c:	3fe921fb 	.word	0x3fe921fb
 8005330:	33145c07 	.word	0x33145c07
 8005334:	3c81a626 	.word	0x3c81a626
 8005338:	74bf7ad4 	.word	0x74bf7ad4
 800533c:	3efb2a70 	.word	0x3efb2a70
 8005340:	32f0a7e9 	.word	0x32f0a7e9
 8005344:	3f12b80f 	.word	0x3f12b80f
 8005348:	1a8d1068 	.word	0x1a8d1068
 800534c:	3f3026f7 	.word	0x3f3026f7
 8005350:	fee08315 	.word	0xfee08315
 8005354:	3f57dbc8 	.word	0x3f57dbc8
 8005358:	e96e8493 	.word	0xe96e8493
 800535c:	3f8226e3 	.word	0x3f8226e3
 8005360:	1bb341fe 	.word	0x1bb341fe
 8005364:	3faba1ba 	.word	0x3faba1ba
 8005368:	db605373 	.word	0xdb605373
 800536c:	bef375cb 	.word	0xbef375cb
 8005370:	a03792a6 	.word	0xa03792a6
 8005374:	3f147e88 	.word	0x3f147e88
 8005378:	f2f26501 	.word	0xf2f26501
 800537c:	3f4344d8 	.word	0x3f4344d8
 8005380:	c9560328 	.word	0xc9560328
 8005384:	3f6d6d22 	.word	0x3f6d6d22
 8005388:	8406d637 	.word	0x8406d637
 800538c:	3f9664f4 	.word	0x3f9664f4
 8005390:	1110fe7a 	.word	0x1110fe7a
 8005394:	3fc11111 	.word	0x3fc11111
 8005398:	55555563 	.word	0x55555563
 800539c:	3fd55555 	.word	0x3fd55555
 80053a0:	3e2fffff 	.word	0x3e2fffff
 80053a4:	3ff00000 	.word	0x3ff00000
 80053a8:	bff00000 	.word	0xbff00000
 80053ac:	3fe59427 	.word	0x3fe59427
 80053b0:	2f01      	cmp	r7, #1
 80053b2:	d031      	beq.n	8005418 <__kernel_tan+0x3e8>
 80053b4:	460f      	mov	r7, r1
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	2000      	movs	r0, #0
 80053bc:	4918      	ldr	r1, [pc, #96]	; (8005420 <__kernel_tan+0x3f0>)
 80053be:	f7fb f9ad 	bl	800071c <__aeabi_ddiv>
 80053c2:	2600      	movs	r6, #0
 80053c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053cc:	4652      	mov	r2, sl
 80053ce:	465b      	mov	r3, fp
 80053d0:	4630      	mov	r0, r6
 80053d2:	4639      	mov	r1, r7
 80053d4:	f7fa fec0 	bl	8000158 <__aeabi_dsub>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053e0:	f7fa feba 	bl	8000158 <__aeabi_dsub>
 80053e4:	4632      	mov	r2, r6
 80053e6:	462b      	mov	r3, r5
 80053e8:	f7fb f86e 	bl	80004c8 <__aeabi_dmul>
 80053ec:	4632      	mov	r2, r6
 80053ee:	4682      	mov	sl, r0
 80053f0:	468b      	mov	fp, r1
 80053f2:	462b      	mov	r3, r5
 80053f4:	4630      	mov	r0, r6
 80053f6:	4639      	mov	r1, r7
 80053f8:	f7fb f866 	bl	80004c8 <__aeabi_dmul>
 80053fc:	2200      	movs	r2, #0
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <__kernel_tan+0x3f4>)
 8005400:	f7fa feac 	bl	800015c <__adddf3>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4650      	mov	r0, sl
 800540a:	4659      	mov	r1, fp
 800540c:	f7fa fea6 	bl	800015c <__adddf3>
 8005410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005414:	4634      	mov	r4, r6
 8005416:	e66d      	b.n	80050f4 <__kernel_tan+0xc4>
 8005418:	4682      	mov	sl, r0
 800541a:	468b      	mov	fp, r1
 800541c:	e62d      	b.n	800507a <__kernel_tan+0x4a>
 800541e:	bf00      	nop
 8005420:	bff00000 	.word	0xbff00000
 8005424:	3ff00000 	.word	0x3ff00000

08005428 <fabs>:
 8005428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800542c:	4770      	bx	lr
	...

08005430 <floor>:
 8005430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005434:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005438:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800543c:	2e13      	cmp	r6, #19
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4607      	mov	r7, r0
 8005444:	460c      	mov	r4, r1
 8005446:	4605      	mov	r5, r0
 8005448:	dc33      	bgt.n	80054b2 <floor+0x82>
 800544a:	2e00      	cmp	r6, #0
 800544c:	da14      	bge.n	8005478 <floor+0x48>
 800544e:	a334      	add	r3, pc, #208	; (adr r3, 8005520 <floor+0xf0>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fa fe82 	bl	800015c <__adddf3>
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	f7fb fac4 	bl	80009e8 <__aeabi_dcmpgt>
 8005460:	b138      	cbz	r0, 8005472 <floor+0x42>
 8005462:	2c00      	cmp	r4, #0
 8005464:	da58      	bge.n	8005518 <floor+0xe8>
 8005466:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800546a:	431d      	orrs	r5, r3
 800546c:	d001      	beq.n	8005472 <floor+0x42>
 800546e:	2500      	movs	r5, #0
 8005470:	4c2d      	ldr	r4, [pc, #180]	; (8005528 <floor+0xf8>)
 8005472:	4623      	mov	r3, r4
 8005474:	462f      	mov	r7, r5
 8005476:	e025      	b.n	80054c4 <floor+0x94>
 8005478:	4a2c      	ldr	r2, [pc, #176]	; (800552c <floor+0xfc>)
 800547a:	fa42 f806 	asr.w	r8, r2, r6
 800547e:	ea01 0208 	and.w	r2, r1, r8
 8005482:	4302      	orrs	r2, r0
 8005484:	d01e      	beq.n	80054c4 <floor+0x94>
 8005486:	a326      	add	r3, pc, #152	; (adr r3, 8005520 <floor+0xf0>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa fe66 	bl	800015c <__adddf3>
 8005490:	2200      	movs	r2, #0
 8005492:	2300      	movs	r3, #0
 8005494:	f7fb faa8 	bl	80009e8 <__aeabi_dcmpgt>
 8005498:	2800      	cmp	r0, #0
 800549a:	d0ea      	beq.n	8005472 <floor+0x42>
 800549c:	2c00      	cmp	r4, #0
 800549e:	bfbe      	ittt	lt
 80054a0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80054a4:	fa43 f606 	asrlt.w	r6, r3, r6
 80054a8:	19a4      	addlt	r4, r4, r6
 80054aa:	2500      	movs	r5, #0
 80054ac:	ea24 0408 	bic.w	r4, r4, r8
 80054b0:	e7df      	b.n	8005472 <floor+0x42>
 80054b2:	2e33      	cmp	r6, #51	; 0x33
 80054b4:	dd0a      	ble.n	80054cc <floor+0x9c>
 80054b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80054ba:	d103      	bne.n	80054c4 <floor+0x94>
 80054bc:	f7fa fe4e 	bl	800015c <__adddf3>
 80054c0:	4607      	mov	r7, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4638      	mov	r0, r7
 80054c6:	4619      	mov	r1, r3
 80054c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80054d4:	fa22 f808 	lsr.w	r8, r2, r8
 80054d8:	ea18 0f00 	tst.w	r8, r0
 80054dc:	d0f2      	beq.n	80054c4 <floor+0x94>
 80054de:	a310      	add	r3, pc, #64	; (adr r3, 8005520 <floor+0xf0>)
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f7fa fe3a 	bl	800015c <__adddf3>
 80054e8:	2200      	movs	r2, #0
 80054ea:	2300      	movs	r3, #0
 80054ec:	f7fb fa7c 	bl	80009e8 <__aeabi_dcmpgt>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0be      	beq.n	8005472 <floor+0x42>
 80054f4:	2c00      	cmp	r4, #0
 80054f6:	da02      	bge.n	80054fe <floor+0xce>
 80054f8:	2e14      	cmp	r6, #20
 80054fa:	d103      	bne.n	8005504 <floor+0xd4>
 80054fc:	3401      	adds	r4, #1
 80054fe:	ea25 0508 	bic.w	r5, r5, r8
 8005502:	e7b6      	b.n	8005472 <floor+0x42>
 8005504:	2301      	movs	r3, #1
 8005506:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800550a:	fa03 f606 	lsl.w	r6, r3, r6
 800550e:	4435      	add	r5, r6
 8005510:	42bd      	cmp	r5, r7
 8005512:	bf38      	it	cc
 8005514:	18e4      	addcc	r4, r4, r3
 8005516:	e7f2      	b.n	80054fe <floor+0xce>
 8005518:	2500      	movs	r5, #0
 800551a:	462c      	mov	r4, r5
 800551c:	e7a9      	b.n	8005472 <floor+0x42>
 800551e:	bf00      	nop
 8005520:	8800759c 	.word	0x8800759c
 8005524:	7e37e43c 	.word	0x7e37e43c
 8005528:	bff00000 	.word	0xbff00000
 800552c:	000fffff 	.word	0x000fffff

08005530 <scalbn>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
 800553a:	4617      	mov	r7, r2
 800553c:	460b      	mov	r3, r1
 800553e:	b996      	cbnz	r6, 8005566 <scalbn+0x36>
 8005540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005544:	4303      	orrs	r3, r0
 8005546:	d039      	beq.n	80055bc <scalbn+0x8c>
 8005548:	4b33      	ldr	r3, [pc, #204]	; (8005618 <scalbn+0xe8>)
 800554a:	2200      	movs	r2, #0
 800554c:	f7fa ffbc 	bl	80004c8 <__aeabi_dmul>
 8005550:	4b32      	ldr	r3, [pc, #200]	; (800561c <scalbn+0xec>)
 8005552:	4604      	mov	r4, r0
 8005554:	429f      	cmp	r7, r3
 8005556:	460d      	mov	r5, r1
 8005558:	da0f      	bge.n	800557a <scalbn+0x4a>
 800555a:	a32b      	add	r3, pc, #172	; (adr r3, 8005608 <scalbn+0xd8>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fa ffb2 	bl	80004c8 <__aeabi_dmul>
 8005564:	e006      	b.n	8005574 <scalbn+0x44>
 8005566:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800556a:	4296      	cmp	r6, r2
 800556c:	d10a      	bne.n	8005584 <scalbn+0x54>
 800556e:	4602      	mov	r2, r0
 8005570:	f7fa fdf4 	bl	800015c <__adddf3>
 8005574:	4604      	mov	r4, r0
 8005576:	460d      	mov	r5, r1
 8005578:	e020      	b.n	80055bc <scalbn+0x8c>
 800557a:	460b      	mov	r3, r1
 800557c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005580:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005584:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005588:	19b9      	adds	r1, r7, r6
 800558a:	4291      	cmp	r1, r2
 800558c:	dd0e      	ble.n	80055ac <scalbn+0x7c>
 800558e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005592:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005596:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800559a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800559e:	4820      	ldr	r0, [pc, #128]	; (8005620 <scalbn+0xf0>)
 80055a0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80055a4:	a31a      	add	r3, pc, #104	; (adr r3, 8005610 <scalbn+0xe0>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	e7d9      	b.n	8005560 <scalbn+0x30>
 80055ac:	2900      	cmp	r1, #0
 80055ae:	dd08      	ble.n	80055c2 <scalbn+0x92>
 80055b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80055b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80055c6:	da12      	bge.n	80055ee <scalbn+0xbe>
 80055c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80055cc:	429f      	cmp	r7, r3
 80055ce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80055d2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80055d6:	dcdc      	bgt.n	8005592 <scalbn+0x62>
 80055d8:	a30b      	add	r3, pc, #44	; (adr r3, 8005608 <scalbn+0xd8>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80055e2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80055e6:	480f      	ldr	r0, [pc, #60]	; (8005624 <scalbn+0xf4>)
 80055e8:	f041 011f 	orr.w	r1, r1, #31
 80055ec:	e7b8      	b.n	8005560 <scalbn+0x30>
 80055ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80055f2:	3136      	adds	r1, #54	; 0x36
 80055f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	2200      	movs	r2, #0
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <scalbn+0xf8>)
 8005604:	e7ac      	b.n	8005560 <scalbn+0x30>
 8005606:	bf00      	nop
 8005608:	c2f8f359 	.word	0xc2f8f359
 800560c:	01a56e1f 	.word	0x01a56e1f
 8005610:	8800759c 	.word	0x8800759c
 8005614:	7e37e43c 	.word	0x7e37e43c
 8005618:	43500000 	.word	0x43500000
 800561c:	ffff3cb0 	.word	0xffff3cb0
 8005620:	8800759c 	.word	0x8800759c
 8005624:	c2f8f359 	.word	0xc2f8f359
 8005628:	3c900000 	.word	0x3c900000

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	2600      	movs	r6, #0
 8005630:	4d0c      	ldr	r5, [pc, #48]	; (8005664 <__libc_init_array+0x38>)
 8005632:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005634:	1b64      	subs	r4, r4, r5
 8005636:	10a4      	asrs	r4, r4, #2
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	f000 f87e 	bl	800573c <_init>
 8005640:	2600      	movs	r6, #0
 8005642:	4d0a      	ldr	r5, [pc, #40]	; (800566c <__libc_init_array+0x40>)
 8005644:	4c0a      	ldr	r4, [pc, #40]	; (8005670 <__libc_init_array+0x44>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	08007a90 	.word	0x08007a90
 8005668:	08007a90 	.word	0x08007a90
 800566c:	08007a90 	.word	0x08007a90
 8005670:	08007a94 	.word	0x08007a94

08005674 <__itoa>:
 8005674:	1e93      	subs	r3, r2, #2
 8005676:	2b22      	cmp	r3, #34	; 0x22
 8005678:	b510      	push	{r4, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	d904      	bls.n	8005688 <__itoa+0x14>
 800567e:	2300      	movs	r3, #0
 8005680:	461c      	mov	r4, r3
 8005682:	700b      	strb	r3, [r1, #0]
 8005684:	4620      	mov	r0, r4
 8005686:	bd10      	pop	{r4, pc}
 8005688:	2a0a      	cmp	r2, #10
 800568a:	d109      	bne.n	80056a0 <__itoa+0x2c>
 800568c:	2800      	cmp	r0, #0
 800568e:	da07      	bge.n	80056a0 <__itoa+0x2c>
 8005690:	232d      	movs	r3, #45	; 0x2d
 8005692:	700b      	strb	r3, [r1, #0]
 8005694:	2101      	movs	r1, #1
 8005696:	4240      	negs	r0, r0
 8005698:	4421      	add	r1, r4
 800569a:	f000 f80d 	bl	80056b8 <__utoa>
 800569e:	e7f1      	b.n	8005684 <__itoa+0x10>
 80056a0:	2100      	movs	r1, #0
 80056a2:	e7f9      	b.n	8005698 <__itoa+0x24>

080056a4 <itoa>:
 80056a4:	f7ff bfe6 	b.w	8005674 <__itoa>

080056a8 <memset>:
 80056a8:	4603      	mov	r3, r0
 80056aa:	4402      	add	r2, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <__utoa>:
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	b08b      	sub	sp, #44	; 0x2c
 80056bc:	4605      	mov	r5, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	466e      	mov	r6, sp
 80056c2:	4c1d      	ldr	r4, [pc, #116]	; (8005738 <__utoa+0x80>)
 80056c4:	f104 0c20 	add.w	ip, r4, #32
 80056c8:	4637      	mov	r7, r6
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	6861      	ldr	r1, [r4, #4]
 80056ce:	3408      	adds	r4, #8
 80056d0:	c703      	stmia	r7!, {r0, r1}
 80056d2:	4564      	cmp	r4, ip
 80056d4:	463e      	mov	r6, r7
 80056d6:	d1f7      	bne.n	80056c8 <__utoa+0x10>
 80056d8:	7921      	ldrb	r1, [r4, #4]
 80056da:	6820      	ldr	r0, [r4, #0]
 80056dc:	7139      	strb	r1, [r7, #4]
 80056de:	1e91      	subs	r1, r2, #2
 80056e0:	2922      	cmp	r1, #34	; 0x22
 80056e2:	6038      	str	r0, [r7, #0]
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	d904      	bls.n	80056f4 <__utoa+0x3c>
 80056ea:	7019      	strb	r1, [r3, #0]
 80056ec:	460b      	mov	r3, r1
 80056ee:	4618      	mov	r0, r3
 80056f0:	b00b      	add	sp, #44	; 0x2c
 80056f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f4:	1e58      	subs	r0, r3, #1
 80056f6:	4684      	mov	ip, r0
 80056f8:	fbb5 f7f2 	udiv	r7, r5, r2
 80056fc:	fb02 5617 	mls	r6, r2, r7, r5
 8005700:	3628      	adds	r6, #40	; 0x28
 8005702:	446e      	add	r6, sp
 8005704:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005708:	460c      	mov	r4, r1
 800570a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800570e:	462e      	mov	r6, r5
 8005710:	42b2      	cmp	r2, r6
 8005712:	463d      	mov	r5, r7
 8005714:	f101 0101 	add.w	r1, r1, #1
 8005718:	d9ee      	bls.n	80056f8 <__utoa+0x40>
 800571a:	2200      	movs	r2, #0
 800571c:	545a      	strb	r2, [r3, r1]
 800571e:	1919      	adds	r1, r3, r4
 8005720:	1aa5      	subs	r5, r4, r2
 8005722:	42aa      	cmp	r2, r5
 8005724:	dae3      	bge.n	80056ee <__utoa+0x36>
 8005726:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800572a:	780e      	ldrb	r6, [r1, #0]
 800572c:	3201      	adds	r2, #1
 800572e:	7006      	strb	r6, [r0, #0]
 8005730:	f801 5901 	strb.w	r5, [r1], #-1
 8005734:	e7f4      	b.n	8005720 <__utoa+0x68>
 8005736:	bf00      	nop
 8005738:	08007a68 	.word	0x08007a68

0800573c <_init>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr

08005748 <_fini>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr
