
PracticeOfMechanicalEngineering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb8  08004bb8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb8  08004bb8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb8  08004bb8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000020  08004be0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004be0  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d7f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a6  00000000  00000000  00029dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016be3  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4f6  00000000  00000000  000438fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bb3  00000000  00000000  0004edf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d59a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b0  00000000  00000000  000d59f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b68 	.word	0x08004b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08004b68 	.word	0x08004b68

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_frsub>:
 8000938:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800093c:	e002      	b.n	8000944 <__addsf3>
 800093e:	bf00      	nop

08000940 <__aeabi_fsub>:
 8000940:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000944 <__addsf3>:
 8000944:	0042      	lsls	r2, r0, #1
 8000946:	bf1f      	itttt	ne
 8000948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800094c:	ea92 0f03 	teqne	r2, r3
 8000950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000958:	d06a      	beq.n	8000a30 <__addsf3+0xec>
 800095a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000962:	bfc1      	itttt	gt
 8000964:	18d2      	addgt	r2, r2, r3
 8000966:	4041      	eorgt	r1, r0
 8000968:	4048      	eorgt	r0, r1
 800096a:	4041      	eorgt	r1, r0
 800096c:	bfb8      	it	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	2b19      	cmp	r3, #25
 8000972:	bf88      	it	hi
 8000974:	4770      	bxhi	lr
 8000976:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4240      	negne	r0, r0
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800098e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4249      	negne	r1, r1
 8000996:	ea92 0f03 	teq	r2, r3
 800099a:	d03f      	beq.n	8000a1c <__addsf3+0xd8>
 800099c:	f1a2 0201 	sub.w	r2, r2, #1
 80009a0:	fa41 fc03 	asr.w	ip, r1, r3
 80009a4:	eb10 000c 	adds.w	r0, r0, ip
 80009a8:	f1c3 0320 	rsb	r3, r3, #32
 80009ac:	fa01 f103 	lsl.w	r1, r1, r3
 80009b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b4:	d502      	bpl.n	80009bc <__addsf3+0x78>
 80009b6:	4249      	negs	r1, r1
 80009b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c0:	d313      	bcc.n	80009ea <__addsf3+0xa6>
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c6:	d306      	bcc.n	80009d6 <__addsf3+0x92>
 80009c8:	0840      	lsrs	r0, r0, #1
 80009ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ce:	f102 0201 	add.w	r2, r2, #1
 80009d2:	2afe      	cmp	r2, #254	; 0xfe
 80009d4:	d251      	bcs.n	8000a7a <__addsf3+0x136>
 80009d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009de:	bf08      	it	eq
 80009e0:	f020 0001 	biceq.w	r0, r0, #1
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	4770      	bx	lr
 80009ea:	0049      	lsls	r1, r1, #1
 80009ec:	eb40 0000 	adc.w	r0, r0, r0
 80009f0:	3a01      	subs	r2, #1
 80009f2:	bf28      	it	cs
 80009f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009f8:	d2ed      	bcs.n	80009d6 <__addsf3+0x92>
 80009fa:	fab0 fc80 	clz	ip, r0
 80009fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a02:	ebb2 020c 	subs.w	r2, r2, ip
 8000a06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0a:	bfaa      	itet	ge
 8000a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a10:	4252      	neglt	r2, r2
 8000a12:	4318      	orrge	r0, r3
 8000a14:	bfbc      	itt	lt
 8000a16:	40d0      	lsrlt	r0, r2
 8000a18:	4318      	orrlt	r0, r3
 8000a1a:	4770      	bx	lr
 8000a1c:	f092 0f00 	teq	r2, #0
 8000a20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a24:	bf06      	itte	eq
 8000a26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2a:	3201      	addeq	r2, #1
 8000a2c:	3b01      	subne	r3, #1
 8000a2e:	e7b5      	b.n	800099c <__addsf3+0x58>
 8000a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3e:	d021      	beq.n	8000a84 <__addsf3+0x140>
 8000a40:	ea92 0f03 	teq	r2, r3
 8000a44:	d004      	beq.n	8000a50 <__addsf3+0x10c>
 8000a46:	f092 0f00 	teq	r2, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	4770      	bx	lr
 8000a50:	ea90 0f01 	teq	r0, r1
 8000a54:	bf1c      	itt	ne
 8000a56:	2000      	movne	r0, #0
 8000a58:	4770      	bxne	lr
 8000a5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a5e:	d104      	bne.n	8000a6a <__addsf3+0x126>
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	bf28      	it	cs
 8000a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a6e:	bf3c      	itt	cc
 8000a70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a74:	4770      	bxcc	lr
 8000a76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	4770      	bx	lr
 8000a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a88:	bf16      	itet	ne
 8000a8a:	4608      	movne	r0, r1
 8000a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a90:	4601      	movne	r1, r0
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	bf06      	itte	eq
 8000a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9a:	ea90 0f01 	teqeq	r0, r1
 8000a9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ui2f>:
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <__aeabi_i2f+0x8>
 8000aaa:	bf00      	nop

08000aac <__aeabi_i2f>:
 8000aac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	bf48      	it	mi
 8000ab2:	4240      	negmi	r0, r0
 8000ab4:	ea5f 0c00 	movs.w	ip, r0
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	e01c      	b.n	8000b02 <__aeabi_l2f+0x2a>

08000ac8 <__aeabi_ul2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e00a      	b.n	8000aec <__aeabi_l2f+0x14>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_l2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_l2f+0x14>
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	ea5f 0c01 	movs.w	ip, r1
 8000af0:	bf02      	ittt	eq
 8000af2:	4684      	moveq	ip, r0
 8000af4:	4601      	moveq	r1, r0
 8000af6:	2000      	moveq	r0, #0
 8000af8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000afc:	bf08      	it	eq
 8000afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b06:	fabc f28c 	clz	r2, ip
 8000b0a:	3a08      	subs	r2, #8
 8000b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b10:	db10      	blt.n	8000b34 <__aeabi_l2f+0x5c>
 8000b12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b1c:	f1c2 0220 	rsb	r2, r2, #32
 8000b20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b24:	fa20 f202 	lsr.w	r2, r0, r2
 8000b28:	eb43 0002 	adc.w	r0, r3, r2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f102 0220 	add.w	r2, r2, #32
 8000b38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b44:	fa21 f202 	lsr.w	r2, r1, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_fmul>:
 8000b54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b62:	ea92 0f0c 	teqne	r2, ip
 8000b66:	ea93 0f0c 	teqne	r3, ip
 8000b6a:	d06f      	beq.n	8000c4c <__aeabi_fmul+0xf8>
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	bf18      	it	ne
 8000b76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7a:	d01e      	beq.n	8000bba <__aeabi_fmul+0x66>
 8000b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b88:	fba0 3101 	umull	r3, r1, r0, r1
 8000b8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b94:	bf3e      	ittt	cc
 8000b96:	0049      	lslcc	r1, r1, #1
 8000b98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b9c:	005b      	lslcc	r3, r3, #1
 8000b9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ba2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ba6:	2afd      	cmp	r2, #253	; 0xfd
 8000ba8:	d81d      	bhi.n	8000be6 <__aeabi_fmul+0x92>
 8000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc2:	bf08      	it	eq
 8000bc4:	0249      	lsleq	r1, r1, #9
 8000bc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bce:	3a7f      	subs	r2, #127	; 0x7f
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bda:	4770      	bxgt	lr
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	dc5d      	bgt.n	8000ca4 <__aeabi_fmul+0x150>
 8000be8:	f112 0f19 	cmn.w	r2, #25
 8000bec:	bfdc      	itt	le
 8000bee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bxle	lr
 8000bf4:	f1c2 0200 	rsb	r2, r2, #0
 8000bf8:	0041      	lsls	r1, r0, #1
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	f1c2 0220 	rsb	r2, r2, #32
 8000c02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0a:	f140 0000 	adc.w	r0, r0, #0
 8000c0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c12:	bf08      	it	eq
 8000c14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c18:	4770      	bx	lr
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c22:	bf02      	ittt	eq
 8000c24:	0040      	lsleq	r0, r0, #1
 8000c26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2a:	3a01      	subeq	r2, #1
 8000c2c:	d0f9      	beq.n	8000c22 <__aeabi_fmul+0xce>
 8000c2e:	ea40 000c 	orr.w	r0, r0, ip
 8000c32:	f093 0f00 	teq	r3, #0
 8000c36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0049      	lsleq	r1, r1, #1
 8000c3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c42:	3b01      	subeq	r3, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xe6>
 8000c46:	ea41 010c 	orr.w	r1, r1, ip
 8000c4a:	e78f      	b.n	8000b6c <__aeabi_fmul+0x18>
 8000c4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c50:	ea92 0f0c 	teq	r2, ip
 8000c54:	bf18      	it	ne
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d00a      	beq.n	8000c72 <__aeabi_fmul+0x11e>
 8000c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c60:	bf18      	it	ne
 8000c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c66:	d1d8      	bne.n	8000c1a <__aeabi_fmul+0xc6>
 8000c68:	ea80 0001 	eor.w	r0, r0, r1
 8000c6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f090 0f00 	teq	r0, #0
 8000c76:	bf17      	itett	ne
 8000c78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	f091 0f00 	teqne	r1, #0
 8000c82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c86:	d014      	beq.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c88:	ea92 0f0c 	teq	r2, ip
 8000c8c:	d101      	bne.n	8000c92 <__aeabi_fmul+0x13e>
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	d10f      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c92:	ea93 0f0c 	teq	r3, ip
 8000c96:	d103      	bne.n	8000ca0 <__aeabi_fmul+0x14c>
 8000c98:	024b      	lsls	r3, r1, #9
 8000c9a:	bf18      	it	ne
 8000c9c:	4608      	movne	r0, r1
 8000c9e:	d108      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000ca0:	ea80 0001 	eor.w	r0, r0, r1
 8000ca4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bx	lr
 8000cb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_fdiv>:
 8000cbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cca:	ea92 0f0c 	teqne	r2, ip
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d069      	beq.n	8000da8 <__aeabi_fdiv+0xec>
 8000cd4:	eba2 0203 	sub.w	r2, r2, r3
 8000cd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce2:	d037      	beq.n	8000d54 <__aeabi_fdiv+0x98>
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf38      	it	cc
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf24      	itt	cs
 8000d06:	1a5b      	subcs	r3, r3, r1
 8000d08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d1e:	bf24      	itt	cs
 8000d20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d2c:	bf24      	itt	cs
 8000d2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d3e:	d1e0      	bne.n	8000d02 <__aeabi_fdiv+0x46>
 8000d40:	2afd      	cmp	r2, #253	; 0xfd
 8000d42:	f63f af50 	bhi.w	8000be6 <__aeabi_fmul+0x92>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5c:	327f      	adds	r2, #127	; 0x7f
 8000d5e:	bfc2      	ittt	gt
 8000d60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d68:	4770      	bxgt	lr
 8000d6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	3a01      	subs	r2, #1
 8000d74:	e737      	b.n	8000be6 <__aeabi_fmul+0x92>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fdiv+0xc2>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xda>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e795      	b.n	8000cd4 <__aeabi_fdiv+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d108      	bne.n	8000dc4 <__aeabi_fdiv+0x108>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	f47f af7d 	bne.w	8000cb2 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	f47f af70 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e776      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	d104      	bne.n	8000dd4 <__aeabi_fdiv+0x118>
 8000dca:	024b      	lsls	r3, r1, #9
 8000dcc:	f43f af4c 	beq.w	8000c68 <__aeabi_fmul+0x114>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e76e      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	d1ca      	bne.n	8000d76 <__aeabi_fdiv+0xba>
 8000de0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de4:	f47f af5c 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000de8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	f47f af3c 	bne.w	8000c68 <__aeabi_fmul+0x114>
 8000df0:	e75f      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000df2:	bf00      	nop

08000df4 <__gesf2>:
 8000df4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000df8:	e006      	b.n	8000e08 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__lesf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	e002      	b.n	8000e08 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__cmpsf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e18:	bf18      	it	ne
 8000e1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e1e:	d011      	beq.n	8000e44 <__cmpsf2+0x40>
 8000e20:	b001      	add	sp, #4
 8000e22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e26:	bf18      	it	ne
 8000e28:	ea90 0f01 	teqne	r0, r1
 8000e2c:	bf58      	it	pl
 8000e2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e32:	bf88      	it	hi
 8000e34:	17c8      	asrhi	r0, r1, #31
 8000e36:	bf38      	it	cc
 8000e38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e3c:	bf18      	it	ne
 8000e3e:	f040 0001 	orrne.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e48:	d102      	bne.n	8000e50 <__cmpsf2+0x4c>
 8000e4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e4e:	d105      	bne.n	8000e5c <__cmpsf2+0x58>
 8000e50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e54:	d1e4      	bne.n	8000e20 <__cmpsf2+0x1c>
 8000e56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5a:	d0e1      	beq.n	8000e20 <__cmpsf2+0x1c>
 8000e5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <__aeabi_cfrcmple>:
 8000e64:	4684      	mov	ip, r0
 8000e66:	4608      	mov	r0, r1
 8000e68:	4661      	mov	r1, ip
 8000e6a:	e7ff      	b.n	8000e6c <__aeabi_cfcmpeq>

08000e6c <__aeabi_cfcmpeq>:
 8000e6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e6e:	f7ff ffc9 	bl	8000e04 <__cmpsf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e7c <__aeabi_fcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cfcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffd2 	bl	8000e64 <__aeabi_cfrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc8 	bl	8000e64 <__aeabi_cfrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_f2iz>:
 8000ee0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ee8:	d30f      	bcc.n	8000f0a <__aeabi_f2iz+0x2a>
 8000eea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d90d      	bls.n	8000f10 <__aeabi_f2iz+0x30>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	bf18      	it	ne
 8000f06:	4240      	negne	r0, r0
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2iz+0x3a>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d105      	bne.n	8000f26 <__aeabi_f2iz+0x46>
 8000f1a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f1e:	bf08      	it	eq
 8000f20:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f001 f978 	bl	8002224 <HAL_Init>

  /* USER CODE BEGIN Init */
  pulse_servo1 = MIN_PULSE_LENGTH;
 8000f34:	4b8e      	ldr	r3, [pc, #568]	; (8001170 <main+0x244>)
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	601a      	str	r2, [r3, #0]
  pulse_servo2 = MIN_PULSE_LENGTH;
 8000f3c:	4b8d      	ldr	r3, [pc, #564]	; (8001174 <main+0x248>)
 8000f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f42:	601a      	str	r2, [r3, #0]
  pulse_servo3 = MIN_PULSE_LENGTH;
 8000f44:	4b8c      	ldr	r3, [pc, #560]	; (8001178 <main+0x24c>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	601a      	str	r2, [r3, #0]
  pulse_BLDC = MIN_PULSE_LENGTH;
 8000f4c:	4b8b      	ldr	r3, [pc, #556]	; (800117c <main+0x250>)
 8000f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f52:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f938 	bl	80011c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 fb40 	bl	80015dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5c:	f000 f98c 	bl	8001278 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f60:	f000 f9f6 	bl	8001350 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f64:	f000 fa90 	bl	8001488 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f68:	f000 fae8 	bl	800153c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	4883      	ldr	r0, [pc, #524]	; (8001180 <main+0x254>)
 8000f72:	f002 f8ab 	bl	80030cc <HAL_GPIO_TogglePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                 // Servo 1
 8000f76:	2100      	movs	r1, #0
 8000f78:	4882      	ldr	r0, [pc, #520]	; (8001184 <main+0x258>)
 8000f7a:	f002 ff29 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                 // Servo 2
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4880      	ldr	r0, [pc, #512]	; (8001184 <main+0x258>)
 8000f82:	f002 ff25 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);                 // Servo 3
 8000f86:	2108      	movs	r1, #8
 8000f88:	487e      	ldr	r0, [pc, #504]	; (8001184 <main+0x258>)
 8000f8a:	f002 ff21 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);                 //無刷馬達
 8000f8e:	2100      	movs	r1, #0
 8000f90:	487d      	ldr	r0, [pc, #500]	; (8001188 <main+0x25c>)
 8000f92:	f002 ff1d 	bl	8003dd0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);                            //開啟中斷
 8000f96:	487d      	ldr	r0, [pc, #500]	; (800118c <main+0x260>)
 8000f98:	f002 fe7e 	bl	8003c98 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); //無刷馬達下限轉速
 8000f9c:	4b77      	ldr	r3, [pc, #476]	; (800117c <main+0x250>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b79      	ldr	r3, [pc, #484]	; (8001188 <main+0x25c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  writeServo(90);
 8000fa6:	487a      	ldr	r0, [pc, #488]	; (8001190 <main+0x264>)
 8000fa8:	f000 fbce 	bl	8001748 <writeServo>
  brake();
 8000fac:	f000 fc30 	bl	8001810 <brake>
  // unbrake();
  HAL_Delay(3000);
 8000fb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb4:	f001 f998 	bl	80022e8 <HAL_Delay>
  mode = 3;
 8000fb8:	4b76      	ldr	r3, [pc, #472]	; (8001194 <main+0x268>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	601a      	str	r2, [r3, #0]

    // 全域變數測試
    // statecode = 0;

    // ESC test
    switch (mode)
 8000fbe:	4b75      	ldr	r3, [pc, #468]	; (8001194 <main+0x268>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d8fb      	bhi.n	8000fbe <main+0x92>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <main+0xa0>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000fe7 	.word	0x08000fe7
 8000fd4:	08000fef 	.word	0x08000fef
 8000fd8:	08001003 	.word	0x08001003
    {
    case 0:
      setPower(0);
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	f000 fbde 	bl	80017a0 <setPower>
      break;
 8000fe4:	e0c3      	b.n	800116e <main+0x242>

    case 1:
      setPower(100);
 8000fe6:	486c      	ldr	r0, [pc, #432]	; (8001198 <main+0x26c>)
 8000fe8:	f000 fbda 	bl	80017a0 <setPower>
      break;
 8000fec:	e0bf      	b.n	800116e <main+0x242>

    case 2:
      HAL_Delay(3000);
 8000fee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ff2:	f001 f979 	bl	80022e8 <HAL_Delay>
      setPower(power_BLDC);
 8000ff6:	4b69      	ldr	r3, [pc, #420]	; (800119c <main+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fbd0 	bl	80017a0 <setPower>
      // BLDC_test();
      break;
 8001000:	e0b5      	b.n	800116e <main+0x242>

    case 3:
      // 起步
      setPower(power_BLDC);
 8001002:	4b66      	ldr	r3, [pc, #408]	; (800119c <main+0x270>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fbca 	bl	80017a0 <setPower>
      HAL_Delay(2000);
 800100c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001010:	f001 f96a 	bl	80022e8 <HAL_Delay>
      unbrake();
 8001014:	f000 fc1a 	bl	800184c <unbrake>

      // 第 1 段，轉彎至第一循跡線
      writeServo(71.3);
 8001018:	4861      	ldr	r0, [pc, #388]	; (80011a0 <main+0x274>)
 800101a:	f000 fb95 	bl	8001748 <writeServo>
      while (trigger < 3)
 800101e:	e02d      	b.n	800107c <main+0x150>
      {
        HAL_ADC_Start(&hadc1);
 8001020:	4860      	ldr	r0, [pc, #384]	; (80011a4 <main+0x278>)
 8001022:	f001 fa5d 	bl	80024e0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001026:	2101      	movs	r1, #1
 8001028:	485e      	ldr	r0, [pc, #376]	; (80011a4 <main+0x278>)
 800102a:	f001 fb07 	bl	800263c <HAL_ADC_PollForConversion>
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 800102e:	2102      	movs	r1, #2
 8001030:	485c      	ldr	r0, [pc, #368]	; (80011a4 <main+0x278>)
 8001032:	f000 fb41 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <main+0x27c>)
 800103c:	601a      	str	r2, [r3, #0]
        if (value2 > 1000) //感測到黑色
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <main+0x27c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001046:	dd19      	ble.n	800107c <main+0x150>
        {
          while (value2 > 1000) //變成白色之前狀態不變
 8001048:	e00e      	b.n	8001068 <main+0x13c>
          {
            HAL_ADC_Start(&hadc1);
 800104a:	4856      	ldr	r0, [pc, #344]	; (80011a4 <main+0x278>)
 800104c:	f001 fa48 	bl	80024e0 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 1);
 8001050:	2101      	movs	r1, #1
 8001052:	4854      	ldr	r0, [pc, #336]	; (80011a4 <main+0x278>)
 8001054:	f001 faf2 	bl	800263c <HAL_ADC_PollForConversion>
            value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001058:	2102      	movs	r1, #2
 800105a:	4852      	ldr	r0, [pc, #328]	; (80011a4 <main+0x278>)
 800105c:	f000 fb2c 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <main+0x27c>)
 8001066:	601a      	str	r2, [r3, #0]
          while (value2 > 1000) //變成白色之前狀態不變
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <main+0x27c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001070:	dceb      	bgt.n	800104a <main+0x11e>
          }
          trigger += 1;
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <main+0x280>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <main+0x280>)
 800107a:	6013      	str	r3, [r2, #0]
      while (trigger < 3)
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <main+0x280>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	ddcd      	ble.n	8001020 <main+0xf4>
        }
      }

      // 第 4 段，第一段循跡
      lineFollower(3, 6, &trigger);
 8001084:	4a49      	ldr	r2, [pc, #292]	; (80011ac <main+0x280>)
 8001086:	494a      	ldr	r1, [pc, #296]	; (80011b0 <main+0x284>)
 8001088:	484a      	ldr	r0, [pc, #296]	; (80011b4 <main+0x288>)
 800108a:	f000 fcd9 	bl	8001a40 <lineFollower>
      lineFollower(1, 17, &trigger);
 800108e:	4a47      	ldr	r2, [pc, #284]	; (80011ac <main+0x280>)
 8001090:	4949      	ldr	r1, [pc, #292]	; (80011b8 <main+0x28c>)
 8001092:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001096:	f000 fcd3 	bl	8001a40 <lineFollower>

      // 第 5 段，變換車道
      setPower(16); // 根據電量調整
 800109a:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
 800109e:	f000 fb7f 	bl	80017a0 <setPower>
      writeServo(60);
 80010a2:	4846      	ldr	r0, [pc, #280]	; (80011bc <main+0x290>)
 80010a4:	f000 fb50 	bl	8001748 <writeServo>
      // HAL_Delay(950); //轉回黑線_往前
      HAL_Delay(900); //轉回黑線_往後，900~830
 80010a8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80010ac:	f001 f91c 	bl	80022e8 <HAL_Delay>
      // 轉彎法
      setPower(13.5);
 80010b0:	4843      	ldr	r0, [pc, #268]	; (80011c0 <main+0x294>)
 80010b2:	f000 fb75 	bl	80017a0 <setPower>
      writeServo(90);
 80010b6:	4836      	ldr	r0, [pc, #216]	; (8001190 <main+0x264>)
 80010b8:	f000 fb46 	bl	8001748 <writeServo>
      // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
      // writeServo(55);
      // HAL_Delay(1500);

      // 等到黑線停下
      waitBlack(2);
 80010bc:	2002      	movs	r0, #2
 80010be:	f000 fc93 	bl	80019e8 <waitBlack>
      // // 轉回黑線_往前
      // writeServo(138);
      // waitBlack(1);
      // 轉回黑線_往後
      setPower(0);
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	f000 fb6b 	bl	80017a0 <setPower>
      brake();
 80010ca:	f000 fba1 	bl	8001810 <brake>
      HAL_Delay(800);
 80010ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80010d2:	f001 f909 	bl	80022e8 <HAL_Delay>
      // pulse_servo2 = 500 + 2000 * 115 / 180;
      // pulse_servo3 = 500 + 2000 * 120 / 180; // 130?
      pulse_servo2 = 500 + 2000 * 115 / 180;
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <main+0x248>)
 80010d8:	f240 62f1 	movw	r2, #1777	; 0x6f1
 80010dc:	601a      	str	r2, [r3, #0]
      pulse_servo3 = 500 + 2000 * 130 / 180; // 130?
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <main+0x24c>)
 80010e0:	f44f 62f3 	mov.w	r2, #1944	; 0x798
 80010e4:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <main+0x248>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <main+0x258>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <main+0x24c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <main+0x258>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
      waitBlack(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 fc74 	bl	80019e8 <waitBlack>
      brake();
 8001100:	f000 fb86 	bl	8001810 <brake>
      HAL_Delay(500);
 8001104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001108:	f001 f8ee 	bl	80022e8 <HAL_Delay>
      unbrake();
 800110c:	f000 fb9e 	bl	800184c <unbrake>

      // 第 7 段，第二循跡線上坡
      trigger = 0;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <main+0x280>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
      // while (trigger < 2)
      // {
      //   lineFollower(100, 16.5, &trigger);
      // }
      // 向後轉正模式
      while (trigger < 2)
 8001116:	e004      	b.n	8001122 <main+0x1f6>
      {
        lineFollower(100, 18, &trigger);
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <main+0x280>)
 800111a:	492a      	ldr	r1, [pc, #168]	; (80011c4 <main+0x298>)
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <main+0x26c>)
 800111e:	f000 fc8f 	bl	8001a40 <lineFollower>
      while (trigger < 2)
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <main+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	ddf6      	ble.n	8001118 <main+0x1ec>
      }
      writeServo(90);
 800112a:	4819      	ldr	r0, [pc, #100]	; (8001190 <main+0x264>)
 800112c:	f000 fb0c 	bl	8001748 <writeServo>
      HAL_Delay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001134:	f001 f8d8 	bl	80022e8 <HAL_Delay>

      // 第 8 段，第一停止區
      setPower(0);
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	f000 fb30 	bl	80017a0 <setPower>
      brake();
 8001140:	f000 fb66 	bl	8001810 <brake>
      HAL_Delay(3500);
 8001144:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001148:	f001 f8ce 	bl	80022e8 <HAL_Delay>
      unbrake();
 800114c:	f000 fb7e 	bl	800184c <unbrake>

      // 第 9 段，循機至第二停止區
      lineFollowerBackward(3, 6, &trigger);
 8001150:	4a16      	ldr	r2, [pc, #88]	; (80011ac <main+0x280>)
 8001152:	4917      	ldr	r1, [pc, #92]	; (80011b0 <main+0x284>)
 8001154:	4817      	ldr	r0, [pc, #92]	; (80011b4 <main+0x288>)
 8001156:	f000 fe07 	bl	8001d68 <lineFollowerBackward>
      lineFollowerBackward(4, 0, &trigger);
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <main+0x280>)
 800115c:	f04f 0100 	mov.w	r1, #0
 8001160:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8001164:	f000 fe00 	bl	8001d68 <lineFollowerBackward>
      // brake();
      mode = 0;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <main+0x268>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
    switch (mode)
 800116e:	e726      	b.n	8000fbe <main+0x92>
 8001170:	20000150 	.word	0x20000150
 8001174:	20000154 	.word	0x20000154
 8001178:	20000158 	.word	0x20000158
 800117c:	2000015c 	.word	0x2000015c
 8001180:	40011000 	.word	0x40011000
 8001184:	2000006c 	.word	0x2000006c
 8001188:	200000b4 	.word	0x200000b4
 800118c:	200000fc 	.word	0x200000fc
 8001190:	42b40000 	.word	0x42b40000
 8001194:	20000160 	.word	0x20000160
 8001198:	42c80000 	.word	0x42c80000
 800119c:	20000010 	.word	0x20000010
 80011a0:	428e999a 	.word	0x428e999a
 80011a4:	2000003c 	.word	0x2000003c
 80011a8:	20000008 	.word	0x20000008
 80011ac:	2000016c 	.word	0x2000016c
 80011b0:	40c00000 	.word	0x40c00000
 80011b4:	40400000 	.word	0x40400000
 80011b8:	41880000 	.word	0x41880000
 80011bc:	42700000 	.word	0x42700000
 80011c0:	41580000 	.word	0x41580000
 80011c4:	41900000 	.word	0x41900000

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b094      	sub	sp, #80	; 0x50
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d2:	2228      	movs	r2, #40	; 0x28
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fcbe 	bl	8004b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121c:	4618      	mov	r0, r3
 800121e:	f001 ff6f 	bl	8003100 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001228:	f000 fe6e 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f002 f9dc 	bl	8003604 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001252:	f000 fe59 	bl	8001f08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001256:	2302      	movs	r3, #2
 8001258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fb53 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800126c:	f000 fe4c 	bl	8001f08 <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3750      	adds	r7, #80	; 0x50
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <MX_ADC1_Init+0xd0>)
 800128a:	4a30      	ldr	r2, [pc, #192]	; (800134c <MX_ADC1_Init+0xd4>)
 800128c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <MX_ADC1_Init+0xd0>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_ADC1_Init+0xd0>)
 8001296:	2200      	movs	r2, #0
 8001298:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <MX_ADC1_Init+0xd0>)
 800129c:	2200      	movs	r2, #0
 800129e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b4:	4824      	ldr	r0, [pc, #144]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012b6:	f001 f83b 	bl	8002330 <HAL_ADC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fe22 	bl	8001f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012d6:	f001 fac3 	bl	8002860 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012e0:	f000 fe12 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /**Common config
   */
  hadc1.Instance = ADC1;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <MX_ADC1_Init+0xd4>)
 80012e8:	601a      	str	r2, [r3, #0]
  //  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE; //扫描（多通道）模式=ENABLE、单次（单通道）模式=DISABLE 因为同时只采集一个通道 所以设置为DISABLE
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
                                              //  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
                                              //  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;    //连续=ENABLE、单次=DISABLE
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_ADC1_Init+0xd0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_ADC1_Init+0xd0>)
 8001304:	2201      	movs	r2, #1
 8001306:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_ADC1_Init+0xd0>)
 800130a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800130e:	61da      	str	r2, [r3, #28]
  //  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  //  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  //  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  //  hadc1.Init.BoostMode = DISABLE;
  //  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_ADC1_Init+0xd0>)
 8001312:	f001 f80d 	bl	8002330 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800131c:	f000 fdf4 	bl	8001f08 <Error_Handler>
  }

  /**Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8001320:	2301      	movs	r3, #1
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001324:	2301      	movs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  //  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  //  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  //  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_ADC1_Init+0xd0>)
 8001332:	f001 fa95 	bl	8002860 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800133c:	f000 fde4 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000003c 	.word	0x2000003c
 800134c:	40012400 	.word	0x40012400

08001350 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b092      	sub	sp, #72	; 0x48
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fbec 	bl	8004b58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <MX_TIM1_Init+0x130>)
 8001382:	4a40      	ldr	r2, [pc, #256]	; (8001484 <MX_TIM1_Init+0x134>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001386:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <MX_TIM1_Init+0x130>)
 8001388:	220f      	movs	r2, #15
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <MX_TIM1_Init+0x130>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001392:	4b3b      	ldr	r3, [pc, #236]	; (8001480 <MX_TIM1_Init+0x130>)
 8001394:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <MX_TIM1_Init+0x130>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b37      	ldr	r3, [pc, #220]	; (8001480 <MX_TIM1_Init+0x130>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <MX_TIM1_Init+0x130>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ac:	4834      	ldr	r0, [pc, #208]	; (8001480 <MX_TIM1_Init+0x130>)
 80013ae:	f002 fcbf 	bl	8003d30 <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013b8:	f000 fda6 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c8:	4619      	mov	r1, r3
 80013ca:	482d      	ldr	r0, [pc, #180]	; (8001480 <MX_TIM1_Init+0x130>)
 80013cc:	f003 fae4 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013d6:	f000 fd97 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <MX_TIM1_Init+0x130>)
 8001402:	f002 fe89 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800140c:	f000 fd7c 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	2204      	movs	r2, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <MX_TIM1_Init+0x130>)
 800141a:	f002 fe7d 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001424:	f000 fd70 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	2208      	movs	r2, #8
 800142e:	4619      	mov	r1, r3
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_TIM1_Init+0x130>)
 8001432:	f002 fe71 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800143c:	f000 fd64 	bl	8001f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM1_Init+0x130>)
 8001464:	f003 faf0 	bl	8004a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800146e:	f000 fd4b 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM1_Init+0x130>)
 8001474:	f000 fe12 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3748      	adds	r7, #72	; 0x48
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000006c 	.word	0x2000006c
 8001484:	40012c00 	.word	0x40012c00

08001488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014b4:	220f      	movs	r2, #15
 80014b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014c0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80014c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014d2:	4819      	ldr	r0, [pc, #100]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014d4:	f002 fc2c 	bl	8003d30 <HAL_TIM_PWM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014de:	f000 fd13 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	4619      	mov	r1, r3
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_TIM2_Init+0xb0>)
 80014f2:	f003 fa51 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014fc:	f000 fd04 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM2_Init+0xb0>)
 800151a:	f002 fdfd 	bl	8004118 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001524:	f000 fcf0 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM2_Init+0xb0>)
 800152a:	f000 fdb7 	bl	800209c <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000b4 	.word	0x200000b4

0800153c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  htim3.Instance = TIM3;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_TIM3_Init+0x98>)
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <MX_TIM3_Init+0x9c>)
 800155c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM3_Init+0x98>)
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <MX_TIM3_Init+0x9c>)
 8001562:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_TIM3_Init+0x98>)
 8001566:	220f      	movs	r2, #15
 8001568:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_TIM3_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_TIM3_Init+0x98>)
 8001572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001576:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_TIM3_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_TIM3_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_TIM3_Init+0x98>)
 8001586:	f002 fb37 	bl	8003bf8 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001590:	f000 fcba 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM3_Init+0x98>)
 80015a2:	f002 fe77 	bl	8004294 <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80015ac:	f000 fcac 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM3_Init+0x98>)
 80015be:	f003 f9eb 	bl	8004998 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80015c8:	f000 fc9e 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000fc 	.word	0x200000fc
 80015d8:	40000400 	.word	0x40000400

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <MX_GPIO_Init+0xd0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <MX_GPIO_Init+0xd0>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <MX_GPIO_Init+0xd0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <MX_GPIO_Init+0xd0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <MX_GPIO_Init+0xd0>)
 800160e:	f043 0320 	orr.w	r3, r3, #32
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_GPIO_Init+0xd0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_GPIO_Init+0xd0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <MX_GPIO_Init+0xd0>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	4816      	ldr	r0, [pc, #88]	; (80016b0 <MX_GPIO_Init+0xd4>)
 8001658:	f001 fd20 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <MX_GPIO_Init+0xd8>)
 8001664:	f001 fd1a 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2302      	movs	r3, #2
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0xd4>)
 8001682:	f001 fb8f 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_GPIO_Init+0xd8>)
 80016a0:	f001 fb80 	bl	8002da4 <HAL_GPIO_Init>

}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40010c00 	.word	0x40010c00

080016b8 <Board_Get_ADCChannelValue>:

/* USER CODE BEGIN 4 */
uint32_t Board_Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  ADC_ChannelConfTypeDef ADC_ChanConf;

  ADC_ChanConf.Channel = channel;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  ADC_ChanConf.Rank = ADC_REGULAR_RANK_1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  //    ADC_ChanConf.SingleDiff = ADC_SINGLE_ENDED;
  //    ADC_ChanConf.OffsetNumber = ADC_OFFSET_NONE;
  //    ADC_ChanConf.Offset = 0;

  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f001 f8c3 	bl	8002860 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 ff00 	bl	80024e0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10); //轮询转换
 80016e0:	210a      	movs	r1, #10
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 ffaa 	bl	800263c <HAL_ADC_PollForConversion>
  return (uint16_t)HAL_ADC_GetValue(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f001 f8ad 	bl	8002848 <HAL_ADC_GetValue>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29b      	uxth	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d111      	bne.n	8001732 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    ms++;
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001716:	6013      	str	r3, [r2, #0]
    if (ms == 1000)
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001720:	d107      	bne.n	8001732 <HAL_TIM_PeriodElapsedCallback+0x36>
    {
      ms = 0;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
      sec++;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001730:	6013      	str	r3, [r2, #0]
    }
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40000400 	.word	0x40000400
 8001740:	20000168 	.word	0x20000168
 8001744:	20000164 	.word	0x20000164

08001748 <writeServo>:

static void writeServo(float angle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <writeServo+0x44>)
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff f9fe 	bl	8000b54 <__aeabi_fmul>
 8001758:	4603      	mov	r3, r0
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <writeServo+0x48>)
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff faad 	bl	8000cbc <__aeabi_fdiv>
 8001762:	4603      	mov	r3, r0
 8001764:	490b      	ldr	r1, [pc, #44]	; (8001794 <writeServo+0x4c>)
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f8ec 	bl	8000944 <__addsf3>
 800176c:	4603      	mov	r3, r0
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fbb6 	bl	8000ee0 <__aeabi_f2iz>
 8001774:	4603      	mov	r3, r0
 8001776:	4a08      	ldr	r2, [pc, #32]	; (8001798 <writeServo+0x50>)
 8001778:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <writeServo+0x50>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <writeServo+0x54>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	44fa0000 	.word	0x44fa0000
 8001790:	43340000 	.word	0x43340000
 8001794:	43fa0000 	.word	0x43fa0000
 8001798:	20000150 	.word	0x20000150
 800179c:	2000006c 	.word	0x2000006c

080017a0 <setPower>:

static void setPower(float power)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7fe fe33 	bl	8000414 <__aeabi_f2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <setPower+0x60>)
 80017b4:	f7fe fe86 	bl	80004c4 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <setPower+0x64>)
 80017c6:	f7fe ffa7 	bl	8000718 <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <setPower+0x60>)
 80017d8:	f7fe fcbe 	bl	8000158 <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f880 	bl	80008e8 <__aeabi_d2iz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a07      	ldr	r2, [pc, #28]	; (8001808 <setPower+0x68>)
 80017ec:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <setPower+0x68>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <setPower+0x6c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	408f4000 	.word	0x408f4000
 8001804:	40590000 	.word	0x40590000
 8001808:	2000015c 	.word	0x2000015c
 800180c:	200000b4 	.word	0x200000b4

08001810 <brake>:

static void brake()
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <brake+0x30>)
 8001816:	f240 7229 	movw	r2, #1833	; 0x729
 800181a:	601a      	str	r2, [r3, #0]
  pulse_servo3 = 500 + 2000 * 60 / 180;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <brake+0x34>)
 800181e:	f240 428e 	movw	r2, #1166	; 0x48e
 8001822:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <brake+0x30>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <brake+0x38>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <brake+0x34>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <brake+0x38>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000154 	.word	0x20000154
 8001844:	20000158 	.word	0x20000158
 8001848:	2000006c 	.word	0x2000006c

0800184c <unbrake>:

static void unbrake()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 90 / 180;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <unbrake+0x30>)
 8001852:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001856:	601a      	str	r2, [r3, #0]
  pulse_servo3 = 500 + 2000 * 90 / 180;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <unbrake+0x34>)
 800185a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800185e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <unbrake+0x30>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <unbrake+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <unbrake+0x34>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <unbrake+0x38>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000154 	.word	0x20000154
 8001880:	20000158 	.word	0x20000158
 8001884:	2000006c 	.word	0x2000006c

08001888 <TRS>:

static void TRS(void) //微右轉
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  writeServo(112.5);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TRS+0x10>)
 800188e:	f7ff ff5b 	bl	8001748 <writeServo>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	42e10000 	.word	0x42e10000

0800189c <TRL>:

static void TRL(void) //急右轉
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  writeServo(135);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <TRL+0x10>)
 80018a2:	f7ff ff51 	bl	8001748 <writeServo>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	43070000 	.word	0x43070000

080018b0 <TLS>:

static void TLS(void) //微左轉
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  writeServo(67.5);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TLS+0x10>)
 80018b6:	f7ff ff47 	bl	8001748 <writeServo>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	42870000 	.word	0x42870000

080018c4 <TLL>:

static void TLL(void) //急左轉
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  writeServo(45);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TLL+0x10>)
 80018ca:	f7ff ff3d 	bl	8001748 <writeServo>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	42340000 	.word	0x42340000

080018d8 <DRS>:
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
}

static void DRS(void) //微右飄
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 100 / 180;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <DRS+0x34>)
 80018de:	f240 624b 	movw	r2, #1611	; 0x64b
 80018e2:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <DRS+0x34>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <DRS+0x38>)
 80018ea:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <DRS+0x34>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <DRS+0x3c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <DRS+0x38>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <DRS+0x3c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(100);
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <DRS+0x40>)
 8001902:	f7ff ff21 	bl	8001748 <writeServo>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000154 	.word	0x20000154
 8001910:	20000158 	.word	0x20000158
 8001914:	2000006c 	.word	0x2000006c
 8001918:	42c80000 	.word	0x42c80000

0800191c <DRL>:

static void DRL(void) //急右飄
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 110 / 180;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <DRL+0x34>)
 8001922:	f240 62ba 	movw	r2, #1722	; 0x6ba
 8001926:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <DRL+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a09      	ldr	r2, [pc, #36]	; (8001954 <DRL+0x38>)
 800192e:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <DRL+0x34>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <DRL+0x3c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <DRL+0x38>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <DRL+0x3c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(110);
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <DRL+0x40>)
 8001946:	f7ff feff 	bl	8001748 <writeServo>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000154 	.word	0x20000154
 8001954:	20000158 	.word	0x20000158
 8001958:	2000006c 	.word	0x2000006c
 800195c:	42dc0000 	.word	0x42dc0000

08001960 <DLS>:

static void DLS(void) //微左飄
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 80 / 180;
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <DLS+0x34>)
 8001966:	f240 526c 	movw	r2, #1388	; 0x56c
 800196a:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <DLS+0x34>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a09      	ldr	r2, [pc, #36]	; (8001998 <DLS+0x38>)
 8001972:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <DLS+0x34>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <DLS+0x3c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <DLS+0x38>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <DLS+0x3c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(80);
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <DLS+0x40>)
 800198a:	f7ff fedd 	bl	8001748 <writeServo>
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000154 	.word	0x20000154
 8001998:	20000158 	.word	0x20000158
 800199c:	2000006c 	.word	0x2000006c
 80019a0:	42a00000 	.word	0x42a00000

080019a4 <DLL>:

static void DLL(void) //急左飄
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 70 / 180;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <DLL+0x34>)
 80019aa:	f240 42fd 	movw	r2, #1277	; 0x4fd
 80019ae:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <DLL+0x34>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a09      	ldr	r2, [pc, #36]	; (80019dc <DLL+0x38>)
 80019b6:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <DLL+0x34>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <DLL+0x3c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <DLL+0x38>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <DLL+0x3c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(70);
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <DLL+0x40>)
 80019ce:	f7ff febb 	bl	8001748 <writeServo>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000154 	.word	0x20000154
 80019dc:	20000158 	.word	0x20000158
 80019e0:	2000006c 	.word	0x2000006c
 80019e4:	428c0000 	.word	0x428c0000

080019e8 <waitBlack>:
  mode = 0;
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MIN_PULSE_LENGTH);
}

static void waitBlack(int ch)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(&hadc1);
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <waitBlack+0x54>)
 80019f2:	f000 fd75 	bl	80024e0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80019f6:	2101      	movs	r1, #1
 80019f8:	4810      	ldr	r0, [pc, #64]	; (8001a3c <waitBlack+0x54>)
 80019fa:	f000 fe1f 	bl	800263c <HAL_ADC_PollForConversion>
  int value = Board_Get_ADCChannelValue(&hadc1, ch);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4619      	mov	r1, r3
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <waitBlack+0x54>)
 8001a04:	f7ff fe58 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]
  while (value < 1000) //變成白色之前狀態不變
 8001a0c:	e00d      	b.n	8001a2a <waitBlack+0x42>
  {
    HAL_ADC_Start(&hadc1);
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <waitBlack+0x54>)
 8001a10:	f000 fd66 	bl	80024e0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001a14:	2101      	movs	r1, #1
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <waitBlack+0x54>)
 8001a18:	f000 fe10 	bl	800263c <HAL_ADC_PollForConversion>
    value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <waitBlack+0x54>)
 8001a22:	f7ff fe49 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001a26:	4603      	mov	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]
  while (value < 1000) //變成白色之前狀態不變
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a30:	dbed      	blt.n	8001a0e <waitBlack+0x26>
  }
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000003c 	.word	0x2000003c

08001a40 <lineFollower>:

static void lineFollower(float operationTime, float power, int *tg)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  setPower(power);
 8001a4c:	68b8      	ldr	r0, [r7, #8]
 8001a4e:	f7ff fea7 	bl	80017a0 <setPower>
  sec = 0;
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <lineFollower+0x194>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
  while (sec <= operationTime)
 8001a58:	e15d      	b.n	8001d16 <lineFollower+0x2d6>
  {
    // HAL_TIM_PeriodElapsedCallback(&htim3);
    statecode = 0;
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <lineFollower+0x198>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);
 8001a60:	485e      	ldr	r0, [pc, #376]	; (8001bdc <lineFollower+0x19c>)
 8001a62:	f000 fd3d 	bl	80024e0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001a66:	2101      	movs	r1, #1
 8001a68:	485c      	ldr	r0, [pc, #368]	; (8001bdc <lineFollower+0x19c>)
 8001a6a:	f000 fde7 	bl	800263c <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	485a      	ldr	r0, [pc, #360]	; (8001bdc <lineFollower+0x19c>)
 8001a72:	f7ff fe21 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <lineFollower+0x1a0>)
 8001a7c:	601a      	str	r2, [r3, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4856      	ldr	r0, [pc, #344]	; (8001bdc <lineFollower+0x19c>)
 8001a82:	f7ff fe19 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <lineFollower+0x1a4>)
 8001a8c:	601a      	str	r2, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4852      	ldr	r0, [pc, #328]	; (8001bdc <lineFollower+0x19c>)
 8001a92:	f7ff fe11 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <lineFollower+0x1a8>)
 8001a9c:	601a      	str	r2, [r3, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	484e      	ldr	r0, [pc, #312]	; (8001bdc <lineFollower+0x19c>)
 8001aa2:	f7ff fe09 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b50      	ldr	r3, [pc, #320]	; (8001bec <lineFollower+0x1ac>)
 8001aac:	601a      	str	r2, [r3, #0]

    if (value0 > 1000)
 8001aae:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <lineFollower+0x1a0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab6:	dd05      	ble.n	8001ac4 <lineFollower+0x84>
      statecode = statecode | 0b1000; // 8
 8001ab8:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <lineFollower+0x198>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	4a45      	ldr	r2, [pc, #276]	; (8001bd8 <lineFollower+0x198>)
 8001ac2:	6013      	str	r3, [r2, #0]
    if (value1 > 1000)
 8001ac4:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <lineFollower+0x1a4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001acc:	dd05      	ble.n	8001ada <lineFollower+0x9a>
      statecode = statecode | 0b0100; // 4
 8001ace:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <lineFollower+0x198>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <lineFollower+0x198>)
 8001ad8:	6013      	str	r3, [r2, #0]
    if (value2 > 1000)
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <lineFollower+0x1a8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae2:	dd05      	ble.n	8001af0 <lineFollower+0xb0>
      statecode = statecode | 0b0010; // 2
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <lineFollower+0x198>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <lineFollower+0x198>)
 8001aee:	6013      	str	r3, [r2, #0]
    if (value3 > 1000)
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <lineFollower+0x1ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af8:	dd05      	ble.n	8001b06 <lineFollower+0xc6>
      statecode = statecode | 0b0001; // 1
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <lineFollower+0x198>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	4a35      	ldr	r2, [pc, #212]	; (8001bd8 <lineFollower+0x198>)
 8001b04:	6013      	str	r3, [r2, #0]

    tmp = (statecode & 0b1000) >> 3;
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <lineFollower+0x198>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	10db      	asrs	r3, r3, #3
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	4a37      	ldr	r2, [pc, #220]	; (8001bf0 <lineFollower+0x1b0>)
 8001b12:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0100) >> 2;
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <lineFollower+0x198>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	109b      	asrs	r3, r3, #2
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <lineFollower+0x1b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <lineFollower+0x1b0>)
 8001b26:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0010) >> 1;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <lineFollower+0x198>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	105b      	asrs	r3, r3, #1
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <lineFollower+0x1b0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <lineFollower+0x1b0>)
 8001b3a:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0001);
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <lineFollower+0x198>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0201 	and.w	r2, r3, #1
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <lineFollower+0x1b0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <lineFollower+0x1b0>)
 8001b4c:	6013      	str	r3, [r2, #0]
    if (tmp > 2)
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <lineFollower+0x1b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	dd02      	ble.n	8001b5c <lineFollower+0x11c>
    {
      statecode = 0b1111;
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <lineFollower+0x198>)
 8001b58:	220f      	movs	r2, #15
 8001b5a:	601a      	str	r2, [r3, #0]
    }

    switch (statecode)
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <lineFollower+0x198>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b0f      	cmp	r3, #15
 8001b62:	f200 80d1 	bhi.w	8001d08 <lineFollower+0x2c8>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <lineFollower+0x12c>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001bc5 	.word	0x08001bc5
 8001b70:	08001bbf 	.word	0x08001bbf
 8001b74:	08001bb9 	.word	0x08001bb9
 8001b78:	08001d09 	.word	0x08001d09
 8001b7c:	08001bb3 	.word	0x08001bb3
 8001b80:	08001d09 	.word	0x08001d09
 8001b84:	08001d09 	.word	0x08001d09
 8001b88:	08001d09 	.word	0x08001d09
 8001b8c:	08001bad 	.word	0x08001bad
 8001b90:	08001d09 	.word	0x08001d09
 8001b94:	08001d09 	.word	0x08001d09
 8001b98:	08001d09 	.word	0x08001d09
 8001b9c:	08001d09 	.word	0x08001d09
 8001ba0:	08001d09 	.word	0x08001d09
 8001ba4:	08001d09 	.word	0x08001d09
 8001ba8:	08001bcd 	.word	0x08001bcd
    {
    case 0b1000:
      TLL(); //急左轉
 8001bac:	f7ff fe8a 	bl	80018c4 <TLL>
      break;
 8001bb0:	e0aa      	b.n	8001d08 <lineFollower+0x2c8>
    case 0b0100:
      TLS(); //微左轉
 8001bb2:	f7ff fe7d 	bl	80018b0 <TLS>
      break;
 8001bb6:	e0a7      	b.n	8001d08 <lineFollower+0x2c8>
    case 0b0010:
      TRS(); //微右轉
 8001bb8:	f7ff fe66 	bl	8001888 <TRS>
      break;
 8001bbc:	e0a4      	b.n	8001d08 <lineFollower+0x2c8>
    case 0b0001:
      TRL(); //急右轉
 8001bbe:	f7ff fe6d 	bl	800189c <TRL>
      break;
 8001bc2:	e0a1      	b.n	8001d08 <lineFollower+0x2c8>
    case 0b0000:
      writeServo(90);
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <lineFollower+0x1b4>)
 8001bc6:	f7ff fdbf 	bl	8001748 <writeServo>
      break;
 8001bca:	e09d      	b.n	8001d08 <lineFollower+0x2c8>
    case 0b1111:
      writeServo(90);
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <lineFollower+0x1b4>)
 8001bce:	f7ff fdbb 	bl	8001748 <writeServo>
      while (tmp > 1) //變成白色之前狀態不變
 8001bd2:	e08e      	b.n	8001cf2 <lineFollower+0x2b2>
 8001bd4:	20000164 	.word	0x20000164
 8001bd8:	20000148 	.word	0x20000148
 8001bdc:	2000003c 	.word	0x2000003c
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004
 8001be8:	20000008 	.word	0x20000008
 8001bec:	2000000c 	.word	0x2000000c
 8001bf0:	2000014c 	.word	0x2000014c
 8001bf4:	42b40000 	.word	0x42b40000
      {
        inloop = 1;
 8001bf8:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <lineFollower+0x300>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
        statecode = 0;
 8001bfe:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <lineFollower+0x304>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start(&hadc1);
 8001c04:	4850      	ldr	r0, [pc, #320]	; (8001d48 <lineFollower+0x308>)
 8001c06:	f000 fc6b 	bl	80024e0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	484e      	ldr	r0, [pc, #312]	; (8001d48 <lineFollower+0x308>)
 8001c0e:	f000 fd15 	bl	800263c <HAL_ADC_PollForConversion>
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001c12:	2100      	movs	r1, #0
 8001c14:	484c      	ldr	r0, [pc, #304]	; (8001d48 <lineFollower+0x308>)
 8001c16:	f7ff fd4f 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <lineFollower+0x30c>)
 8001c20:	601a      	str	r2, [r3, #0]
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	4848      	ldr	r0, [pc, #288]	; (8001d48 <lineFollower+0x308>)
 8001c26:	f7ff fd47 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <lineFollower+0x310>)
 8001c30:	601a      	str	r2, [r3, #0]
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001c32:	2102      	movs	r1, #2
 8001c34:	4844      	ldr	r0, [pc, #272]	; (8001d48 <lineFollower+0x308>)
 8001c36:	f7ff fd3f 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <lineFollower+0x314>)
 8001c40:	601a      	str	r2, [r3, #0]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001c42:	2103      	movs	r1, #3
 8001c44:	4840      	ldr	r0, [pc, #256]	; (8001d48 <lineFollower+0x308>)
 8001c46:	f7ff fd37 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <lineFollower+0x318>)
 8001c50:	601a      	str	r2, [r3, #0]

        if (value0 > 1000)
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <lineFollower+0x30c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5a:	dd05      	ble.n	8001c68 <lineFollower+0x228>
          statecode = statecode | 0b1000; // 8
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <lineFollower+0x304>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	4a37      	ldr	r2, [pc, #220]	; (8001d44 <lineFollower+0x304>)
 8001c66:	6013      	str	r3, [r2, #0]
        if (value1 > 1000)
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <lineFollower+0x310>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c70:	dd05      	ble.n	8001c7e <lineFollower+0x23e>
          statecode = statecode | 0b0100; // 4
 8001c72:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <lineFollower+0x304>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <lineFollower+0x304>)
 8001c7c:	6013      	str	r3, [r2, #0]
        if (value2 > 1000)
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <lineFollower+0x314>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c86:	dd05      	ble.n	8001c94 <lineFollower+0x254>
          statecode = statecode | 0b0010; // 2
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <lineFollower+0x304>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	4a2c      	ldr	r2, [pc, #176]	; (8001d44 <lineFollower+0x304>)
 8001c92:	6013      	str	r3, [r2, #0]
        if (value3 > 1000)
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <lineFollower+0x318>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c9c:	dd05      	ble.n	8001caa <lineFollower+0x26a>
          statecode = statecode | 0b0001; // 1
 8001c9e:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <lineFollower+0x304>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <lineFollower+0x304>)
 8001ca8:	6013      	str	r3, [r2, #0]

        tmp = (statecode & 0b1000) >> 3;
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <lineFollower+0x304>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	10db      	asrs	r3, r3, #3
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	4a29      	ldr	r2, [pc, #164]	; (8001d5c <lineFollower+0x31c>)
 8001cb6:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0100) >> 2;
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <lineFollower+0x304>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	109b      	asrs	r3, r3, #2
 8001cbe:	f003 0201 	and.w	r2, r3, #1
 8001cc2:	4b26      	ldr	r3, [pc, #152]	; (8001d5c <lineFollower+0x31c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <lineFollower+0x31c>)
 8001cca:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0010) >> 1;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <lineFollower+0x304>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	105b      	asrs	r3, r3, #1
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <lineFollower+0x31c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <lineFollower+0x31c>)
 8001cde:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0001);
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <lineFollower+0x304>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0201 	and.w	r2, r3, #1
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <lineFollower+0x31c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <lineFollower+0x31c>)
 8001cf0:	6013      	str	r3, [r2, #0]
      while (tmp > 1) //變成白色之前狀態不變
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <lineFollower+0x31c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	f73f af7e 	bgt.w	8001bf8 <lineFollower+0x1b8>
      }
      *tg += 1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
      break;
 8001d06:	bf00      	nop
    }

    if (operationTime == 100)
 8001d08:	4915      	ldr	r1, [pc, #84]	; (8001d60 <lineFollower+0x320>)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff f8b6 	bl	8000e7c <__aeabi_fcmpeq>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <lineFollower+0x2f4>
  while (sec <= operationTime)
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <lineFollower+0x324>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fec6 	bl	8000aac <__aeabi_i2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff f8c7 	bl	8000eb8 <__aeabi_fcmpge>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f ae94 	bne.w	8001a5a <lineFollower+0x1a>
      break;
  }
}
 8001d32:	e000      	b.n	8001d36 <lineFollower+0x2f6>
      break;
 8001d34:	bf00      	nop
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000144 	.word	0x20000144
 8001d44:	20000148 	.word	0x20000148
 8001d48:	2000003c 	.word	0x2000003c
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004
 8001d54:	20000008 	.word	0x20000008
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	2000014c 	.word	0x2000014c
 8001d60:	42c80000 	.word	0x42c80000
 8001d64:	20000164 	.word	0x20000164

08001d68 <lineFollowerBackward>:

static void lineFollowerBackward(float operationTime, float power, int *tg)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  setPower(power);
 8001d74:	68b8      	ldr	r0, [r7, #8]
 8001d76:	f7ff fd13 	bl	80017a0 <setPower>
  sec = 0;
 8001d7a:	4b58      	ldr	r3, [pc, #352]	; (8001edc <lineFollowerBackward+0x174>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
  while (sec <= operationTime)
 8001d80:	e099      	b.n	8001eb6 <lineFollowerBackward+0x14e>
  {
    // HAL_TIM_PeriodElapsedCallback(&htim3);
    statecode = 0;
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);
 8001d88:	4856      	ldr	r0, [pc, #344]	; (8001ee4 <lineFollowerBackward+0x17c>)
 8001d8a:	f000 fba9 	bl	80024e0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4854      	ldr	r0, [pc, #336]	; (8001ee4 <lineFollowerBackward+0x17c>)
 8001d92:	f000 fc53 	bl	800263c <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001d96:	2100      	movs	r1, #0
 8001d98:	4852      	ldr	r0, [pc, #328]	; (8001ee4 <lineFollowerBackward+0x17c>)
 8001d9a:	f7ff fc8d 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b51      	ldr	r3, [pc, #324]	; (8001ee8 <lineFollowerBackward+0x180>)
 8001da4:	601a      	str	r2, [r3, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001da6:	2101      	movs	r1, #1
 8001da8:	484e      	ldr	r0, [pc, #312]	; (8001ee4 <lineFollowerBackward+0x17c>)
 8001daa:	f7ff fc85 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b4e      	ldr	r3, [pc, #312]	; (8001eec <lineFollowerBackward+0x184>)
 8001db4:	601a      	str	r2, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001db6:	2102      	movs	r1, #2
 8001db8:	484a      	ldr	r0, [pc, #296]	; (8001ee4 <lineFollowerBackward+0x17c>)
 8001dba:	f7ff fc7d 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <lineFollowerBackward+0x188>)
 8001dc4:	601a      	str	r2, [r3, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	4846      	ldr	r0, [pc, #280]	; (8001ee4 <lineFollowerBackward+0x17c>)
 8001dca:	f7ff fc75 	bl	80016b8 <Board_Get_ADCChannelValue>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <lineFollowerBackward+0x18c>)
 8001dd4:	601a      	str	r2, [r3, #0]

    if (value0 > 1000)
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <lineFollowerBackward+0x180>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dde:	dd05      	ble.n	8001dec <lineFollowerBackward+0x84>
      statecode = statecode | 0b0001; // 8
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001dea:	6013      	str	r3, [r2, #0]
    if (value1 > 1000)
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <lineFollowerBackward+0x184>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df4:	dd05      	ble.n	8001e02 <lineFollowerBackward+0x9a>
      statecode = statecode | 0b0010; // 4
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001e00:	6013      	str	r3, [r2, #0]
    if (value2 > 1000)
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <lineFollowerBackward+0x188>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e0a:	dd05      	ble.n	8001e18 <lineFollowerBackward+0xb0>
      statecode = statecode | 0b0100; // 2
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001e16:	6013      	str	r3, [r2, #0]
    if (value3 > 1000)
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <lineFollowerBackward+0x18c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e20:	dd05      	ble.n	8001e2e <lineFollowerBackward+0xc6>
      statecode = statecode | 0b1000; // 1
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001e2c:	6013      	str	r3, [r2, #0]

    switch (statecode)
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <lineFollowerBackward+0x178>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d83f      	bhi.n	8001eb6 <lineFollowerBackward+0x14e>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <lineFollowerBackward+0xd4>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e79 	.word	0x08001e79
 8001e40:	08001e73 	.word	0x08001e73
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	08001eb7 	.word	0x08001eb7
 8001e4c:	08001e67 	.word	0x08001e67
 8001e50:	08001eb7 	.word	0x08001eb7
 8001e54:	08001e81 	.word	0x08001e81
 8001e58:	08001eb7 	.word	0x08001eb7
 8001e5c:	08001e61 	.word	0x08001e61
    {
    case 0b1000:
      DLL(); //急左飄
 8001e60:	f7ff fda0 	bl	80019a4 <DLL>
      break;
 8001e64:	e027      	b.n	8001eb6 <lineFollowerBackward+0x14e>
    case 0b0100:
      DLS(); //微左飄
 8001e66:	f7ff fd7b 	bl	8001960 <DLS>
      break;
 8001e6a:	e024      	b.n	8001eb6 <lineFollowerBackward+0x14e>
    case 0b0010:
      DRS(); //微右飄
 8001e6c:	f7ff fd34 	bl	80018d8 <DRS>
      break;
 8001e70:	e021      	b.n	8001eb6 <lineFollowerBackward+0x14e>
    case 0b0001:
      DRL(); //急右飄
 8001e72:	f7ff fd53 	bl	800191c <DRL>
      break;
 8001e76:	e01e      	b.n	8001eb6 <lineFollowerBackward+0x14e>
    case 0b0000:
      writeServo(90);
 8001e78:	481f      	ldr	r0, [pc, #124]	; (8001ef8 <lineFollowerBackward+0x190>)
 8001e7a:	f7ff fc65 	bl	8001748 <writeServo>
      break;
 8001e7e:	e01a      	b.n	8001eb6 <lineFollowerBackward+0x14e>
    case 0b0110:
      pulse_servo2 = 500 + 2000 * 90 / 180;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <lineFollowerBackward+0x194>)
 8001e82:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e86:	601a      	str	r2, [r3, #0]
      pulse_servo3 = pulse_servo2;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <lineFollowerBackward+0x194>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <lineFollowerBackward+0x198>)
 8001e8e:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <lineFollowerBackward+0x194>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <lineFollowerBackward+0x19c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <lineFollowerBackward+0x198>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <lineFollowerBackward+0x19c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
      writeServo(90);
 8001ea4:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <lineFollowerBackward+0x190>)
 8001ea6:	f7ff fc4f 	bl	8001748 <writeServo>
      *tg += 1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	601a      	str	r2, [r3, #0]
      break;
 8001eb4:	bf00      	nop
  while (sec <= operationTime)
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <lineFollowerBackward+0x174>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fdf6 	bl	8000aac <__aeabi_i2f>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7fe fff7 	bl	8000eb8 <__aeabi_fcmpge>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f af58 	bne.w	8001d82 <lineFollowerBackward+0x1a>
    }

    if (operationTime == 100)
      brake;
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000164 	.word	0x20000164
 8001ee0:	20000148 	.word	0x20000148
 8001ee4:	2000003c 	.word	0x2000003c
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	42b40000 	.word	0x42b40000
 8001efc:	20000154 	.word	0x20000154
 8001f00:	20000158 	.word	0x20000158
 8001f04:	2000006c 	.word	0x2000006c

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <Error_Handler+0x8>
	...

08001f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_MspInit+0x5c>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <HAL_MspInit+0x5c>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6193      	str	r3, [r2, #24]
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_MspInit+0x5c>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_MspInit+0x5c>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_MspInit+0x5c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	61d3      	str	r3, [r2, #28]
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_MspInit+0x5c>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_MspInit+0x60>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_MspInit+0x60>)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000

08001f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <HAL_ADC_MspInit+0x6c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d121      	bne.n	8001fdc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_ADC_MspInit+0x70>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_ADC_MspInit+0x70>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_ADC_MspInit+0x70>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_ADC_MspInit+0x70>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <HAL_ADC_MspInit+0x70>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_ADC_MspInit+0x70>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fc8:	230f      	movs	r3, #15
 8001fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_ADC_MspInit+0x74>)
 8001fd8:	f000 fee4 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40012400 	.word	0x40012400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010800 	.word	0x40010800

08001ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_TIM_PWM_MspInit+0x58>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10c      	bne.n	800201c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_TIM_PWM_MspInit+0x5c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_TIM_PWM_MspInit+0x5c>)
 8002008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_TIM_PWM_MspInit+0x5c>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800201a:	e010      	b.n	800203e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002024:	d10b      	bne.n	800203e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_TIM_PWM_MspInit+0x5c>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_TIM_PWM_MspInit+0x5c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_TIM_PWM_MspInit+0x5c>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40021000 	.word	0x40021000

08002050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_TIM_Base_MspInit+0x44>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d113      	bne.n	800208a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_TIM_Base_MspInit+0x48>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <HAL_TIM_Base_MspInit+0x48>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_TIM_Base_MspInit+0x48>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	201d      	movs	r0, #29
 8002080:	f000 fe59 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002084:	201d      	movs	r0, #29
 8002086:	f000 fe72 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40000400 	.word	0x40000400
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a28      	ldr	r2, [pc, #160]	; (8002158 <HAL_TIM_MspPostInit+0xbc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d119      	bne.n	80020f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80020d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2302      	movs	r3, #2
 80020e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	481d      	ldr	r0, [pc, #116]	; (8002160 <HAL_TIM_MspPostInit+0xc4>)
 80020ea:	f000 fe5b 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020ee:	e02f      	b.n	8002150 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d12a      	bne.n	8002150 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_TIM_MspPostInit+0xc0>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0xc4>)
 8002128:	f000 fe3c 	bl	8002da4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_TIM_MspPostInit+0xc8>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_TIM_MspPostInit+0xc8>)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	6053      	str	r3, [r2, #4]
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40010800 	.word	0x40010800
 8002164:	40010000 	.word	0x40010000

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ae:	f000 f87f 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TIM3_IRQHandler+0x10>)
 80021be:	f001 fea3 	bl	8003f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000fc 	.word	0x200000fc

080021cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	; (8002210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	; (800221c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021fe:	f7ff ffe5 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f002 fc85 	bl	8004b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002206:	f7fe fe91 	bl	8000f2c <main>
  bx lr
 800220a:	4770      	bx	lr
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002214:	08004bc0 	.word	0x08004bc0
  ldr r2, =_sbss
 8002218:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800221c:	20000174 	.word	0x20000174

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x28>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fd73 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fe68 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fd8b 	bl	8002d8a <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f000 fd53 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000014 	.word	0x20000014
 80022a8:	2000001c 	.word	0x2000001c
 80022ac:	20000018 	.word	0x20000018

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x1c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x20>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_IncTick+0x20>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	2000001c 	.word	0x2000001c
 80022d0:	20000170 	.word	0x20000170

080022d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_GetTick+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000170 	.word	0x20000170

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffe0 	bl	80022d4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000001c 	.word	0x2000001c

08002330 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0be      	b.n	80024d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fe02 	bl	8001f78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fbc5 	bl	8002b04 <ADC_ConversionStop_Disable>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8099 	bne.w	80024be <HAL_ADC_Init+0x18e>
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8095 	bne.w	80024be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	f043 0202 	orr.w	r2, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7b1b      	ldrb	r3, [r3, #12]
 80023b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c8:	d003      	beq.n	80023d2 <HAL_ADC_Init+0xa2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_ADC_Init+0xa8>
 80023d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d6:	e000      	b.n	80023da <HAL_ADC_Init+0xaa>
 80023d8:	2300      	movs	r3, #0
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7d1b      	ldrb	r3, [r3, #20]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d119      	bne.n	800241c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7b1b      	ldrb	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	035a      	lsls	r2, r3, #13
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e00b      	b.n	800241c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_ADC_Init+0x1a8>)
 8002438:	4013      	ands	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	430b      	orrs	r3, r1
 8002442:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244c:	d003      	beq.n	8002456 <HAL_ADC_Init+0x126>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d104      	bne.n	8002460 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	3b01      	subs	r3, #1
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	430a      	orrs	r2, r1
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_ADC_Init+0x1ac>)
 800247c:	4013      	ands	r3, r2
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	d10b      	bne.n	800249c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800249a:	e018      	b.n	80024ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f023 0312 	bic.w	r3, r3, #18
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024bc:	e007      	b.n	80024ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	ffe1f7fd 	.word	0xffe1f7fd
 80024dc:	ff1f0efe 	.word	0xff1f0efe

080024e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Start+0x1a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e098      	b.n	800262c <HAL_ADC_Start+0x14c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 faa4 	bl	8002a50 <ADC_Enable>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 8087 	bne.w	8002622 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a41      	ldr	r2, [pc, #260]	; (8002634 <HAL_ADC_Start+0x154>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d105      	bne.n	800253e <HAL_ADC_Start+0x5e>
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_ADC_Start+0x158>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d115      	bne.n	800256a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d026      	beq.n	80025a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002560:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002568:	e01d      	b.n	80025a6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <HAL_ADC_Start+0x158>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_ADC_Start+0xaa>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_ADC_Start+0x154>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10d      	bne.n	80025a6 <HAL_ADC_Start+0xc6>
 800258a:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_ADC_Start+0x158>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800259e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f023 0206 	bic.w	r2, r3, #6
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80025be:	e002      	b.n	80025c6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0202 	mvn.w	r2, #2
 80025d6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025e6:	d113      	bne.n	8002610 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_ADC_Start+0x154>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_ADC_Start+0x158>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	e00c      	b.n	800262a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e003      	b.n	800262a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40012800 	.word	0x40012800
 8002638:	40012400 	.word	0x40012400

0800263c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002652:	f7ff fe3f 	bl	80022d4 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0d3      	b.n	8002826 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d131      	bne.n	80026f0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d12a      	bne.n	80026f0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800269a:	e021      	b.n	80026e0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a2:	d01d      	beq.n	80026e0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_ADC_PollForConversion+0x7e>
 80026aa:	f7ff fe13 	bl	80022d4 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d212      	bcs.n	80026e0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f043 0204 	orr.w	r2, r3, #4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0a2      	b.n	8002826 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0d6      	beq.n	800269c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ee:	e070      	b.n	80027d2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026f0:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <HAL_ADC_PollForConversion+0x1f4>)
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	2002      	movs	r0, #2
 80026f6:	f001 f9bf 	bl	8003a78 <HAL_RCCEx_GetPeriphCLKFreq>
 80026fa:	4603      	mov	r3, r0
 80026fc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6919      	ldr	r1, [r3, #16]
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_ADC_PollForConversion+0x1f8>)
 8002708:	400b      	ands	r3, r1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d118      	bne.n	8002740 <HAL_ADC_PollForConversion+0x104>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <HAL_ADC_PollForConversion+0x1fc>)
 8002716:	400b      	ands	r3, r1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d111      	bne.n	8002740 <HAL_ADC_PollForConversion+0x104>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_ADC_PollForConversion+0x200>)
 8002724:	400b      	ands	r3, r1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d108      	bne.n	800273c <HAL_ADC_PollForConversion+0x100>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68d9      	ldr	r1, [r3, #12]
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_ADC_PollForConversion+0x204>)
 8002732:	400b      	ands	r3, r1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_PollForConversion+0x100>
 8002738:	2314      	movs	r3, #20
 800273a:	e020      	b.n	800277e <HAL_ADC_PollForConversion+0x142>
 800273c:	2329      	movs	r3, #41	; 0x29
 800273e:	e01e      	b.n	800277e <HAL_ADC_PollForConversion+0x142>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_ADC_PollForConversion+0x200>)
 8002748:	400b      	ands	r3, r1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_ADC_PollForConversion+0x120>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68d9      	ldr	r1, [r3, #12]
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_ADC_PollForConversion+0x204>)
 8002756:	400b      	ands	r3, r1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00d      	beq.n	8002778 <HAL_ADC_PollForConversion+0x13c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6919      	ldr	r1, [r3, #16]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_ADC_PollForConversion+0x208>)
 8002764:	400b      	ands	r3, r1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_ADC_PollForConversion+0x140>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68d9      	ldr	r1, [r3, #12]
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <HAL_ADC_PollForConversion+0x208>)
 8002772:	400b      	ands	r3, r1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_ADC_PollForConversion+0x140>
 8002778:	2354      	movs	r3, #84	; 0x54
 800277a:	e000      	b.n	800277e <HAL_ADC_PollForConversion+0x142>
 800277c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002784:	e021      	b.n	80027ca <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278c:	d01a      	beq.n	80027c4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x168>
 8002794:	f7ff fd9e 	bl	80022d4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d20f      	bcs.n	80027c4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d90b      	bls.n	80027c4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f043 0204 	orr.w	r2, r3, #4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e030      	b.n	8002826 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3301      	adds	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d8d9      	bhi.n	8002786 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f06f 0212 	mvn.w	r2, #18
 80027da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027f6:	d115      	bne.n	8002824 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d111      	bne.n	8002824 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	bf00      	nop
 8002830:	20000014 	.word	0x20000014
 8002834:	24924924 	.word	0x24924924
 8002838:	00924924 	.word	0x00924924
 800283c:	12492492 	.word	0x12492492
 8002840:	00492492 	.word	0x00492492
 8002844:	00249249 	.word	0x00249249

08002848 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x20>
 800287c:	2302      	movs	r3, #2
 800287e:	e0dc      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1da>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d81c      	bhi.n	80028ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b05      	subs	r3, #5
 80028a2:	221f      	movs	r2, #31
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4019      	ands	r1, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b05      	subs	r3, #5
 80028bc:	fa00 f203 	lsl.w	r2, r0, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34
 80028c8:	e03c      	b.n	8002944 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d81c      	bhi.n	800290c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b23      	subs	r3, #35	; 0x23
 80028e4:	221f      	movs	r2, #31
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4019      	ands	r1, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	3b23      	subs	r3, #35	; 0x23
 80028fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
 800290a:	e01b      	b.n	8002944 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b41      	subs	r3, #65	; 0x41
 800291e:	221f      	movs	r2, #31
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	4019      	ands	r1, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b41      	subs	r3, #65	; 0x41
 8002938:	fa00 f203 	lsl.w	r2, r0, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b09      	cmp	r3, #9
 800294a:	d91c      	bls.n	8002986 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68d9      	ldr	r1, [r3, #12]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	3b1e      	subs	r3, #30
 800295e:	2207      	movs	r2, #7
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	4019      	ands	r1, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6898      	ldr	r0, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	3b1e      	subs	r3, #30
 8002978:	fa00 f203 	lsl.w	r2, r0, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	e019      	b.n	80029ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6919      	ldr	r1, [r3, #16]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	2207      	movs	r2, #7
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	4019      	ands	r1, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6898      	ldr	r0, [r3, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d003      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029c6:	2b11      	cmp	r3, #17
 80029c8:	d132      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_ADC_ConfigChannel+0x1e4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d125      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d126      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d11a      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_ADC_ConfigChannel+0x1e8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_ADC_ConfigChannel+0x1ec>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	0c9a      	lsrs	r2, r3, #18
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x1b2>
 8002a1e:	e007      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40012400 	.word	0x40012400
 8002a48:	20000014 	.word	0x20000014
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d040      	beq.n	8002af0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <ADC_Enable+0xac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <ADC_Enable+0xb0>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9b      	lsrs	r3, r3, #18
 8002a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a8c:	e002      	b.n	8002a94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f9      	bne.n	8002a8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a9a:	f7ff fc1b 	bl	80022d4 <HAL_GetTick>
 8002a9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002aa0:	e01f      	b.n	8002ae2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aa2:	f7ff fc17 	bl	80022d4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d918      	bls.n	8002ae2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d011      	beq.n	8002ae2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e007      	b.n	8002af2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d1d8      	bne.n	8002aa2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000014 	.word	0x20000014
 8002b00:	431bde83 	.word	0x431bde83

08002b04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d12e      	bne.n	8002b7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2e:	f7ff fbd1 	bl	80022d4 <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b34:	e01b      	b.n	8002b6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b36:	f7ff fbcd 	bl	80022d4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d914      	bls.n	8002b6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10d      	bne.n	8002b6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d0dc      	beq.n	8002b36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <__NVIC_SetPriorityGrouping+0x44>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 0307 	and.w	r3, r3, #7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0b      	blt.n	8002c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4906      	ldr	r1, [pc, #24]	; (8002c20 <__NVIC_EnableIRQ+0x34>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d00:	f7ff ff90 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff2d 	bl	8002b88 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff42 	bl	8002bd0 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff90 	bl	8002c78 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5f 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff35 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b08b      	sub	sp, #44	; 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db6:	e161      	b.n	800307c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002db8:	2201      	movs	r2, #1
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	f040 8150 	bne.w	8003076 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a97      	ldr	r2, [pc, #604]	; (8003038 <HAL_GPIO_Init+0x294>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d05e      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002de0:	4a95      	ldr	r2, [pc, #596]	; (8003038 <HAL_GPIO_Init+0x294>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d875      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002de6:	4a95      	ldr	r2, [pc, #596]	; (800303c <HAL_GPIO_Init+0x298>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d058      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002dec:	4a93      	ldr	r2, [pc, #588]	; (800303c <HAL_GPIO_Init+0x298>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d86f      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002df2:	4a93      	ldr	r2, [pc, #588]	; (8003040 <HAL_GPIO_Init+0x29c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d052      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002df8:	4a91      	ldr	r2, [pc, #580]	; (8003040 <HAL_GPIO_Init+0x29c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d869      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002dfe:	4a91      	ldr	r2, [pc, #580]	; (8003044 <HAL_GPIO_Init+0x2a0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04c      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002e04:	4a8f      	ldr	r2, [pc, #572]	; (8003044 <HAL_GPIO_Init+0x2a0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d863      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002e0a:	4a8f      	ldr	r2, [pc, #572]	; (8003048 <HAL_GPIO_Init+0x2a4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d046      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002e10:	4a8d      	ldr	r2, [pc, #564]	; (8003048 <HAL_GPIO_Init+0x2a4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d85d      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002e16:	2b12      	cmp	r3, #18
 8002e18:	d82a      	bhi.n	8002e70 <HAL_GPIO_Init+0xcc>
 8002e1a:	2b12      	cmp	r3, #18
 8002e1c:	d859      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_GPIO_Init+0x80>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e9f 	.word	0x08002e9f
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	08002e8b 	.word	0x08002e8b
 8002e30:	08002ecd 	.word	0x08002ecd
 8002e34:	08002ed3 	.word	0x08002ed3
 8002e38:	08002ed3 	.word	0x08002ed3
 8002e3c:	08002ed3 	.word	0x08002ed3
 8002e40:	08002ed3 	.word	0x08002ed3
 8002e44:	08002ed3 	.word	0x08002ed3
 8002e48:	08002ed3 	.word	0x08002ed3
 8002e4c:	08002ed3 	.word	0x08002ed3
 8002e50:	08002ed3 	.word	0x08002ed3
 8002e54:	08002ed3 	.word	0x08002ed3
 8002e58:	08002ed3 	.word	0x08002ed3
 8002e5c:	08002ed3 	.word	0x08002ed3
 8002e60:	08002ed3 	.word	0x08002ed3
 8002e64:	08002ed3 	.word	0x08002ed3
 8002e68:	08002e81 	.word	0x08002e81
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	4a76      	ldr	r2, [pc, #472]	; (800304c <HAL_GPIO_Init+0x2a8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e76:	e02c      	b.n	8002ed2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	623b      	str	r3, [r7, #32]
          break;
 8002e7e:	e029      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	3304      	adds	r3, #4
 8002e86:	623b      	str	r3, [r7, #32]
          break;
 8002e88:	e024      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	623b      	str	r3, [r7, #32]
          break;
 8002e92:	e01f      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	623b      	str	r3, [r7, #32]
          break;
 8002e9c:	e01a      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	623b      	str	r3, [r7, #32]
          break;
 8002eaa:	e013      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	611a      	str	r2, [r3, #16]
          break;
 8002ebe:	e009      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	615a      	str	r2, [r3, #20]
          break;
 8002eca:	e003      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
          break;
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          break;
 8002ed2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
 8002ed8:	d801      	bhi.n	8002ede <HAL_GPIO_Init+0x13a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_Init+0x13e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2bff      	cmp	r3, #255	; 0xff
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_GPIO_Init+0x14c>
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	e002      	b.n	8002ef6 <HAL_GPIO_Init+0x152>
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	3b08      	subs	r3, #8
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	210f      	movs	r1, #15
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80a9 	beq.w	8003076 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f24:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_GPIO_Init+0x2ac>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a49      	ldr	r2, [pc, #292]	; (8003050 <HAL_GPIO_Init+0x2ac>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_GPIO_Init+0x2ac>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f3c:	4a45      	ldr	r2, [pc, #276]	; (8003054 <HAL_GPIO_Init+0x2b0>)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3d      	ldr	r2, [pc, #244]	; (8003058 <HAL_GPIO_Init+0x2b4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00d      	beq.n	8002f84 <HAL_GPIO_Init+0x1e0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3c      	ldr	r2, [pc, #240]	; (800305c <HAL_GPIO_Init+0x2b8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <HAL_GPIO_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_GPIO_Init+0x2bc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <HAL_GPIO_Init+0x1d8>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e004      	b.n	8002f86 <HAL_GPIO_Init+0x1e2>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e002      	b.n	8002f86 <HAL_GPIO_Init+0x1e2>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_GPIO_Init+0x1e2>
 8002f84:	2300      	movs	r3, #0
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	f002 0203 	and.w	r2, r2, #3
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	4093      	lsls	r3, r2
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f96:	492f      	ldr	r1, [pc, #188]	; (8003054 <HAL_GPIO_Init+0x2b0>)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	492b      	ldr	r1, [pc, #172]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4927      	ldr	r1, [pc, #156]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4921      	ldr	r1, [pc, #132]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fe6:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	491d      	ldr	r1, [pc, #116]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	4917      	ldr	r1, [pc, #92]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	43db      	mvns	r3, r3
 8003016:	4913      	ldr	r1, [pc, #76]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8003018:	4013      	ands	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	490d      	ldr	r1, [pc, #52]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	60cb      	str	r3, [r1, #12]
 8003034:	e01f      	b.n	8003076 <HAL_GPIO_Init+0x2d2>
 8003036:	bf00      	nop
 8003038:	10320000 	.word	0x10320000
 800303c:	10310000 	.word	0x10310000
 8003040:	10220000 	.word	0x10220000
 8003044:	10210000 	.word	0x10210000
 8003048:	10120000 	.word	0x10120000
 800304c:	10110000 	.word	0x10110000
 8003050:	40021000 	.word	0x40021000
 8003054:	40010000 	.word	0x40010000
 8003058:	40010800 	.word	0x40010800
 800305c:	40010c00 	.word	0x40010c00
 8003060:	40011000 	.word	0x40011000
 8003064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_GPIO_Init+0x2f4>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	43db      	mvns	r3, r3
 8003070:	4909      	ldr	r1, [pc, #36]	; (8003098 <HAL_GPIO_Init+0x2f4>)
 8003072:	4013      	ands	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae96 	bne.w	8002db8 <HAL_GPIO_Init+0x14>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	372c      	adds	r7, #44	; 0x2c
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4013      	ands	r3, r2
 80030e4:	041a      	lsls	r2, r3, #16
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43d9      	mvns	r1, r3
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	400b      	ands	r3, r1
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e272      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8087 	beq.w	800322e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003120:	4b92      	ldr	r3, [pc, #584]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b04      	cmp	r3, #4
 800312a:	d00c      	beq.n	8003146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800312c:	4b8f      	ldr	r3, [pc, #572]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d112      	bne.n	800315e <HAL_RCC_OscConfig+0x5e>
 8003138:	4b8c      	ldr	r3, [pc, #560]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d10b      	bne.n	800315e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003146:	4b89      	ldr	r3, [pc, #548]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d06c      	beq.n	800322c <HAL_RCC_OscConfig+0x12c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d168      	bne.n	800322c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e24c      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x76>
 8003168:	4b80      	ldr	r3, [pc, #512]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a7f      	ldr	r2, [pc, #508]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e02e      	b.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x98>
 800317e:	4b7b      	ldr	r3, [pc, #492]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7a      	ldr	r2, [pc, #488]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b78      	ldr	r3, [pc, #480]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a77      	ldr	r2, [pc, #476]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e01d      	b.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0xbc>
 80031a2:	4b72      	ldr	r3, [pc, #456]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a71      	ldr	r2, [pc, #452]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6e      	ldr	r2, [pc, #440]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 80031bc:	4b6b      	ldr	r3, [pc, #428]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a6a      	ldr	r2, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a67      	ldr	r2, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff f87a 	bl	80022d4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7ff f876 	bl	80022d4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e200      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b5d      	ldr	r3, [pc, #372]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe4>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7ff f866 	bl	80022d4 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7ff f862 	bl	80022d4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e1ec      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x10c>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d063      	beq.n	8003302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800323a:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003246:	4b49      	ldr	r3, [pc, #292]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	d11c      	bne.n	800328c <HAL_RCC_OscConfig+0x18c>
 8003252:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x176>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d001      	beq.n	8003276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e1c0      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003276:	4b3d      	ldr	r3, [pc, #244]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4939      	ldr	r1, [pc, #228]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	e03a      	b.n	8003302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7ff f81b 	bl	80022d4 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a2:	f7ff f817 	bl	80022d4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1a1      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c0:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4927      	ldr	r1, [pc, #156]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
 80032d4:	e015      	b.n	8003302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fffa 	bl	80022d4 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7fe fff6 	bl	80022d4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e180      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03a      	beq.n	8003384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d019      	beq.n	800334a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_RCC_OscConfig+0x274>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331c:	f7fe ffda 	bl	80022d4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003324:	f7fe ffd6 	bl	80022d4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e160      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003342:	2001      	movs	r0, #1
 8003344:	f000 fac4 	bl	80038d0 <RCC_Delay>
 8003348:	e01c      	b.n	8003384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_OscConfig+0x274>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7fe ffc0 	bl	80022d4 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003356:	e00f      	b.n	8003378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fe ffbc 	bl	80022d4 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d908      	bls.n	8003378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e146      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	42420000 	.word	0x42420000
 8003374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e9      	bne.n	8003358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a6 	beq.w	80034de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4b85      	ldr	r3, [pc, #532]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ca:	4b7f      	ldr	r3, [pc, #508]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7e      	ldr	r2, [pc, #504]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7fe ff7d 	bl	80022d4 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fe ff79 	bl	80022d4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b64      	cmp	r3, #100	; 0x64
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e103      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x312>
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4a6e      	ldr	r2, [pc, #440]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6213      	str	r3, [r2, #32]
 8003410:	e02d      	b.n	800346e <HAL_RCC_OscConfig+0x36e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x334>
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a69      	ldr	r2, [pc, #420]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6213      	str	r3, [r2, #32]
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a66      	ldr	r2, [pc, #408]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	e01c      	b.n	800346e <HAL_RCC_OscConfig+0x36e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d10c      	bne.n	8003456 <HAL_RCC_OscConfig+0x356>
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4a60      	ldr	r2, [pc, #384]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6213      	str	r3, [r2, #32]
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0x36e>
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4a5a      	ldr	r2, [pc, #360]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6213      	str	r3, [r2, #32]
 8003462:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d015      	beq.n	80034a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003476:	f7fe ff2d 	bl	80022d4 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe ff29 	bl	80022d4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0b1      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <HAL_RCC_OscConfig+0x37e>
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fe ff17 	bl	80022d4 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe ff13 	bl	80022d4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e09b      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4a3b      	ldr	r2, [pc, #236]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8087 	beq.w	80035f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d061      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d146      	bne.n	800358a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b33      	ldr	r3, [pc, #204]	; (80035cc <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fe fee7 	bl	80022d4 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe fee3 	bl	80022d4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e06d      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003530:	d108      	bne.n	8003544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003544:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a19      	ldr	r1, [r3, #32]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	430b      	orrs	r3, r1
 8003556:	491b      	ldr	r1, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4cc>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe feb7 	bl	80022d4 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe feb3 	bl	80022d4 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e03d      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x46a>
 8003588:	e035      	b.n	80035f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <HAL_RCC_OscConfig+0x4cc>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fea0 	bl	80022d4 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe fe9c 	bl	80022d4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e026      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x498>
 80035b6:	e01e      	b.n	80035f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e019      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40007000 	.word	0x40007000
 80035cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x500>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d0      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d910      	bls.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4965      	ldr	r1, [pc, #404]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800366a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d040      	beq.n	8003724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d115      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e073      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06b      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4936      	ldr	r1, [pc, #216]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe fdee 	bl	80022d4 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe fdea 	bl	80022d4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e053      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d210      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1cc>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1d0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fd4c 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08004ba0 	.word	0x08004ba0
 80037d0:	20000014 	.word	0x20000014
 80037d4:	20000018 	.word	0x20000018

080037d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b490      	push	{r4, r7}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_RCC_GetSysClockFreq+0xac>)
 80037e0:	1d3c      	adds	r4, r7, #4
 80037e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037e8:	f240 2301 	movw	r3, #513	; 0x201
 80037ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003802:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b04      	cmp	r3, #4
 8003810:	d002      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x40>
 8003812:	2b08      	cmp	r3, #8
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x46>
 8003816:	e02b      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_RCC_GetSysClockFreq+0xb4>)
 800381a:	623b      	str	r3, [r7, #32]
      break;
 800381c:	e02b      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	0c9b      	lsrs	r3, r3, #18
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3328      	adds	r3, #40	; 0x28
 8003828:	443b      	add	r3, r7
 800382a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800382e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb0>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0c5b      	lsrs	r3, r3, #17
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	3328      	adds	r3, #40	; 0x28
 8003846:	443b      	add	r3, r7
 8003848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800384c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003852:	fb03 f202 	mul.w	r2, r3, r2
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	e004      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	623b      	str	r3, [r7, #32]
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003872:	623b      	str	r3, [r7, #32]
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	6a3b      	ldr	r3, [r7, #32]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc90      	pop	{r4, r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	08004b80 	.word	0x08004b80
 8003888:	40021000 	.word	0x40021000
 800388c:	007a1200 	.word	0x007a1200
 8003890:	003d0900 	.word	0x003d0900

08003894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b02      	ldr	r3, [pc, #8]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	20000014 	.word	0x20000014

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff fff2 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08004bb0 	.word	0x08004bb0

080038d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RCC_Delay+0x34>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <RCC_Delay+0x38>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0a5b      	lsrs	r3, r3, #9
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038ec:	bf00      	nop
  }
  while (Delay --);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	60fa      	str	r2, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <RCC_Delay+0x1c>
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000014 	.word	0x20000014
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d07d      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b4c      	ldr	r3, [pc, #304]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	61d3      	str	r3, [r2, #28]
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d118      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396c:	f7fe fcb2 	bl	80022d4 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	e008      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe fcae 	bl	80022d4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e06d      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d027      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b0:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039c6:	4a29      	ldr	r2, [pc, #164]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fe fc7d 	bl	80022d4 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fe fc79 	bl	80022d4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e036      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ee      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4917      	ldr	r1, [pc, #92]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	490b      	ldr	r1, [pc, #44]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40007000 	.word	0x40007000
 8003a74:	42420440 	.word	0x42420440

08003a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b08d      	sub	sp, #52	; 0x34
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a80:	4b58      	ldr	r3, [pc, #352]	; (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003a82:	f107 040c 	add.w	r4, r7, #12
 8003a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a8c:	f240 2301 	movw	r3, #513	; 0x201
 8003a90:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	f200 808e 	bhi.w	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d049      	beq.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d079      	beq.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ac0:	e086      	b.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003ac2:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ac8:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07f      	beq.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	0c9b      	lsrs	r3, r3, #18
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	3330      	adds	r3, #48	; 0x30
 8003ade:	443b      	add	r3, r7
 8003ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ae4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003af0:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c5b      	lsrs	r3, r3, #17
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	3330      	adds	r3, #48	; 0x30
 8003afc:	443b      	add	r3, r7
 8003afe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b0e:	4a37      	ldr	r2, [pc, #220]	; (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b36:	d102      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b3c:	e04a      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b4c:	e042      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5e:	d108      	bne.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b70:	e01f      	b.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003b8a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b90:	e00f      	b.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003baa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bb0:	e012      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003bb2:	e011      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003bb4:	f7ff fe78 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0b9b      	lsrs	r3, r3, #14
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003bd8:	bf00      	nop
    }
  }
  return (frequency);
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3734      	adds	r7, #52	; 0x34
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	08004b90 	.word	0x08004b90
 8003be8:	40021000 	.word	0x40021000
 8003bec:	007a1200 	.word	0x007a1200
 8003bf0:	003d0900 	.word	0x003d0900
 8003bf4:	aaaaaaab 	.word	0xaaaaaaab

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e041      	b.n	8003c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fa16 	bl	8002050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fc14 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e035      	b.n	8003d1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_TIM_Base_Start_IT+0x90>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x4e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d004      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x4e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <HAL_TIM_Base_Start_IT+0x94>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	d010      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	e007      	b.n	8003d1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40000400 	.word	0x40000400

08003d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe f94a 	bl	8001ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fb78 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e059      	b.n	8003ef6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x82>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fd64 	bl	8004950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_TIM_PWM_Start+0x130>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <HAL_TIM_PWM_Start+0x130>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0xf0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0xf0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <HAL_TIM_PWM_Start+0x134>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d111      	bne.n	8003ee4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d010      	beq.n	8003ef4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee2:	e007      	b.n	8003ef4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400

08003f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d122      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d11b      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0202 	mvn.w	r2, #2
 8003f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa6f 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa62 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa71 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0204 	mvn.w	r2, #4
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa45 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa38 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa47 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0208 	mvn.w	r2, #8
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa1b 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa0e 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa1d 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b10      	cmp	r3, #16
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b10      	cmp	r3, #16
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0210 	mvn.w	r2, #16
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2208      	movs	r2, #8
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9f1 	bl	800442e <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9e4 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f9f3 	bl	8004440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0201 	mvn.w	r2, #1
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fb38 	bl	80016fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d10e      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d107      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fd22 	bl	8004afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9b7 	bl	8004452 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0220 	mvn.w	r2, #32
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fced 	bl	8004aea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800412e:	2302      	movs	r3, #2
 8004130:	e0ac      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	f200 809f 	bhi.w	8004280 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800417d 	.word	0x0800417d
 800414c:	08004281 	.word	0x08004281
 8004150:	08004281 	.word	0x08004281
 8004154:	08004281 	.word	0x08004281
 8004158:	080041bd 	.word	0x080041bd
 800415c:	08004281 	.word	0x08004281
 8004160:	08004281 	.word	0x08004281
 8004164:	08004281 	.word	0x08004281
 8004168:	080041ff 	.word	0x080041ff
 800416c:	08004281 	.word	0x08004281
 8004170:	08004281 	.word	0x08004281
 8004174:	08004281 	.word	0x08004281
 8004178:	0800423f 	.word	0x0800423f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f9c6 	bl	8004514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0208 	orr.w	r2, r2, #8
 8004196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6999      	ldr	r1, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	619a      	str	r2, [r3, #24]
      break;
 80041ba:	e062      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fa0c 	bl	80045e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e041      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fa55 	bl	80046b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0208 	orr.w	r2, r2, #8
 8004218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0204 	bic.w	r2, r2, #4
 8004228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	61da      	str	r2, [r3, #28]
      break;
 800423c:	e021      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa9f 	bl	8004788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	61da      	str	r2, [r3, #28]
      break;
 800427e:	e000      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004280:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_ConfigClockSource+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0b3      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x180>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e4:	d03e      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0xd0>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	f200 8087 	bhi.w	80043fc <HAL_TIM_ConfigClockSource+0x168>
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	f000 8085 	beq.w	8004400 <HAL_TIM_ConfigClockSource+0x16c>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d87f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 80042fc:	2b70      	cmp	r3, #112	; 0x70
 80042fe:	d01a      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xa2>
 8004300:	2b70      	cmp	r3, #112	; 0x70
 8004302:	d87b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d050      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x116>
 8004308:	2b60      	cmp	r3, #96	; 0x60
 800430a:	d877      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 800430c:	2b50      	cmp	r3, #80	; 0x50
 800430e:	d03c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xf6>
 8004310:	2b50      	cmp	r3, #80	; 0x50
 8004312:	d873      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d058      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x136>
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d86f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 800431c:	2b30      	cmp	r3, #48	; 0x30
 800431e:	d064      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x156>
 8004320:	2b30      	cmp	r3, #48	; 0x30
 8004322:	d86b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d060      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x156>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d867      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x156>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d05a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004334:	e062      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f000 fae4 	bl	8004912 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004358:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	609a      	str	r2, [r3, #8]
      break;
 8004362:	e04e      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6899      	ldr	r1, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f000 facd 	bl	8004912 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e03b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	461a      	mov	r2, r3
 8004398:	f000 fa44 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2150      	movs	r1, #80	; 0x50
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa9b 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80043a8:	e02b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 fa62 	bl	8004880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2160      	movs	r1, #96	; 0x60
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa8b 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80043c8:	e01b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 fa24 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa7b 	bl	80048de <TIM_ITRx_SetConfig>
      break;
 80043e8:	e00b      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f000 fa72 	bl	80048de <TIM_ITRx_SetConfig>
        break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004400:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <TIM_Base_SetConfig+0xa8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x28>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x28>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a22      	ldr	r2, [pc, #136]	; (8004510 <TIM_Base_SetConfig+0xac>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1a      	ldr	r2, [pc, #104]	; (800450c <TIM_Base_SetConfig+0xa8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_Base_SetConfig+0x52>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d003      	beq.n	80044b6 <TIM_Base_SetConfig+0x52>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <TIM_Base_SetConfig+0xac>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a07      	ldr	r2, [pc, #28]	; (800450c <TIM_Base_SetConfig+0xa8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	615a      	str	r2, [r3, #20]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40000400 	.word	0x40000400

08004514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0302 	bic.w	r3, r3, #2
 800455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <TIM_OC1_SetConfig+0xc8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10c      	bne.n	800458a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0308 	bic.w	r3, r3, #8
 8004576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <TIM_OC1_SetConfig+0xc8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d111      	bne.n	80045b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40012c00 	.word	0x40012c00

080045e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0210 	bic.w	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <TIM_OC2_SetConfig+0xd0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_OC2_SetConfig+0xd0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d113      	bne.n	800468c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800466a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00

080046b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <TIM_OC3_SetConfig+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d10d      	bne.n	800472e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800472c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <TIM_OC3_SetConfig+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d113      	bne.n	800475e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800473c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40012c00 	.word	0x40012c00

08004788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	031b      	lsls	r3, r3, #12
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0f      	ldr	r2, [pc, #60]	; (8004820 <TIM_OC4_SetConfig+0x98>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d109      	bne.n	80047fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	40012c00 	.word	0x40012c00

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 0210 	bic.w	r2, r3, #16
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	031b      	lsls	r3, r3, #12
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f043 0307 	orr.w	r3, r3, #7
 8004900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800492c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	021a      	lsls	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	431a      	orrs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4313      	orrs	r3, r2
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	609a      	str	r2, [r3, #8]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2201      	movs	r2, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	43db      	mvns	r3, r3
 8004972:	401a      	ands	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e041      	b.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d004      	beq.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10c      	bne.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400

08004a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e03d      	b.n	8004ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr

08004aea <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
	...

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	2600      	movs	r6, #0
 8004b14:	4d0c      	ldr	r5, [pc, #48]	; (8004b48 <__libc_init_array+0x38>)
 8004b16:	4c0d      	ldr	r4, [pc, #52]	; (8004b4c <__libc_init_array+0x3c>)
 8004b18:	1b64      	subs	r4, r4, r5
 8004b1a:	10a4      	asrs	r4, r4, #2
 8004b1c:	42a6      	cmp	r6, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	f000 f822 	bl	8004b68 <_init>
 8004b24:	2600      	movs	r6, #0
 8004b26:	4d0a      	ldr	r5, [pc, #40]	; (8004b50 <__libc_init_array+0x40>)
 8004b28:	4c0a      	ldr	r4, [pc, #40]	; (8004b54 <__libc_init_array+0x44>)
 8004b2a:	1b64      	subs	r4, r4, r5
 8004b2c:	10a4      	asrs	r4, r4, #2
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b38:	4798      	blx	r3
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b42:	4798      	blx	r3
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08004bb8 	.word	0x08004bb8
 8004b4c:	08004bb8 	.word	0x08004bb8
 8004b50:	08004bb8 	.word	0x08004bb8
 8004b54:	08004bbc 	.word	0x08004bbc

08004b58 <memset>:
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4402      	add	r2, r0
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <memset+0xa>
 8004b60:	4770      	bx	lr
 8004b62:	f803 1b01 	strb.w	r1, [r3], #1
 8004b66:	e7f9      	b.n	8004b5c <memset+0x4>

08004b68 <_init>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr

08004b74 <_fini>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr
