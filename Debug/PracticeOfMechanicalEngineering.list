
PracticeOfMechanicalEngineering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004c58  08004c58  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c58  08004c58  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000020  08004c80  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004c80  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d7f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a6  00000000  00000000  00029dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016be3  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b51b  00000000  00000000  000438fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bb3  00000000  00000000  0004ee16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d59c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b0  00000000  00000000  000d5a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c08 	.word	0x08004c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08004c08 	.word	0x08004c08

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_frsub>:
 8000938:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800093c:	e002      	b.n	8000944 <__addsf3>
 800093e:	bf00      	nop

08000940 <__aeabi_fsub>:
 8000940:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000944 <__addsf3>:
 8000944:	0042      	lsls	r2, r0, #1
 8000946:	bf1f      	itttt	ne
 8000948:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800094c:	ea92 0f03 	teqne	r2, r3
 8000950:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000954:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000958:	d06a      	beq.n	8000a30 <__addsf3+0xec>
 800095a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800095e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000962:	bfc1      	itttt	gt
 8000964:	18d2      	addgt	r2, r2, r3
 8000966:	4041      	eorgt	r1, r0
 8000968:	4048      	eorgt	r0, r1
 800096a:	4041      	eorgt	r1, r0
 800096c:	bfb8      	it	lt
 800096e:	425b      	neglt	r3, r3
 8000970:	2b19      	cmp	r3, #25
 8000972:	bf88      	it	hi
 8000974:	4770      	bxhi	lr
 8000976:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000982:	bf18      	it	ne
 8000984:	4240      	negne	r0, r0
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800098e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000992:	bf18      	it	ne
 8000994:	4249      	negne	r1, r1
 8000996:	ea92 0f03 	teq	r2, r3
 800099a:	d03f      	beq.n	8000a1c <__addsf3+0xd8>
 800099c:	f1a2 0201 	sub.w	r2, r2, #1
 80009a0:	fa41 fc03 	asr.w	ip, r1, r3
 80009a4:	eb10 000c 	adds.w	r0, r0, ip
 80009a8:	f1c3 0320 	rsb	r3, r3, #32
 80009ac:	fa01 f103 	lsl.w	r1, r1, r3
 80009b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b4:	d502      	bpl.n	80009bc <__addsf3+0x78>
 80009b6:	4249      	negs	r1, r1
 80009b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c0:	d313      	bcc.n	80009ea <__addsf3+0xa6>
 80009c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c6:	d306      	bcc.n	80009d6 <__addsf3+0x92>
 80009c8:	0840      	lsrs	r0, r0, #1
 80009ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ce:	f102 0201 	add.w	r2, r2, #1
 80009d2:	2afe      	cmp	r2, #254	; 0xfe
 80009d4:	d251      	bcs.n	8000a7a <__addsf3+0x136>
 80009d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009de:	bf08      	it	eq
 80009e0:	f020 0001 	biceq.w	r0, r0, #1
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	4770      	bx	lr
 80009ea:	0049      	lsls	r1, r1, #1
 80009ec:	eb40 0000 	adc.w	r0, r0, r0
 80009f0:	3a01      	subs	r2, #1
 80009f2:	bf28      	it	cs
 80009f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009f8:	d2ed      	bcs.n	80009d6 <__addsf3+0x92>
 80009fa:	fab0 fc80 	clz	ip, r0
 80009fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a02:	ebb2 020c 	subs.w	r2, r2, ip
 8000a06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0a:	bfaa      	itet	ge
 8000a0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a10:	4252      	neglt	r2, r2
 8000a12:	4318      	orrge	r0, r3
 8000a14:	bfbc      	itt	lt
 8000a16:	40d0      	lsrlt	r0, r2
 8000a18:	4318      	orrlt	r0, r3
 8000a1a:	4770      	bx	lr
 8000a1c:	f092 0f00 	teq	r2, #0
 8000a20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a24:	bf06      	itte	eq
 8000a26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2a:	3201      	addeq	r2, #1
 8000a2c:	3b01      	subne	r3, #1
 8000a2e:	e7b5      	b.n	800099c <__addsf3+0x58>
 8000a30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3e:	d021      	beq.n	8000a84 <__addsf3+0x140>
 8000a40:	ea92 0f03 	teq	r2, r3
 8000a44:	d004      	beq.n	8000a50 <__addsf3+0x10c>
 8000a46:	f092 0f00 	teq	r2, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	4770      	bx	lr
 8000a50:	ea90 0f01 	teq	r0, r1
 8000a54:	bf1c      	itt	ne
 8000a56:	2000      	movne	r0, #0
 8000a58:	4770      	bxne	lr
 8000a5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a5e:	d104      	bne.n	8000a6a <__addsf3+0x126>
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	bf28      	it	cs
 8000a64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	4770      	bx	lr
 8000a6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a6e:	bf3c      	itt	cc
 8000a70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a74:	4770      	bxcc	lr
 8000a76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	4770      	bx	lr
 8000a84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a88:	bf16      	itet	ne
 8000a8a:	4608      	movne	r0, r1
 8000a8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a90:	4601      	movne	r1, r0
 8000a92:	0242      	lsls	r2, r0, #9
 8000a94:	bf06      	itte	eq
 8000a96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9a:	ea90 0f01 	teqeq	r0, r1
 8000a9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_ui2f>:
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e004      	b.n	8000ab4 <__aeabi_i2f+0x8>
 8000aaa:	bf00      	nop

08000aac <__aeabi_i2f>:
 8000aac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	bf48      	it	mi
 8000ab2:	4240      	negmi	r0, r0
 8000ab4:	ea5f 0c00 	movs.w	ip, r0
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	e01c      	b.n	8000b02 <__aeabi_l2f+0x2a>

08000ac8 <__aeabi_ul2f>:
 8000ac8:	ea50 0201 	orrs.w	r2, r0, r1
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	e00a      	b.n	8000aec <__aeabi_l2f+0x14>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_l2f>:
 8000ad8:	ea50 0201 	orrs.w	r2, r0, r1
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_l2f+0x14>
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	ea5f 0c01 	movs.w	ip, r1
 8000af0:	bf02      	ittt	eq
 8000af2:	4684      	moveq	ip, r0
 8000af4:	4601      	moveq	r1, r0
 8000af6:	2000      	moveq	r0, #0
 8000af8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000afc:	bf08      	it	eq
 8000afe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b06:	fabc f28c 	clz	r2, ip
 8000b0a:	3a08      	subs	r2, #8
 8000b0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b10:	db10      	blt.n	8000b34 <__aeabi_l2f+0x5c>
 8000b12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b16:	4463      	add	r3, ip
 8000b18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b1c:	f1c2 0220 	rsb	r2, r2, #32
 8000b20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b24:	fa20 f202 	lsr.w	r2, r0, r2
 8000b28:	eb43 0002 	adc.w	r0, r3, r2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f102 0220 	add.w	r2, r2, #32
 8000b38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b44:	fa21 f202 	lsr.w	r2, r1, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_fmul>:
 8000b54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b62:	ea92 0f0c 	teqne	r2, ip
 8000b66:	ea93 0f0c 	teqne	r3, ip
 8000b6a:	d06f      	beq.n	8000c4c <__aeabi_fmul+0xf8>
 8000b6c:	441a      	add	r2, r3
 8000b6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000b72:	0240      	lsls	r0, r0, #9
 8000b74:	bf18      	it	ne
 8000b76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7a:	d01e      	beq.n	8000bba <__aeabi_fmul+0x66>
 8000b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b88:	fba0 3101 	umull	r3, r1, r0, r1
 8000b8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b94:	bf3e      	ittt	cc
 8000b96:	0049      	lslcc	r1, r1, #1
 8000b98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b9c:	005b      	lslcc	r3, r3, #1
 8000b9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ba2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ba6:	2afd      	cmp	r2, #253	; 0xfd
 8000ba8:	d81d      	bhi.n	8000be6 <__aeabi_fmul+0x92>
 8000baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc2:	bf08      	it	eq
 8000bc4:	0249      	lsleq	r1, r1, #9
 8000bc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bce:	3a7f      	subs	r2, #127	; 0x7f
 8000bd0:	bfc2      	ittt	gt
 8000bd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bda:	4770      	bxgt	lr
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	dc5d      	bgt.n	8000ca4 <__aeabi_fmul+0x150>
 8000be8:	f112 0f19 	cmn.w	r2, #25
 8000bec:	bfdc      	itt	le
 8000bee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bxle	lr
 8000bf4:	f1c2 0200 	rsb	r2, r2, #0
 8000bf8:	0041      	lsls	r1, r0, #1
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	f1c2 0220 	rsb	r2, r2, #32
 8000c02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0a:	f140 0000 	adc.w	r0, r0, #0
 8000c0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c12:	bf08      	it	eq
 8000c14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c18:	4770      	bx	lr
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c22:	bf02      	ittt	eq
 8000c24:	0040      	lsleq	r0, r0, #1
 8000c26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2a:	3a01      	subeq	r2, #1
 8000c2c:	d0f9      	beq.n	8000c22 <__aeabi_fmul+0xce>
 8000c2e:	ea40 000c 	orr.w	r0, r0, ip
 8000c32:	f093 0f00 	teq	r3, #0
 8000c36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	bf02      	ittt	eq
 8000c3c:	0049      	lsleq	r1, r1, #1
 8000c3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c42:	3b01      	subeq	r3, #1
 8000c44:	d0f9      	beq.n	8000c3a <__aeabi_fmul+0xe6>
 8000c46:	ea41 010c 	orr.w	r1, r1, ip
 8000c4a:	e78f      	b.n	8000b6c <__aeabi_fmul+0x18>
 8000c4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c50:	ea92 0f0c 	teq	r2, ip
 8000c54:	bf18      	it	ne
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d00a      	beq.n	8000c72 <__aeabi_fmul+0x11e>
 8000c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c60:	bf18      	it	ne
 8000c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c66:	d1d8      	bne.n	8000c1a <__aeabi_fmul+0xc6>
 8000c68:	ea80 0001 	eor.w	r0, r0, r1
 8000c6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f090 0f00 	teq	r0, #0
 8000c76:	bf17      	itett	ne
 8000c78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	f091 0f00 	teqne	r1, #0
 8000c82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c86:	d014      	beq.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c88:	ea92 0f0c 	teq	r2, ip
 8000c8c:	d101      	bne.n	8000c92 <__aeabi_fmul+0x13e>
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	d10f      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000c92:	ea93 0f0c 	teq	r3, ip
 8000c96:	d103      	bne.n	8000ca0 <__aeabi_fmul+0x14c>
 8000c98:	024b      	lsls	r3, r1, #9
 8000c9a:	bf18      	it	ne
 8000c9c:	4608      	movne	r0, r1
 8000c9e:	d108      	bne.n	8000cb2 <__aeabi_fmul+0x15e>
 8000ca0:	ea80 0001 	eor.w	r0, r0, r1
 8000ca4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bx	lr
 8000cb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_fdiv>:
 8000cbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cca:	ea92 0f0c 	teqne	r2, ip
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d069      	beq.n	8000da8 <__aeabi_fdiv+0xec>
 8000cd4:	eba2 0203 	sub.w	r2, r2, r3
 8000cd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000cdc:	0249      	lsls	r1, r1, #9
 8000cde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce2:	d037      	beq.n	8000d54 <__aeabi_fdiv+0x98>
 8000ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf38      	it	cc
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d02:	428b      	cmp	r3, r1
 8000d04:	bf24      	itt	cs
 8000d06:	1a5b      	subcs	r3, r3, r1
 8000d08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d1e:	bf24      	itt	cs
 8000d20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d2c:	bf24      	itt	cs
 8000d2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d3e:	d1e0      	bne.n	8000d02 <__aeabi_fdiv+0x46>
 8000d40:	2afd      	cmp	r2, #253	; 0xfd
 8000d42:	f63f af50 	bhi.w	8000be6 <__aeabi_fmul+0x92>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5c:	327f      	adds	r2, #127	; 0x7f
 8000d5e:	bfc2      	ittt	gt
 8000d60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d68:	4770      	bxgt	lr
 8000d6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	3a01      	subs	r2, #1
 8000d74:	e737      	b.n	8000be6 <__aeabi_fmul+0x92>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fdiv+0xc2>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fdiv+0xda>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e795      	b.n	8000cd4 <__aeabi_fdiv+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	d108      	bne.n	8000dc4 <__aeabi_fdiv+0x108>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	f47f af7d 	bne.w	8000cb2 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	f47f af70 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e776      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dc4:	ea93 0f0c 	teq	r3, ip
 8000dc8:	d104      	bne.n	8000dd4 <__aeabi_fdiv+0x118>
 8000dca:	024b      	lsls	r3, r1, #9
 8000dcc:	f43f af4c 	beq.w	8000c68 <__aeabi_fmul+0x114>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e76e      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000dd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd8:	bf18      	it	ne
 8000dda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	d1ca      	bne.n	8000d76 <__aeabi_fdiv+0xba>
 8000de0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de4:	f47f af5c 	bne.w	8000ca0 <__aeabi_fmul+0x14c>
 8000de8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	f47f af3c 	bne.w	8000c68 <__aeabi_fmul+0x114>
 8000df0:	e75f      	b.n	8000cb2 <__aeabi_fmul+0x15e>
 8000df2:	bf00      	nop

08000df4 <__gesf2>:
 8000df4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000df8:	e006      	b.n	8000e08 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__lesf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	e002      	b.n	8000e08 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__cmpsf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e18:	bf18      	it	ne
 8000e1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e1e:	d011      	beq.n	8000e44 <__cmpsf2+0x40>
 8000e20:	b001      	add	sp, #4
 8000e22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e26:	bf18      	it	ne
 8000e28:	ea90 0f01 	teqne	r0, r1
 8000e2c:	bf58      	it	pl
 8000e2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e32:	bf88      	it	hi
 8000e34:	17c8      	asrhi	r0, r1, #31
 8000e36:	bf38      	it	cc
 8000e38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e3c:	bf18      	it	ne
 8000e3e:	f040 0001 	orrne.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e48:	d102      	bne.n	8000e50 <__cmpsf2+0x4c>
 8000e4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e4e:	d105      	bne.n	8000e5c <__cmpsf2+0x58>
 8000e50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e54:	d1e4      	bne.n	8000e20 <__cmpsf2+0x1c>
 8000e56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5a:	d0e1      	beq.n	8000e20 <__cmpsf2+0x1c>
 8000e5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <__aeabi_cfrcmple>:
 8000e64:	4684      	mov	ip, r0
 8000e66:	4608      	mov	r0, r1
 8000e68:	4661      	mov	r1, ip
 8000e6a:	e7ff      	b.n	8000e6c <__aeabi_cfcmpeq>

08000e6c <__aeabi_cfcmpeq>:
 8000e6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e6e:	f7ff ffc9 	bl	8000e04 <__cmpsf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e7c <__aeabi_fcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cfcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffd2 	bl	8000e64 <__aeabi_cfrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc8 	bl	8000e64 <__aeabi_cfrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_f2iz>:
 8000ee0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ee8:	d30f      	bcc.n	8000f0a <__aeabi_f2iz+0x2a>
 8000eea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d90d      	bls.n	8000f10 <__aeabi_f2iz+0x30>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	bf18      	it	ne
 8000f06:	4240      	negne	r0, r0
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2iz+0x3a>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d105      	bne.n	8000f26 <__aeabi_f2iz+0x46>
 8000f1a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f1e:	bf08      	it	eq
 8000f20:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f001 f9c8 	bl	80022c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  pulse_servo1 = MIN_PULSE_LENGTH;
 8000f34:	4bb3      	ldr	r3, [pc, #716]	; (8001204 <main+0x2d8>)
 8000f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f3a:	601a      	str	r2, [r3, #0]
  pulse_servo2 = MIN_PULSE_LENGTH;
 8000f3c:	4bb2      	ldr	r3, [pc, #712]	; (8001208 <main+0x2dc>)
 8000f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f42:	601a      	str	r2, [r3, #0]
  pulse_servo3 = MIN_PULSE_LENGTH;
 8000f44:	4bb1      	ldr	r3, [pc, #708]	; (800120c <main+0x2e0>)
 8000f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f4a:	601a      	str	r2, [r3, #0]
  pulse_BLDC = MIN_PULSE_LENGTH;
 8000f4c:	4bb0      	ldr	r3, [pc, #704]	; (8001210 <main+0x2e4>)
 8000f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f52:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f990 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 fb98 	bl	800168c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5c:	f000 f9e4 	bl	8001328 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f60:	f000 fa4e 	bl	8001400 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f64:	f000 fae8 	bl	8001538 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f68:	f000 fb40 	bl	80015ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	48a8      	ldr	r0, [pc, #672]	; (8001214 <main+0x2e8>)
 8000f72:	f002 f8fb 	bl	800316c <HAL_GPIO_TogglePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                 // Servo 1
 8000f76:	2100      	movs	r1, #0
 8000f78:	48a7      	ldr	r0, [pc, #668]	; (8001218 <main+0x2ec>)
 8000f7a:	f002 ff79 	bl	8003e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                 // Servo 2
 8000f7e:	2104      	movs	r1, #4
 8000f80:	48a5      	ldr	r0, [pc, #660]	; (8001218 <main+0x2ec>)
 8000f82:	f002 ff75 	bl	8003e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);                 // Servo 3
 8000f86:	2108      	movs	r1, #8
 8000f88:	48a3      	ldr	r0, [pc, #652]	; (8001218 <main+0x2ec>)
 8000f8a:	f002 ff71 	bl	8003e70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);                 //無刷馬達
 8000f8e:	2100      	movs	r1, #0
 8000f90:	48a2      	ldr	r0, [pc, #648]	; (800121c <main+0x2f0>)
 8000f92:	f002 ff6d 	bl	8003e70 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);                            //開啟中斷
 8000f96:	48a2      	ldr	r0, [pc, #648]	; (8001220 <main+0x2f4>)
 8000f98:	f002 fece 	bl	8003d38 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); //無刷馬達下限轉速
 8000f9c:	4b9c      	ldr	r3, [pc, #624]	; (8001210 <main+0x2e4>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b9e      	ldr	r3, [pc, #632]	; (800121c <main+0x2f0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
  writeServo(90);
 8000fa6:	489f      	ldr	r0, [pc, #636]	; (8001224 <main+0x2f8>)
 8000fa8:	f000 fc26 	bl	80017f8 <writeServo>
  brake();
 8000fac:	f000 fc88 	bl	80018c0 <brake>
  // unbrake();
  HAL_Delay(3000);
 8000fb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fb4:	f001 f9e8 	bl	8002388 <HAL_Delay>
  mode = 3;
 8000fb8:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <main+0x2fc>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    switch (mode)
 8000fbe:	4b9a      	ldr	r3, [pc, #616]	; (8001228 <main+0x2fc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d8fb      	bhi.n	8000fbe <main+0x92>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <main+0xa0>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fe5 	.word	0x08000fe5
 8000fd0:	08000fef 	.word	0x08000fef
 8000fd4:	08000ff7 	.word	0x08000ff7
 8000fd8:	0800116b 	.word	0x0800116b
 8000fdc:	0800119b 	.word	0x0800119b
 8000fe0:	080011ab 	.word	0x080011ab
    {
    case 0:
      setPower(0);
 8000fe4:	f04f 0000 	mov.w	r0, #0
 8000fe8:	f000 fc32 	bl	8001850 <setPower>
      break;
 8000fec:	e109      	b.n	8001202 <main+0x2d6>

    case 1:
      setPower(10);
 8000fee:	488f      	ldr	r0, [pc, #572]	; (800122c <main+0x300>)
 8000ff0:	f000 fc2e 	bl	8001850 <setPower>
      break;
 8000ff4:	e105      	b.n	8001202 <main+0x2d6>

    case 2:
      // 起步
      setPower(power_BLDC);
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <main+0x304>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc28 	bl	8001850 <setPower>
      HAL_Delay(2000);
 8001000:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001004:	f001 f9c0 	bl	8002388 <HAL_Delay>
      unbrake();
 8001008:	f000 fc78 	bl	80018fc <unbrake>

      // 第 1 段，轉彎至第一循跡線
      writeServo(71.3);
 800100c:	4889      	ldr	r0, [pc, #548]	; (8001234 <main+0x308>)
 800100e:	f000 fbf3 	bl	80017f8 <writeServo>
      while (trigger < 3)
 8001012:	e02d      	b.n	8001070 <main+0x144>
      {
        HAL_ADC_Start(&hadc1);
 8001014:	4888      	ldr	r0, [pc, #544]	; (8001238 <main+0x30c>)
 8001016:	f001 fab3 	bl	8002580 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 800101a:	2101      	movs	r1, #1
 800101c:	4886      	ldr	r0, [pc, #536]	; (8001238 <main+0x30c>)
 800101e:	f001 fb5d 	bl	80026dc <HAL_ADC_PollForConversion>
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001022:	2102      	movs	r1, #2
 8001024:	4884      	ldr	r0, [pc, #528]	; (8001238 <main+0x30c>)
 8001026:	f000 fb9f 	bl	8001768 <Board_Get_ADCChannelValue>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b83      	ldr	r3, [pc, #524]	; (800123c <main+0x310>)
 8001030:	601a      	str	r2, [r3, #0]
        if (value2 > 1000) //感測到黑色
 8001032:	4b82      	ldr	r3, [pc, #520]	; (800123c <main+0x310>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103a:	dd19      	ble.n	8001070 <main+0x144>
        {
          while (value2 > 1000) //變成白色之前狀態不變
 800103c:	e00e      	b.n	800105c <main+0x130>
          {
            HAL_ADC_Start(&hadc1);
 800103e:	487e      	ldr	r0, [pc, #504]	; (8001238 <main+0x30c>)
 8001040:	f001 fa9e 	bl	8002580 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 1);
 8001044:	2101      	movs	r1, #1
 8001046:	487c      	ldr	r0, [pc, #496]	; (8001238 <main+0x30c>)
 8001048:	f001 fb48 	bl	80026dc <HAL_ADC_PollForConversion>
            value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 800104c:	2102      	movs	r1, #2
 800104e:	487a      	ldr	r0, [pc, #488]	; (8001238 <main+0x30c>)
 8001050:	f000 fb8a 	bl	8001768 <Board_Get_ADCChannelValue>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <main+0x310>)
 800105a:	601a      	str	r2, [r3, #0]
          while (value2 > 1000) //變成白色之前狀態不變
 800105c:	4b77      	ldr	r3, [pc, #476]	; (800123c <main+0x310>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001064:	dceb      	bgt.n	800103e <main+0x112>
          }
          trigger += 1;
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <main+0x314>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a74      	ldr	r2, [pc, #464]	; (8001240 <main+0x314>)
 800106e:	6013      	str	r3, [r2, #0]
      while (trigger < 3)
 8001070:	4b73      	ldr	r3, [pc, #460]	; (8001240 <main+0x314>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	ddcd      	ble.n	8001014 <main+0xe8>
        }
      }

      // 第 4 段，第一段循跡
      lineFollower(3, 6, &trigger);
 8001078:	4a71      	ldr	r2, [pc, #452]	; (8001240 <main+0x314>)
 800107a:	4972      	ldr	r1, [pc, #456]	; (8001244 <main+0x318>)
 800107c:	4872      	ldr	r0, [pc, #456]	; (8001248 <main+0x31c>)
 800107e:	f000 fd37 	bl	8001af0 <lineFollower>
      lineFollower(1, 16, &trigger);
 8001082:	4a6f      	ldr	r2, [pc, #444]	; (8001240 <main+0x314>)
 8001084:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001088:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800108c:	f000 fd30 	bl	8001af0 <lineFollower>

      // 第 5 段，變換車道
      setPower(13.5); // 根據電量調整
 8001090:	486e      	ldr	r0, [pc, #440]	; (800124c <main+0x320>)
 8001092:	f000 fbdd 	bl	8001850 <setPower>
      writeServo(60);
 8001096:	486e      	ldr	r0, [pc, #440]	; (8001250 <main+0x324>)
 8001098:	f000 fbae 	bl	80017f8 <writeServo>
      // HAL_Delay(950); //轉回黑線_往前
      HAL_Delay(900); //轉回黑線_往後，900~830
 800109c:	f44f 7061 	mov.w	r0, #900	; 0x384
 80010a0:	f001 f972 	bl	8002388 <HAL_Delay>
      // 轉彎法
      setPower(13.5);
 80010a4:	4869      	ldr	r0, [pc, #420]	; (800124c <main+0x320>)
 80010a6:	f000 fbd3 	bl	8001850 <setPower>
      writeServo(90);
 80010aa:	485e      	ldr	r0, [pc, #376]	; (8001224 <main+0x2f8>)
 80010ac:	f000 fba4 	bl	80017f8 <writeServo>
      // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
      // writeServo(55);
      // HAL_Delay(1500);

      // 等到黑線停下
      waitBlack(2);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f000 fcf1 	bl	8001a98 <waitBlack>
      // // 轉回黑線_往前
      // writeServo(138);
      // waitBlack(1);
      // 轉回黑線_往後
      setPower(0);
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	f000 fbc9 	bl	8001850 <setPower>
      brake();
 80010be:	f000 fbff 	bl	80018c0 <brake>
      HAL_Delay(800);
 80010c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80010c6:	f001 f95f 	bl	8002388 <HAL_Delay>
      // pulse_servo2 = 500 + 2000 * 115 / 180;
      // pulse_servo3 = 500 + 2000 * 120 / 180; // 130?
      writeServo(82);
 80010ca:	4862      	ldr	r0, [pc, #392]	; (8001254 <main+0x328>)
 80010cc:	f000 fb94 	bl	80017f8 <writeServo>
      pulse_servo2 = 500 + 2000 * 115 / 180;
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <main+0x2dc>)
 80010d2:	f240 62f1 	movw	r2, #1777	; 0x6f1
 80010d6:	601a      	str	r2, [r3, #0]
      pulse_servo3 = 500 + 2000 * 130 / 180; // 130?
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <main+0x2e0>)
 80010da:	f44f 62f3 	mov.w	r2, #1944	; 0x798
 80010de:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <main+0x2dc>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <main+0x2ec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <main+0x2e0>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b4a      	ldr	r3, [pc, #296]	; (8001218 <main+0x2ec>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c
      waitBlack(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 fccf 	bl	8001a98 <waitBlack>
      brake();
 80010fa:	f000 fbe1 	bl	80018c0 <brake>
      HAL_Delay(500);
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f001 f941 	bl	8002388 <HAL_Delay>
      unbrake();
 8001106:	f000 fbf9 	bl	80018fc <unbrake>

      // 第 7 段，第二循跡線上坡
      trigger = 0;
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <main+0x314>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
      // while (trigger < 2)
      // {
      //   lineFollower(100, 16.5, &trigger);
      // }
      // 向後轉正模式
      while (trigger < 2)
 8001110:	e004      	b.n	800111c <main+0x1f0>
      {
        lineFollower(100, 17.5, &trigger);
 8001112:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <main+0x314>)
 8001114:	4950      	ldr	r1, [pc, #320]	; (8001258 <main+0x32c>)
 8001116:	4851      	ldr	r0, [pc, #324]	; (800125c <main+0x330>)
 8001118:	f000 fcea 	bl	8001af0 <lineFollower>
      while (trigger < 2)
 800111c:	4b48      	ldr	r3, [pc, #288]	; (8001240 <main+0x314>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	ddf6      	ble.n	8001112 <main+0x1e6>
      }
      writeServo(90);
 8001124:	483f      	ldr	r0, [pc, #252]	; (8001224 <main+0x2f8>)
 8001126:	f000 fb67 	bl	80017f8 <writeServo>
      HAL_Delay(300);
 800112a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800112e:	f001 f92b 	bl	8002388 <HAL_Delay>

      // 第 8 段，第一停止區
      setPower(0);
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f000 fb8b 	bl	8001850 <setPower>
      brake();
 800113a:	f000 fbc1 	bl	80018c0 <brake>
      HAL_Delay(3500);
 800113e:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001142:	f001 f921 	bl	8002388 <HAL_Delay>
      unbrake();
 8001146:	f000 fbd9 	bl	80018fc <unbrake>

      // 第 9 段，循跡至第二停止區
      lineFollowerBackward(5, 6.3, &trigger);
 800114a:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <main+0x314>)
 800114c:	4944      	ldr	r1, [pc, #272]	; (8001260 <main+0x334>)
 800114e:	4845      	ldr	r0, [pc, #276]	; (8001264 <main+0x338>)
 8001150:	f000 fe62 	bl	8001e18 <lineFollowerBackward>
      lineFollowerBackward(4, 0, &trigger);
 8001154:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <main+0x314>)
 8001156:	f04f 0100 	mov.w	r1, #0
 800115a:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800115e:	f000 fe5b 	bl	8001e18 <lineFollowerBackward>
      // brake();
      mode = 0;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <main+0x2fc>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
      break;
 8001168:	e04b      	b.n	8001202 <main+0x2d6>

    case 3: // 伺服測試
      pulse_servo2 = 500 + 2000 * 90 / 180;
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <main+0x2dc>)
 800116c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001170:	601a      	str	r2, [r3, #0]
      pulse_servo3 = pulse_servo2;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <main+0x2dc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <main+0x2e0>)
 8001178:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <main+0x2dc>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <main+0x2ec>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <main+0x2e0>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <main+0x2ec>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c
      unbrake();
 800118e:	f000 fbb5 	bl	80018fc <unbrake>
      writeServo(90);
 8001192:	4824      	ldr	r0, [pc, #144]	; (8001224 <main+0x2f8>)
 8001194:	f000 fb30 	bl	80017f8 <writeServo>
      break;
 8001198:	e033      	b.n	8001202 <main+0x2d6>

    case 4: // 無刷測試
      HAL_Delay(3000);
 800119a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800119e:	f001 f8f3 	bl	8002388 <HAL_Delay>
      setPower(13);
 80011a2:	4831      	ldr	r0, [pc, #196]	; (8001268 <main+0x33c>)
 80011a4:	f000 fb54 	bl	8001850 <setPower>
      // BLDC_test();
      break;
 80011a8:	e02b      	b.n	8001202 <main+0x2d6>

    case 5: // 類比輸入
      HAL_ADC_Start(&hadc1);
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <main+0x30c>)
 80011ac:	f001 f9e8 	bl	8002580 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	4821      	ldr	r0, [pc, #132]	; (8001238 <main+0x30c>)
 80011b4:	f001 fa92 	bl	80026dc <HAL_ADC_PollForConversion>
      value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	481f      	ldr	r0, [pc, #124]	; (8001238 <main+0x30c>)
 80011bc:	f000 fad4 	bl	8001768 <Board_Get_ADCChannelValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <main+0x340>)
 80011c6:	601a      	str	r2, [r3, #0]
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80011c8:	2101      	movs	r1, #1
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <main+0x30c>)
 80011cc:	f000 facc 	bl	8001768 <Board_Get_ADCChannelValue>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <main+0x344>)
 80011d6:	601a      	str	r2, [r3, #0]
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 80011d8:	2102      	movs	r1, #2
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <main+0x30c>)
 80011dc:	f000 fac4 	bl	8001768 <Board_Get_ADCChannelValue>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <main+0x310>)
 80011e6:	601a      	str	r2, [r3, #0]
      value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 80011e8:	2103      	movs	r1, #3
 80011ea:	4813      	ldr	r0, [pc, #76]	; (8001238 <main+0x30c>)
 80011ec:	f000 fabc 	bl	8001768 <Board_Get_ADCChannelValue>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <main+0x348>)
 80011f6:	601a      	str	r2, [r3, #0]
      HAL_Delay(500);
 80011f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fc:	f001 f8c4 	bl	8002388 <HAL_Delay>
      break;
 8001200:	bf00      	nop
    switch (mode)
 8001202:	e6dc      	b.n	8000fbe <main+0x92>
 8001204:	20000150 	.word	0x20000150
 8001208:	20000154 	.word	0x20000154
 800120c:	20000158 	.word	0x20000158
 8001210:	2000015c 	.word	0x2000015c
 8001214:	40011000 	.word	0x40011000
 8001218:	2000006c 	.word	0x2000006c
 800121c:	200000b4 	.word	0x200000b4
 8001220:	200000fc 	.word	0x200000fc
 8001224:	42b40000 	.word	0x42b40000
 8001228:	20000160 	.word	0x20000160
 800122c:	41200000 	.word	0x41200000
 8001230:	20000010 	.word	0x20000010
 8001234:	428e999a 	.word	0x428e999a
 8001238:	2000003c 	.word	0x2000003c
 800123c:	20000008 	.word	0x20000008
 8001240:	2000016c 	.word	0x2000016c
 8001244:	40c00000 	.word	0x40c00000
 8001248:	40400000 	.word	0x40400000
 800124c:	41580000 	.word	0x41580000
 8001250:	42700000 	.word	0x42700000
 8001254:	42a40000 	.word	0x42a40000
 8001258:	418c0000 	.word	0x418c0000
 800125c:	42c80000 	.word	0x42c80000
 8001260:	40c9999a 	.word	0x40c9999a
 8001264:	40a00000 	.word	0x40a00000
 8001268:	41500000 	.word	0x41500000
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004
 8001274:	2000000c 	.word	0x2000000c

08001278 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	2228      	movs	r2, #40	; 0x28
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fcb6 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b6:	2301      	movs	r3, #1
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 ff67 	bl	80031a0 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80012d8:	f000 fe66 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012dc:	230f      	movs	r3, #15
 80012de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f9d4 	bl	80036a4 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001302:	f000 fe51 	bl	8001fa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001306:	2302      	movs	r3, #2
 8001308:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fb4b 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800131c:	f000 fe44 	bl	8001fa8 <Error_Handler>
  }
}
 8001320:	bf00      	nop
 8001322:	3750      	adds	r7, #80	; 0x50
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <MX_ADC1_Init+0xd0>)
 800133a:	4a30      	ldr	r2, [pc, #192]	; (80013fc <MX_ADC1_Init+0xd4>)
 800133c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001346:	2200      	movs	r2, #0
 8001348:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MX_ADC1_Init+0xd0>)
 800134c:	2200      	movs	r2, #0
 800134e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001352:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001356:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_ADC1_Init+0xd0>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001360:	2201      	movs	r2, #1
 8001362:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	4824      	ldr	r0, [pc, #144]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001366:	f001 f833 	bl	80023d0 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001370:	f000 fe1a 	bl	8001fa8 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 8001374:	2301      	movs	r3, #1
 8001376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001378:	2301      	movs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	481c      	ldr	r0, [pc, #112]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001386:	f001 fabb 	bl	8002900 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001390:	f000 fe0a 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /**Common config
   */
  hadc1.Instance = ADC1;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_ADC1_Init+0xd0>)
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <MX_ADC1_Init+0xd4>)
 8001398:	601a      	str	r2, [r3, #0]
  //  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE; //扫描（多通道）模式=ENABLE、单次（单通道）模式=DISABLE 因为同时只采集一个通道 所以设置为DISABLE
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_ADC1_Init+0xd0>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
                                              //  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
                                              //  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;    //连续=ENABLE、单次=DISABLE
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013be:	61da      	str	r2, [r3, #28]
  //  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
  //  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  //  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  //  hadc1.Init.BoostMode = DISABLE;
  //  hadc1.Init.OversamplingMode = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013c2:	f001 f805 	bl	80023d0 <HAL_ADC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80013cc:	f000 fdec 	bl	8001fa8 <Error_Handler>
  }

  /**Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  //  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  //  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  //  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_ADC1_Init+0xd0>)
 80013e2:	f001 fa8d 	bl	8002900 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80013ec:	f000 fddc 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000003c 	.word	0x2000003c
 80013fc:	40012400 	.word	0x40012400

08001400 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b092      	sub	sp, #72	; 0x48
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2220      	movs	r2, #32
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fbe4 	bl	8004bf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <MX_TIM1_Init+0x130>)
 8001432:	4a40      	ldr	r2, [pc, #256]	; (8001534 <MX_TIM1_Init+0x134>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <MX_TIM1_Init+0x130>)
 8001438:	220f      	movs	r2, #15
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <MX_TIM1_Init+0x130>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <MX_TIM1_Init+0x130>)
 8001444:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <MX_TIM1_Init+0x130>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_TIM1_Init+0x130>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MX_TIM1_Init+0x130>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800145c:	4834      	ldr	r0, [pc, #208]	; (8001530 <MX_TIM1_Init+0x130>)
 800145e:	f002 fcb7 	bl	8003dd0 <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001468:	f000 fd9e 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001474:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001478:	4619      	mov	r1, r3
 800147a:	482d      	ldr	r0, [pc, #180]	; (8001530 <MX_TIM1_Init+0x130>)
 800147c:	f003 fadc 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001486:	f000 fd8f 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	481f      	ldr	r0, [pc, #124]	; (8001530 <MX_TIM1_Init+0x130>)
 80014b2:	f002 fe81 	bl	80041b8 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80014bc:	f000 fd74 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	2204      	movs	r2, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4819      	ldr	r0, [pc, #100]	; (8001530 <MX_TIM1_Init+0x130>)
 80014ca:	f002 fe75 	bl	80041b8 <HAL_TIM_PWM_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80014d4:	f000 fd68 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM1_Init+0x130>)
 80014e2:	f002 fe69 	bl	80041b8 <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014ec:	f000 fd5c 	bl	8001fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM1_Init+0x130>)
 8001514:	f003 fae8 	bl	8004ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800151e:	f000 fd43 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM1_Init+0x130>)
 8001524:	f000 fe0a 	bl	800213c <HAL_TIM_MspPostInit>
}
 8001528:	bf00      	nop
 800152a:	3748      	adds	r7, #72	; 0x48
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000006c 	.word	0x2000006c
 8001534:	40012c00 	.word	0x40012c00

08001538 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_TIM2_Init+0xb0>)
 800155c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001560:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001564:	220f      	movs	r2, #15
 8001566:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_TIM2_Init+0xb0>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001570:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001574:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM2_Init+0xb0>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001582:	4819      	ldr	r0, [pc, #100]	; (80015e8 <MX_TIM2_Init+0xb0>)
 8001584:	f002 fc24 	bl	8003dd0 <HAL_TIM_PWM_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800158e:	f000 fd0b 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	4619      	mov	r1, r3
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_TIM2_Init+0xb0>)
 80015a2:	f003 fa49 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015ac:	f000 fcfc 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	2360      	movs	r3, #96	; 0x60
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM2_Init+0xb0>)
 80015ca:	f002 fdf5 	bl	80041b8 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80015d4:	f000 fce8 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM2_Init+0xb0>)
 80015da:	f000 fdaf 	bl	800213c <HAL_TIM_MspPostInit>
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000b4 	.word	0x200000b4

080015ec <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  htim3.Instance = TIM3;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_TIM3_Init+0x98>)
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <MX_TIM3_Init+0x9c>)
 800160c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM3_Init+0x98>)
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <MX_TIM3_Init+0x9c>)
 8001612:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_TIM3_Init+0x98>)
 8001616:	220f      	movs	r2, #15
 8001618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM3_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_TIM3_Init+0x98>)
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_TIM3_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM3_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <MX_TIM3_Init+0x98>)
 8001636:	f002 fb2f 	bl	8003c98 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001640:	f000 fcb2 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <MX_TIM3_Init+0x98>)
 8001652:	f002 fe6f 	bl	8004334 <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800165c:	f000 fca4 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_TIM3_Init+0x98>)
 800166e:	f003 f9e3 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001678:	f000 fc96 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200000fc 	.word	0x200000fc
 8001688:	40000400 	.word	0x40000400

0800168c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <MX_GPIO_Init+0xd0>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a2d      	ldr	r2, [pc, #180]	; (800175c <MX_GPIO_Init+0xd0>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <MX_GPIO_Init+0xd0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <MX_GPIO_Init+0xd0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a27      	ldr	r2, [pc, #156]	; (800175c <MX_GPIO_Init+0xd0>)
 80016be:	f043 0320 	orr.w	r3, r3, #32
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <MX_GPIO_Init+0xd0>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_GPIO_Init+0xd0>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <MX_GPIO_Init+0xd0>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_GPIO_Init+0xd0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_GPIO_Init+0xd0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <MX_GPIO_Init+0xd0>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_GPIO_Init+0xd0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001706:	4816      	ldr	r0, [pc, #88]	; (8001760 <MX_GPIO_Init+0xd4>)
 8001708:	f001 fd18 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001712:	4814      	ldr	r0, [pc, #80]	; (8001764 <MX_GPIO_Init+0xd8>)
 8001714:	f001 fd12 	bl	800313c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <MX_GPIO_Init+0xd4>)
 8001732:	f001 fb87 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2302      	movs	r3, #2
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_GPIO_Init+0xd8>)
 8001750:	f001 fb78 	bl	8002e44 <HAL_GPIO_Init>
}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	40011000 	.word	0x40011000
 8001764:	40010c00 	.word	0x40010c00

08001768 <Board_Get_ADCChannelValue>:

/* USER CODE BEGIN 4 */
uint32_t Board_Get_ADCChannelValue(ADC_HandleTypeDef *hadc, uint32_t channel)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  ADC_ChannelConfTypeDef ADC_ChanConf;

  ADC_ChanConf.Channel = channel;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  ADC_ChanConf.Rank = ADC_REGULAR_RANK_1;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  //    ADC_ChanConf.SingleDiff = ADC_SINGLE_ENDED;
  //    ADC_ChanConf.OffsetNumber = ADC_OFFSET_NONE;
  //    ADC_ChanConf.Offset = 0;

  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f001 f8bb 	bl	8002900 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fef8 	bl	8002580 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10); //轮询转换
 8001790:	210a      	movs	r1, #10
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 ffa2 	bl	80026dc <HAL_ADC_PollForConversion>
  return (uint16_t)HAL_ADC_GetValue(hadc);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 f8a5 	bl	80028e8 <HAL_ADC_GetValue>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29b      	uxth	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d111      	bne.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    ms++;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017c6:	6013      	str	r3, [r2, #0]
    if (ms == 1000)
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d0:	d107      	bne.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x36>
    {
      ms = 0;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
      sec++;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017e0:	6013      	str	r3, [r2, #0]
    }
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40000400 	.word	0x40000400
 80017f0:	20000168 	.word	0x20000168
 80017f4:	20000164 	.word	0x20000164

080017f8 <writeServo>:

static void writeServo(float angle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <writeServo+0x44>)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff f9a6 	bl	8000b54 <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	490d      	ldr	r1, [pc, #52]	; (8001840 <writeServo+0x48>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa55 	bl	8000cbc <__aeabi_fdiv>
 8001812:	4603      	mov	r3, r0
 8001814:	490b      	ldr	r1, [pc, #44]	; (8001844 <writeServo+0x4c>)
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f894 	bl	8000944 <__addsf3>
 800181c:	4603      	mov	r3, r0
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb5e 	bl	8000ee0 <__aeabi_f2iz>
 8001824:	4603      	mov	r3, r0
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <writeServo+0x50>)
 8001828:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <writeServo+0x50>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <writeServo+0x54>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	44fa0000 	.word	0x44fa0000
 8001840:	43340000 	.word	0x43340000
 8001844:	43fa0000 	.word	0x43fa0000
 8001848:	20000150 	.word	0x20000150
 800184c:	2000006c 	.word	0x2000006c

08001850 <setPower>:

static void setPower(float power)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7fe fddb 	bl	8000414 <__aeabi_f2d>
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <setPower+0x60>)
 8001864:	f7fe fe2e 	bl	80004c4 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <setPower+0x64>)
 8001876:	f7fe ff4f 	bl	8000718 <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <setPower+0x60>)
 8001888:	f7fe fc66 	bl	8000158 <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f828 	bl	80008e8 <__aeabi_d2iz>
 8001898:	4603      	mov	r3, r0
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <setPower+0x68>)
 800189c:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <setPower+0x68>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <setPower+0x6c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	408f4000 	.word	0x408f4000
 80018b4:	40590000 	.word	0x40590000
 80018b8:	2000015c 	.word	0x2000015c
 80018bc:	200000b4 	.word	0x200000b4

080018c0 <brake>:

static void brake()
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <brake+0x30>)
 80018c6:	f240 7229 	movw	r2, #1833	; 0x729
 80018ca:	601a      	str	r2, [r3, #0]
  pulse_servo3 = 500 + 2000 * 60 / 180;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <brake+0x34>)
 80018ce:	f240 428e 	movw	r2, #1166	; 0x48e
 80018d2:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <brake+0x30>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <brake+0x38>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <brake+0x34>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <brake+0x38>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000154 	.word	0x20000154
 80018f4:	20000158 	.word	0x20000158
 80018f8:	2000006c 	.word	0x2000006c

080018fc <unbrake>:

static void unbrake()
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 90 / 180;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <unbrake+0x30>)
 8001902:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001906:	601a      	str	r2, [r3, #0]
  pulse_servo3 = 500 + 2000 * 90 / 180;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <unbrake+0x34>)
 800190a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800190e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <unbrake+0x30>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <unbrake+0x38>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <unbrake+0x34>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <unbrake+0x38>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000154 	.word	0x20000154
 8001930:	20000158 	.word	0x20000158
 8001934:	2000006c 	.word	0x2000006c

08001938 <TRS>:

static void TRS(void) //微右轉
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  writeServo(112.5);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TRS+0x10>)
 800193e:	f7ff ff5b 	bl	80017f8 <writeServo>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	42e10000 	.word	0x42e10000

0800194c <TRL>:

static void TRL(void) //急右轉
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  writeServo(135);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TRL+0x10>)
 8001952:	f7ff ff51 	bl	80017f8 <writeServo>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	43070000 	.word	0x43070000

08001960 <TLS>:

static void TLS(void) //微左轉
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  writeServo(67.5);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TLS+0x10>)
 8001966:	f7ff ff47 	bl	80017f8 <writeServo>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	42870000 	.word	0x42870000

08001974 <TLL>:

static void TLL(void) //急左轉
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  writeServo(45);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TLL+0x10>)
 800197a:	f7ff ff3d 	bl	80017f8 <writeServo>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	42340000 	.word	0x42340000

08001988 <DRS>:
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
}

static void DRS(void) //微右飄
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 100 / 180;
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <DRS+0x34>)
 800198e:	f240 624b 	movw	r2, #1611	; 0x64b
 8001992:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <DRS+0x34>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <DRS+0x38>)
 800199a:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <DRS+0x34>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <DRS+0x3c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <DRS+0x38>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <DRS+0x3c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(100);
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <DRS+0x40>)
 80019b2:	f7ff ff21 	bl	80017f8 <writeServo>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000154 	.word	0x20000154
 80019c0:	20000158 	.word	0x20000158
 80019c4:	2000006c 	.word	0x2000006c
 80019c8:	42c80000 	.word	0x42c80000

080019cc <DRL>:

static void DRL(void) //急右飄
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 110 / 180;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <DRL+0x34>)
 80019d2:	f240 62ba 	movw	r2, #1722	; 0x6ba
 80019d6:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <DRL+0x34>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <DRL+0x38>)
 80019de:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <DRL+0x34>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <DRL+0x3c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <DRL+0x38>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <DRL+0x3c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(110);
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <DRL+0x40>)
 80019f6:	f7ff feff 	bl	80017f8 <writeServo>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000154 	.word	0x20000154
 8001a04:	20000158 	.word	0x20000158
 8001a08:	2000006c 	.word	0x2000006c
 8001a0c:	42dc0000 	.word	0x42dc0000

08001a10 <DLS>:

static void DLS(void) //微左飄
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 80 / 180;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <DLS+0x34>)
 8001a16:	f240 526c 	movw	r2, #1388	; 0x56c
 8001a1a:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <DLS+0x34>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <DLS+0x38>)
 8001a22:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <DLS+0x34>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <DLS+0x3c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <DLS+0x38>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <DLS+0x3c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(80);
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <DLS+0x40>)
 8001a3a:	f7ff fedd 	bl	80017f8 <writeServo>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000154 	.word	0x20000154
 8001a48:	20000158 	.word	0x20000158
 8001a4c:	2000006c 	.word	0x2000006c
 8001a50:	42a00000 	.word	0x42a00000

08001a54 <DLL>:

static void DLL(void) //急左飄
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  pulse_servo2 = 500 + 2000 * 70 / 180;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <DLL+0x34>)
 8001a5a:	f240 42fd 	movw	r2, #1277	; 0x4fd
 8001a5e:	601a      	str	r2, [r3, #0]
  pulse_servo3 = pulse_servo2;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <DLL+0x34>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <DLL+0x38>)
 8001a66:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <DLL+0x34>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <DLL+0x3c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <DLL+0x38>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <DLL+0x3c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  writeServo(70);
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <DLL+0x40>)
 8001a7e:	f7ff febb 	bl	80017f8 <writeServo>
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000154 	.word	0x20000154
 8001a8c:	20000158 	.word	0x20000158
 8001a90:	2000006c 	.word	0x2000006c
 8001a94:	428c0000 	.word	0x428c0000

08001a98 <waitBlack>:
  mode = 0;
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, MIN_PULSE_LENGTH);
}

static void waitBlack(int ch)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(&hadc1);
 8001aa0:	4812      	ldr	r0, [pc, #72]	; (8001aec <waitBlack+0x54>)
 8001aa2:	f000 fd6d 	bl	8002580 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4810      	ldr	r0, [pc, #64]	; (8001aec <waitBlack+0x54>)
 8001aaa:	f000 fe17 	bl	80026dc <HAL_ADC_PollForConversion>
  int value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <waitBlack+0x54>)
 8001ab4:	f7ff fe58 	bl	8001768 <Board_Get_ADCChannelValue>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60fb      	str	r3, [r7, #12]
  while (value < 1000) //變成白色之前狀態不變
 8001abc:	e00d      	b.n	8001ada <waitBlack+0x42>
  {
    HAL_ADC_Start(&hadc1);
 8001abe:	480b      	ldr	r0, [pc, #44]	; (8001aec <waitBlack+0x54>)
 8001ac0:	f000 fd5e 	bl	8002580 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <waitBlack+0x54>)
 8001ac8:	f000 fe08 	bl	80026dc <HAL_ADC_PollForConversion>
    value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <waitBlack+0x54>)
 8001ad2:	f7ff fe49 	bl	8001768 <Board_Get_ADCChannelValue>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	60fb      	str	r3, [r7, #12]
  while (value < 1000) //變成白色之前狀態不變
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ae0:	dbed      	blt.n	8001abe <waitBlack+0x26>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000003c 	.word	0x2000003c

08001af0 <lineFollower>:

static void lineFollower(float operationTime, float power, int *tg)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  setPower(power);
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f7ff fea7 	bl	8001850 <setPower>
  sec = 0;
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <lineFollower+0x194>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  while (sec <= operationTime)
 8001b08:	e15d      	b.n	8001dc6 <lineFollower+0x2d6>
  {
    // HAL_TIM_PeriodElapsedCallback(&htim3);
    statecode = 0;
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	; (8001c88 <lineFollower+0x198>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);
 8001b10:	485e      	ldr	r0, [pc, #376]	; (8001c8c <lineFollower+0x19c>)
 8001b12:	f000 fd35 	bl	8002580 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001b16:	2101      	movs	r1, #1
 8001b18:	485c      	ldr	r0, [pc, #368]	; (8001c8c <lineFollower+0x19c>)
 8001b1a:	f000 fddf 	bl	80026dc <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	485a      	ldr	r0, [pc, #360]	; (8001c8c <lineFollower+0x19c>)
 8001b22:	f7ff fe21 	bl	8001768 <Board_Get_ADCChannelValue>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <lineFollower+0x1a0>)
 8001b2c:	601a      	str	r2, [r3, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4856      	ldr	r0, [pc, #344]	; (8001c8c <lineFollower+0x19c>)
 8001b32:	f7ff fe19 	bl	8001768 <Board_Get_ADCChannelValue>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <lineFollower+0x1a4>)
 8001b3c:	601a      	str	r2, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4852      	ldr	r0, [pc, #328]	; (8001c8c <lineFollower+0x19c>)
 8001b42:	f7ff fe11 	bl	8001768 <Board_Get_ADCChannelValue>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <lineFollower+0x1a8>)
 8001b4c:	601a      	str	r2, [r3, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001b4e:	2103      	movs	r1, #3
 8001b50:	484e      	ldr	r0, [pc, #312]	; (8001c8c <lineFollower+0x19c>)
 8001b52:	f7ff fe09 	bl	8001768 <Board_Get_ADCChannelValue>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <lineFollower+0x1ac>)
 8001b5c:	601a      	str	r2, [r3, #0]

    if (value0 > 1000)
 8001b5e:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <lineFollower+0x1a0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b66:	dd05      	ble.n	8001b74 <lineFollower+0x84>
      statecode = statecode | 0b1000; // 8
 8001b68:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <lineFollower+0x198>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <lineFollower+0x198>)
 8001b72:	6013      	str	r3, [r2, #0]
    if (value1 > 1000)
 8001b74:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <lineFollower+0x1a4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7c:	dd05      	ble.n	8001b8a <lineFollower+0x9a>
      statecode = statecode | 0b0100; // 4
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <lineFollower+0x198>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	4a40      	ldr	r2, [pc, #256]	; (8001c88 <lineFollower+0x198>)
 8001b88:	6013      	str	r3, [r2, #0]
    if (value2 > 1000)
 8001b8a:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <lineFollower+0x1a8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b92:	dd05      	ble.n	8001ba0 <lineFollower+0xb0>
      statecode = statecode | 0b0010; // 2
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <lineFollower+0x198>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <lineFollower+0x198>)
 8001b9e:	6013      	str	r3, [r2, #0]
    if (value3 > 1000)
 8001ba0:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <lineFollower+0x1ac>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba8:	dd05      	ble.n	8001bb6 <lineFollower+0xc6>
      statecode = statecode | 0b0001; // 1
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <lineFollower+0x198>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	4a35      	ldr	r2, [pc, #212]	; (8001c88 <lineFollower+0x198>)
 8001bb4:	6013      	str	r3, [r2, #0]

    tmp = (statecode & 0b1000) >> 3;
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <lineFollower+0x198>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	10db      	asrs	r3, r3, #3
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	4a37      	ldr	r2, [pc, #220]	; (8001ca0 <lineFollower+0x1b0>)
 8001bc2:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0100) >> 2;
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <lineFollower+0x198>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	109b      	asrs	r3, r3, #2
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <lineFollower+0x1b0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <lineFollower+0x1b0>)
 8001bd6:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0010) >> 1;
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <lineFollower+0x198>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	105b      	asrs	r3, r3, #1
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <lineFollower+0x1b0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <lineFollower+0x1b0>)
 8001bea:	6013      	str	r3, [r2, #0]
    tmp += (statecode & 0b0001);
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <lineFollower+0x198>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0201 	and.w	r2, r3, #1
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <lineFollower+0x1b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <lineFollower+0x1b0>)
 8001bfc:	6013      	str	r3, [r2, #0]
    if (tmp > 2)
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <lineFollower+0x1b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	dd02      	ble.n	8001c0c <lineFollower+0x11c>
    {
      statecode = 0b1111;
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <lineFollower+0x198>)
 8001c08:	220f      	movs	r2, #15
 8001c0a:	601a      	str	r2, [r3, #0]
    }

    switch (statecode)
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <lineFollower+0x198>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	f200 80d1 	bhi.w	8001db8 <lineFollower+0x2c8>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <lineFollower+0x12c>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c75 	.word	0x08001c75
 8001c20:	08001c6f 	.word	0x08001c6f
 8001c24:	08001c69 	.word	0x08001c69
 8001c28:	08001db9 	.word	0x08001db9
 8001c2c:	08001c63 	.word	0x08001c63
 8001c30:	08001db9 	.word	0x08001db9
 8001c34:	08001db9 	.word	0x08001db9
 8001c38:	08001db9 	.word	0x08001db9
 8001c3c:	08001c5d 	.word	0x08001c5d
 8001c40:	08001db9 	.word	0x08001db9
 8001c44:	08001db9 	.word	0x08001db9
 8001c48:	08001db9 	.word	0x08001db9
 8001c4c:	08001db9 	.word	0x08001db9
 8001c50:	08001db9 	.word	0x08001db9
 8001c54:	08001db9 	.word	0x08001db9
 8001c58:	08001c7d 	.word	0x08001c7d
    {
    case 0b1000:
      TLL(); //急左轉
 8001c5c:	f7ff fe8a 	bl	8001974 <TLL>
      break;
 8001c60:	e0aa      	b.n	8001db8 <lineFollower+0x2c8>
    case 0b0100:
      TLS(); //微左轉
 8001c62:	f7ff fe7d 	bl	8001960 <TLS>
      break;
 8001c66:	e0a7      	b.n	8001db8 <lineFollower+0x2c8>
    case 0b0010:
      TRS(); //微右轉
 8001c68:	f7ff fe66 	bl	8001938 <TRS>
      break;
 8001c6c:	e0a4      	b.n	8001db8 <lineFollower+0x2c8>
    case 0b0001:
      TRL(); //急右轉
 8001c6e:	f7ff fe6d 	bl	800194c <TRL>
      break;
 8001c72:	e0a1      	b.n	8001db8 <lineFollower+0x2c8>
    case 0b0000:
      writeServo(90);
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <lineFollower+0x1b4>)
 8001c76:	f7ff fdbf 	bl	80017f8 <writeServo>
      break;
 8001c7a:	e09d      	b.n	8001db8 <lineFollower+0x2c8>
    case 0b1111:
      writeServo(90);
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <lineFollower+0x1b4>)
 8001c7e:	f7ff fdbb 	bl	80017f8 <writeServo>
      while (tmp > 1) //變成白色之前狀態不變
 8001c82:	e08e      	b.n	8001da2 <lineFollower+0x2b2>
 8001c84:	20000164 	.word	0x20000164
 8001c88:	20000148 	.word	0x20000148
 8001c8c:	2000003c 	.word	0x2000003c
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	2000014c 	.word	0x2000014c
 8001ca4:	42b40000 	.word	0x42b40000
      {
        inloop = 1;
 8001ca8:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <lineFollower+0x300>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
        statecode = 0;
 8001cae:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <lineFollower+0x304>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start(&hadc1);
 8001cb4:	4850      	ldr	r0, [pc, #320]	; (8001df8 <lineFollower+0x308>)
 8001cb6:	f000 fc63 	bl	8002580 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 8001cba:	2101      	movs	r1, #1
 8001cbc:	484e      	ldr	r0, [pc, #312]	; (8001df8 <lineFollower+0x308>)
 8001cbe:	f000 fd0d 	bl	80026dc <HAL_ADC_PollForConversion>
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	484c      	ldr	r0, [pc, #304]	; (8001df8 <lineFollower+0x308>)
 8001cc6:	f7ff fd4f 	bl	8001768 <Board_Get_ADCChannelValue>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <lineFollower+0x30c>)
 8001cd0:	601a      	str	r2, [r3, #0]
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4848      	ldr	r0, [pc, #288]	; (8001df8 <lineFollower+0x308>)
 8001cd6:	f7ff fd47 	bl	8001768 <Board_Get_ADCChannelValue>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <lineFollower+0x310>)
 8001ce0:	601a      	str	r2, [r3, #0]
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4844      	ldr	r0, [pc, #272]	; (8001df8 <lineFollower+0x308>)
 8001ce6:	f7ff fd3f 	bl	8001768 <Board_Get_ADCChannelValue>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <lineFollower+0x314>)
 8001cf0:	601a      	str	r2, [r3, #0]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	4840      	ldr	r0, [pc, #256]	; (8001df8 <lineFollower+0x308>)
 8001cf6:	f7ff fd37 	bl	8001768 <Board_Get_ADCChannelValue>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <lineFollower+0x318>)
 8001d00:	601a      	str	r2, [r3, #0]

        if (value0 > 1000)
 8001d02:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <lineFollower+0x30c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d0a:	dd05      	ble.n	8001d18 <lineFollower+0x228>
          statecode = statecode | 0b1000; // 8
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <lineFollower+0x304>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <lineFollower+0x304>)
 8001d16:	6013      	str	r3, [r2, #0]
        if (value1 > 1000)
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <lineFollower+0x310>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d20:	dd05      	ble.n	8001d2e <lineFollower+0x23e>
          statecode = statecode | 0b0100; // 4
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <lineFollower+0x304>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <lineFollower+0x304>)
 8001d2c:	6013      	str	r3, [r2, #0]
        if (value2 > 1000)
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <lineFollower+0x314>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d36:	dd05      	ble.n	8001d44 <lineFollower+0x254>
          statecode = statecode | 0b0010; // 2
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <lineFollower+0x304>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <lineFollower+0x304>)
 8001d42:	6013      	str	r3, [r2, #0]
        if (value3 > 1000)
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <lineFollower+0x318>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d4c:	dd05      	ble.n	8001d5a <lineFollower+0x26a>
          statecode = statecode | 0b0001; // 1
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <lineFollower+0x304>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <lineFollower+0x304>)
 8001d58:	6013      	str	r3, [r2, #0]

        tmp = (statecode & 0b1000) >> 3;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <lineFollower+0x304>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	10db      	asrs	r3, r3, #3
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <lineFollower+0x31c>)
 8001d66:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0100) >> 2;
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <lineFollower+0x304>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	109b      	asrs	r3, r3, #2
 8001d6e:	f003 0201 	and.w	r2, r3, #1
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <lineFollower+0x31c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <lineFollower+0x31c>)
 8001d7a:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0010) >> 1;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <lineFollower+0x304>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	105b      	asrs	r3, r3, #1
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <lineFollower+0x31c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <lineFollower+0x31c>)
 8001d8e:	6013      	str	r3, [r2, #0]
        tmp += (statecode & 0b0001);
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <lineFollower+0x304>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0201 	and.w	r2, r3, #1
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <lineFollower+0x31c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <lineFollower+0x31c>)
 8001da0:	6013      	str	r3, [r2, #0]
      while (tmp > 1) //變成白色之前狀態不變
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <lineFollower+0x31c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	f73f af7e 	bgt.w	8001ca8 <lineFollower+0x1b8>
      }
      *tg += 1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
      break;
 8001db6:	bf00      	nop
    }

    if (operationTime == 100)
 8001db8:	4915      	ldr	r1, [pc, #84]	; (8001e10 <lineFollower+0x320>)
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff f85e 	bl	8000e7c <__aeabi_fcmpeq>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <lineFollower+0x2f4>
  while (sec <= operationTime)
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <lineFollower+0x324>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fe6e 	bl	8000aac <__aeabi_i2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff f86f 	bl	8000eb8 <__aeabi_fcmpge>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f ae94 	bne.w	8001b0a <lineFollower+0x1a>
      break;
  }
}
 8001de2:	e000      	b.n	8001de6 <lineFollower+0x2f6>
      break;
 8001de4:	bf00      	nop
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000144 	.word	0x20000144
 8001df4:	20000148 	.word	0x20000148
 8001df8:	2000003c 	.word	0x2000003c
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004
 8001e04:	20000008 	.word	0x20000008
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	2000014c 	.word	0x2000014c
 8001e10:	42c80000 	.word	0x42c80000
 8001e14:	20000164 	.word	0x20000164

08001e18 <lineFollowerBackward>:

static void lineFollowerBackward(float operationTime, float power, int *tg)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  setPower(power);
 8001e24:	68b8      	ldr	r0, [r7, #8]
 8001e26:	f7ff fd13 	bl	8001850 <setPower>
  sec = 0;
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <lineFollowerBackward+0x164>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
  while (sec <= operationTime)
 8001e30:	e090      	b.n	8001f54 <lineFollowerBackward+0x13c>
  {
    // HAL_TIM_PeriodElapsedCallback(&htim3);
    statecode = 0;
 8001e32:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <lineFollowerBackward+0x168>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    HAL_ADC_Start(&hadc1);
 8001e38:	4852      	ldr	r0, [pc, #328]	; (8001f84 <lineFollowerBackward+0x16c>)
 8001e3a:	f000 fba1 	bl	8002580 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4850      	ldr	r0, [pc, #320]	; (8001f84 <lineFollowerBackward+0x16c>)
 8001e42:	f000 fc4b 	bl	80026dc <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	484e      	ldr	r0, [pc, #312]	; (8001f84 <lineFollowerBackward+0x16c>)
 8001e4a:	f7ff fc8d 	bl	8001768 <Board_Get_ADCChannelValue>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <lineFollowerBackward+0x170>)
 8001e54:	601a      	str	r2, [r3, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001e56:	2101      	movs	r1, #1
 8001e58:	484a      	ldr	r0, [pc, #296]	; (8001f84 <lineFollowerBackward+0x16c>)
 8001e5a:	f7ff fc85 	bl	8001768 <Board_Get_ADCChannelValue>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <lineFollowerBackward+0x174>)
 8001e64:	601a      	str	r2, [r3, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001e66:	2102      	movs	r1, #2
 8001e68:	4846      	ldr	r0, [pc, #280]	; (8001f84 <lineFollowerBackward+0x16c>)
 8001e6a:	f7ff fc7d 	bl	8001768 <Board_Get_ADCChannelValue>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <lineFollowerBackward+0x178>)
 8001e74:	601a      	str	r2, [r3, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001e76:	2103      	movs	r1, #3
 8001e78:	4842      	ldr	r0, [pc, #264]	; (8001f84 <lineFollowerBackward+0x16c>)
 8001e7a:	f7ff fc75 	bl	8001768 <Board_Get_ADCChannelValue>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <lineFollowerBackward+0x17c>)
 8001e84:	601a      	str	r2, [r3, #0]

    if (value0 > 1000)
 8001e86:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <lineFollowerBackward+0x170>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8e:	dd05      	ble.n	8001e9c <lineFollowerBackward+0x84>
      statecode = statecode | 0b0001; // 8
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <lineFollowerBackward+0x168>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <lineFollowerBackward+0x168>)
 8001e9a:	6013      	str	r3, [r2, #0]
    if (value1 > 1000)
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <lineFollowerBackward+0x174>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea4:	dd05      	ble.n	8001eb2 <lineFollowerBackward+0x9a>
      statecode = statecode | 0b0010; // 4
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <lineFollowerBackward+0x168>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <lineFollowerBackward+0x168>)
 8001eb0:	6013      	str	r3, [r2, #0]
    if (value2 > 1000)
 8001eb2:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <lineFollowerBackward+0x178>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eba:	dd05      	ble.n	8001ec8 <lineFollowerBackward+0xb0>
      statecode = statecode | 0b0100; // 2
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <lineFollowerBackward+0x168>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <lineFollowerBackward+0x168>)
 8001ec6:	6013      	str	r3, [r2, #0]
    if (value3 > 1000)
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <lineFollowerBackward+0x17c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed0:	dd05      	ble.n	8001ede <lineFollowerBackward+0xc6>
      statecode = statecode | 0b1000; // 1
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <lineFollowerBackward+0x168>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <lineFollowerBackward+0x168>)
 8001edc:	6013      	str	r3, [r2, #0]

    switch (statecode)
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <lineFollowerBackward+0x168>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d836      	bhi.n	8001f54 <lineFollowerBackward+0x13c>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <lineFollowerBackward+0xd4>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f29 	.word	0x08001f29
 8001ef0:	08001f23 	.word	0x08001f23
 8001ef4:	08001f1d 	.word	0x08001f1d
 8001ef8:	08001f55 	.word	0x08001f55
 8001efc:	08001f17 	.word	0x08001f17
 8001f00:	08001f55 	.word	0x08001f55
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f55 	.word	0x08001f55
 8001f0c:	08001f11 	.word	0x08001f11
    {
    case 0b1000:
      DLL(); //急左飄
 8001f10:	f7ff fda0 	bl	8001a54 <DLL>
      break;
 8001f14:	e01e      	b.n	8001f54 <lineFollowerBackward+0x13c>
    case 0b0100:
      DLS(); //微左飄
 8001f16:	f7ff fd7b 	bl	8001a10 <DLS>
      break;
 8001f1a:	e01b      	b.n	8001f54 <lineFollowerBackward+0x13c>
    case 0b0010:
      DRS(); //微右飄
 8001f1c:	f7ff fd34 	bl	8001988 <DRS>
      break;
 8001f20:	e018      	b.n	8001f54 <lineFollowerBackward+0x13c>
    case 0b0001:
      DRL(); //急右飄
 8001f22:	f7ff fd53 	bl	80019cc <DRL>
      break;
 8001f26:	e015      	b.n	8001f54 <lineFollowerBackward+0x13c>
    case 0b0000:
      pulse_servo2 = 500 + 2000 * 90 / 180;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <lineFollowerBackward+0x180>)
 8001f2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f2e:	601a      	str	r2, [r3, #0]
      pulse_servo3 = pulse_servo2;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <lineFollowerBackward+0x180>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <lineFollowerBackward+0x184>)
 8001f36:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <lineFollowerBackward+0x180>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <lineFollowerBackward+0x188>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <lineFollowerBackward+0x184>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <lineFollowerBackward+0x188>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
      writeServo(90);
 8001f4c:	4815      	ldr	r0, [pc, #84]	; (8001fa4 <lineFollowerBackward+0x18c>)
 8001f4e:	f7ff fc53 	bl	80017f8 <writeServo>
      break;
 8001f52:	bf00      	nop
  while (sec <= operationTime)
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <lineFollowerBackward+0x164>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fda7 	bl	8000aac <__aeabi_i2f>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7fe ffa8 	bl	8000eb8 <__aeabi_fcmpge>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f47f af61 	bne.w	8001e32 <lineFollowerBackward+0x1a>
    }

    if (operationTime == 100)
      brake;
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000164 	.word	0x20000164
 8001f80:	20000148 	.word	0x20000148
 8001f84:	2000003c 	.word	0x2000003c
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000008 	.word	0x20000008
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	20000154 	.word	0x20000154
 8001f9c:	20000158 	.word	0x20000158
 8001fa0:	2000006c 	.word	0x2000006c
 8001fa4:	42b40000 	.word	0x42b40000

08001fa8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <Error_Handler+0x8>
	...

08001fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_MspInit+0x5c>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_MspInit+0x5c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6193      	str	r3, [r2, #24]
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_MspInit+0x5c>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_MspInit+0x5c>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_MspInit+0x5c>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_MspInit+0x5c>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_MspInit+0x60>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_MspInit+0x60>)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000

08002018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <HAL_ADC_MspInit+0x6c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d121      	bne.n	800207c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_ADC_MspInit+0x70>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_ADC_MspInit+0x70>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_ADC_MspInit+0x70>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_ADC_MspInit+0x70>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_ADC_MspInit+0x70>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_ADC_MspInit+0x70>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002068:	230f      	movs	r3, #15
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206c:	2303      	movs	r3, #3
 800206e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4619      	mov	r1, r3
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_ADC_MspInit+0x74>)
 8002078:	f000 fee4 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40012400 	.word	0x40012400
 8002088:	40021000 	.word	0x40021000
 800208c:	40010800 	.word	0x40010800

08002090 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_TIM_PWM_MspInit+0x58>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_TIM_PWM_MspInit+0x5c>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_TIM_PWM_MspInit+0x5c>)
 80020a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ac:	6193      	str	r3, [r2, #24]
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_TIM_PWM_MspInit+0x5c>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020ba:	e010      	b.n	80020de <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d10b      	bne.n	80020de <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_TIM_PWM_MspInit+0x5c>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_TIM_PWM_MspInit+0x5c>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_TIM_PWM_MspInit+0x5c>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_TIM_Base_MspInit+0x44>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d113      	bne.n	800212a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_TIM_Base_MspInit+0x48>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_TIM_Base_MspInit+0x48>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_Base_MspInit+0x48>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	201d      	movs	r0, #29
 8002120:	f000 fe59 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002124:	201d      	movs	r0, #29
 8002126:	f000 fe72 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40000400 	.word	0x40000400
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <HAL_TIM_MspPostInit+0xbc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d119      	bne.n	8002190 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002174:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2302      	movs	r3, #2
 8002180:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	481d      	ldr	r0, [pc, #116]	; (8002200 <HAL_TIM_MspPostInit+0xc4>)
 800218a:	f000 fe5b 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800218e:	e02f      	b.n	80021f0 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d12a      	bne.n	80021f0 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6193      	str	r3, [r2, #24]
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_TIM_MspPostInit+0xc0>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	480e      	ldr	r0, [pc, #56]	; (8002200 <HAL_TIM_MspPostInit+0xc4>)
 80021c8:	f000 fe3c 	bl	8002e44 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_TIM_MspPostInit+0xc8>)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	6053      	str	r3, [r2, #4]
}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010000 	.word	0x40010000

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224e:	f000 f87f 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM3_IRQHandler+0x10>)
 800225e:	f001 fea3 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200000fc 	.word	0x200000fc

0800226c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800229e:	f7ff ffe5 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a2:	f002 fc85 	bl	8004bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a6:	f7fe fe41 	bl	8000f2c <main>
  bx lr
 80022aa:	4770      	bx	lr
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80022b4:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 80022b8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80022bc:	20000174 	.word	0x20000174

080022c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_2_IRQHandler>
	...

080022c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_Init+0x28>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_Init+0x28>)
 80022ce:	f043 0310 	orr.w	r3, r3, #16
 80022d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 fd73 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022da:	200f      	movs	r0, #15
 80022dc:	f000 f808 	bl	80022f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e0:	f7ff fe68 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_InitTick+0x54>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x58>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fd8b 	bl	8002e2a <HAL_SYSTICK_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00e      	b.n	800233c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d80a      	bhi.n	800233a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800232c:	f000 fd53 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4a06      	ldr	r2, [pc, #24]	; (800234c <HAL_InitTick+0x5c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000014 	.word	0x20000014
 8002348:	2000001c 	.word	0x2000001c
 800234c:	20000018 	.word	0x20000018

08002350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x1c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_IncTick+0x20>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_IncTick+0x20>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	2000001c 	.word	0x2000001c
 8002370:	20000170 	.word	0x20000170

08002374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_GetTick+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000170 	.word	0x20000170

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fff0 	bl	8002374 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffe0 	bl	8002374 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000001c 	.word	0x2000001c

080023d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0be      	b.n	8002570 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fe02 	bl	8002018 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fbc5 	bl	8002ba4 <ADC_ConversionStop_Disable>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8099 	bne.w	800255e <HAL_ADC_Init+0x18e>
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8095 	bne.w	800255e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800243c:	f023 0302 	bic.w	r3, r3, #2
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002450:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7b1b      	ldrb	r3, [r3, #12]
 8002456:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002458:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4313      	orrs	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002468:	d003      	beq.n	8002472 <HAL_ADC_Init+0xa2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_ADC_Init+0xa8>
 8002472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002476:	e000      	b.n	800247a <HAL_ADC_Init+0xaa>
 8002478:	2300      	movs	r3, #0
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7d1b      	ldrb	r3, [r3, #20]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d119      	bne.n	80024bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7b1b      	ldrb	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	3b01      	subs	r3, #1
 8002496:	035a      	lsls	r2, r3, #13
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e00b      	b.n	80024bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	4b28      	ldr	r3, [pc, #160]	; (8002578 <HAL_ADC_Init+0x1a8>)
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ec:	d003      	beq.n	80024f6 <HAL_ADC_Init+0x126>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d104      	bne.n	8002500 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	430a      	orrs	r2, r1
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_ADC_Init+0x1ac>)
 800251c:	4013      	ands	r3, r2
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	429a      	cmp	r2, r3
 8002522:	d10b      	bne.n	800253c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800253a:	e018      	b.n	800256e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f023 0312 	bic.w	r3, r3, #18
 8002544:	f043 0210 	orr.w	r2, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	ffe1f7fd 	.word	0xffe1f7fd
 800257c:	ff1f0efe 	.word	0xff1f0efe

08002580 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_ADC_Start+0x1a>
 8002596:	2302      	movs	r3, #2
 8002598:	e098      	b.n	80026cc <HAL_ADC_Start+0x14c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 faa4 	bl	8002af0 <ADC_Enable>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8087 	bne.w	80026c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <HAL_ADC_Start+0x154>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d105      	bne.n	80025de <HAL_ADC_Start+0x5e>
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <HAL_ADC_Start+0x158>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d026      	beq.n	8002646 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002600:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002608:	e01d      	b.n	8002646 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <HAL_ADC_Start+0x158>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_ADC_Start+0xaa>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_ADC_Start+0x154>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10d      	bne.n	8002646 <HAL_ADC_Start+0xc6>
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_ADC_Start+0x158>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800263e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f023 0206 	bic.w	r2, r3, #6
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62da      	str	r2, [r3, #44]	; 0x2c
 800265e:	e002      	b.n	8002666 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f06f 0202 	mvn.w	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002682:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002686:	d113      	bne.n	80026b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800268c:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_ADC_Start+0x154>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d105      	bne.n	800269e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_ADC_Start+0x158>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	e00c      	b.n	80026ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e003      	b.n	80026ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40012800 	.word	0x40012800
 80026d8:	40012400 	.word	0x40012400

080026dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026f2:	f7ff fe3f 	bl	8002374 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0d3      	b.n	80028c6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d131      	bne.n	8002790 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d12a      	bne.n	8002790 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800273a:	e021      	b.n	8002780 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002742:	d01d      	beq.n	8002780 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_ADC_PollForConversion+0x7e>
 800274a:	f7ff fe13 	bl	8002374 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d212      	bcs.n	8002780 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0a2      	b.n	80028c6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0d6      	beq.n	800273c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800278e:	e070      	b.n	8002872 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_ADC_PollForConversion+0x1f4>)
 8002792:	681c      	ldr	r4, [r3, #0]
 8002794:	2002      	movs	r0, #2
 8002796:	f001 f9bf 	bl	8003b18 <HAL_RCCEx_GetPeriphCLKFreq>
 800279a:	4603      	mov	r3, r0
 800279c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6919      	ldr	r1, [r3, #16]
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_ADC_PollForConversion+0x1f8>)
 80027a8:	400b      	ands	r3, r1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x104>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <HAL_ADC_PollForConversion+0x1fc>)
 80027b6:	400b      	ands	r3, r1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d111      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x104>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	4b46      	ldr	r3, [pc, #280]	; (80028dc <HAL_ADC_PollForConversion+0x200>)
 80027c4:	400b      	ands	r3, r1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_ADC_PollForConversion+0x100>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_ADC_PollForConversion+0x204>)
 80027d2:	400b      	ands	r3, r1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_PollForConversion+0x100>
 80027d8:	2314      	movs	r3, #20
 80027da:	e020      	b.n	800281e <HAL_ADC_PollForConversion+0x142>
 80027dc:	2329      	movs	r3, #41	; 0x29
 80027de:	e01e      	b.n	800281e <HAL_ADC_PollForConversion+0x142>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_ADC_PollForConversion+0x200>)
 80027e8:	400b      	ands	r3, r1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_ADC_PollForConversion+0x120>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68d9      	ldr	r1, [r3, #12]
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_ADC_PollForConversion+0x204>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <HAL_ADC_PollForConversion+0x13c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6919      	ldr	r1, [r3, #16]
 8002802:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_ADC_PollForConversion+0x208>)
 8002804:	400b      	ands	r3, r1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_ADC_PollForConversion+0x140>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68d9      	ldr	r1, [r3, #12]
 8002810:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_ADC_PollForConversion+0x208>)
 8002812:	400b      	ands	r3, r1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_PollForConversion+0x140>
 8002818:	2354      	movs	r3, #84	; 0x54
 800281a:	e000      	b.n	800281e <HAL_ADC_PollForConversion+0x142>
 800281c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002824:	e021      	b.n	800286a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282c:	d01a      	beq.n	8002864 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_ADC_PollForConversion+0x168>
 8002834:	f7ff fd9e 	bl	8002374 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d20f      	bcs.n	8002864 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d90b      	bls.n	8002864 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f043 0204 	orr.w	r2, r3, #4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e030      	b.n	80028c6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3301      	adds	r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	429a      	cmp	r2, r3
 8002870:	d8d9      	bhi.n	8002826 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f06f 0212 	mvn.w	r2, #18
 800287a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002892:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002896:	d115      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000014 	.word	0x20000014
 80028d4:	24924924 	.word	0x24924924
 80028d8:	00924924 	.word	0x00924924
 80028dc:	12492492 	.word	0x12492492
 80028e0:	00492492 	.word	0x00492492
 80028e4:	00249249 	.word	0x00249249

080028e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x20>
 800291c:	2302      	movs	r3, #2
 800291e:	e0dc      	b.n	8002ada <HAL_ADC_ConfigChannel+0x1da>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d81c      	bhi.n	800296a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b05      	subs	r3, #5
 8002942:	221f      	movs	r2, #31
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	4019      	ands	r1, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	3b05      	subs	r3, #5
 800295c:	fa00 f203 	lsl.w	r2, r0, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	635a      	str	r2, [r3, #52]	; 0x34
 8002968:	e03c      	b.n	80029e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d81c      	bhi.n	80029ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b23      	subs	r3, #35	; 0x23
 8002984:	221f      	movs	r2, #31
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	4019      	ands	r1, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	3b23      	subs	r3, #35	; 0x23
 800299e:	fa00 f203 	lsl.w	r2, r0, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
 80029aa:	e01b      	b.n	80029e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	3b41      	subs	r3, #65	; 0x41
 80029be:	221f      	movs	r2, #31
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4019      	ands	r1, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	3b41      	subs	r3, #65	; 0x41
 80029d8:	fa00 f203 	lsl.w	r2, r0, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	d91c      	bls.n	8002a26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68d9      	ldr	r1, [r3, #12]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	2207      	movs	r2, #7
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4019      	ands	r1, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6898      	ldr	r0, [r3, #8]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	3b1e      	subs	r3, #30
 8002a18:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	e019      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6919      	ldr	r1, [r3, #16]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	2207      	movs	r2, #7
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4019      	ands	r1, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6898      	ldr	r0, [r3, #8]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d003      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a66:	2b11      	cmp	r3, #17
 8002a68:	d132      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d125      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d126      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d11a      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <HAL_ADC_ConfigChannel+0x1ec>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	0c9a      	lsrs	r2, r3, #18
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ab0:	e002      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f9      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x1b2>
 8002abe:	e007      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40012400 	.word	0x40012400
 8002ae8:	20000014 	.word	0x20000014
 8002aec:	431bde83 	.word	0x431bde83

08002af0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d040      	beq.n	8002b90 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <ADC_Enable+0xac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <ADC_Enable+0xb0>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	0c9b      	lsrs	r3, r3, #18
 8002b2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b2c:	e002      	b.n	8002b34 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3a:	f7ff fc1b 	bl	8002374 <HAL_GetTick>
 8002b3e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b40:	e01f      	b.n	8002b82 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b42:	f7ff fc17 	bl	8002374 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d918      	bls.n	8002b82 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d011      	beq.n	8002b82 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d1d8      	bne.n	8002b42 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000014 	.word	0x20000014
 8002ba0:	431bde83 	.word	0x431bde83

08002ba4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d12e      	bne.n	8002c1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bce:	f7ff fbd1 	bl	8002374 <HAL_GetTick>
 8002bd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bd4:	e01b      	b.n	8002c0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bd6:	f7ff fbcd 	bl	8002374 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d914      	bls.n	8002c0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10d      	bne.n	8002c0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d0dc      	beq.n	8002bd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <__NVIC_EnableIRQ+0x34>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	6039      	str	r1, [r7, #0]
 8002cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	db0a      	blt.n	8002cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <__NVIC_SetPriority+0x4c>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cec:	e00a      	b.n	8002d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4908      	ldr	r1, [pc, #32]	; (8002d14 <__NVIC_SetPriority+0x50>)
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3b04      	subs	r3, #4
 8002cfc:	0112      	lsls	r2, r2, #4
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	761a      	strb	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	; 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f1c3 0307 	rsb	r3, r3, #7
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	bf28      	it	cs
 8002d36:	2304      	movcs	r3, #4
 8002d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2b06      	cmp	r3, #6
 8002d40:	d902      	bls.n	8002d48 <NVIC_EncodePriority+0x30>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3b03      	subs	r3, #3
 8002d46:	e000      	b.n	8002d4a <NVIC_EncodePriority+0x32>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43d9      	mvns	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d70:	4313      	orrs	r3, r2
         );
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da0:	f7ff ff90 	bl	8002cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff2d 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff42 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff90 	bl	8002d18 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5f 	bl	8002cc4 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff35 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b08b      	sub	sp, #44	; 0x2c
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e56:	e161      	b.n	800311c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f040 8150 	bne.w	8003116 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a97      	ldr	r2, [pc, #604]	; (80030d8 <HAL_GPIO_Init+0x294>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d05e      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e80:	4a95      	ldr	r2, [pc, #596]	; (80030d8 <HAL_GPIO_Init+0x294>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d875      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e86:	4a95      	ldr	r2, [pc, #596]	; (80030dc <HAL_GPIO_Init+0x298>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d058      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e8c:	4a93      	ldr	r2, [pc, #588]	; (80030dc <HAL_GPIO_Init+0x298>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d86f      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e92:	4a93      	ldr	r2, [pc, #588]	; (80030e0 <HAL_GPIO_Init+0x29c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d052      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e98:	4a91      	ldr	r2, [pc, #580]	; (80030e0 <HAL_GPIO_Init+0x29c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d869      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e9e:	4a91      	ldr	r2, [pc, #580]	; (80030e4 <HAL_GPIO_Init+0x2a0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04c      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002ea4:	4a8f      	ldr	r2, [pc, #572]	; (80030e4 <HAL_GPIO_Init+0x2a0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d863      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002eaa:	4a8f      	ldr	r2, [pc, #572]	; (80030e8 <HAL_GPIO_Init+0x2a4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d046      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002eb0:	4a8d      	ldr	r2, [pc, #564]	; (80030e8 <HAL_GPIO_Init+0x2a4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d85d      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002eb6:	2b12      	cmp	r3, #18
 8002eb8:	d82a      	bhi.n	8002f10 <HAL_GPIO_Init+0xcc>
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d859      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_GPIO_Init+0x80>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002f3f 	.word	0x08002f3f
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	08002f2b 	.word	0x08002f2b
 8002ed0:	08002f6d 	.word	0x08002f6d
 8002ed4:	08002f73 	.word	0x08002f73
 8002ed8:	08002f73 	.word	0x08002f73
 8002edc:	08002f73 	.word	0x08002f73
 8002ee0:	08002f73 	.word	0x08002f73
 8002ee4:	08002f73 	.word	0x08002f73
 8002ee8:	08002f73 	.word	0x08002f73
 8002eec:	08002f73 	.word	0x08002f73
 8002ef0:	08002f73 	.word	0x08002f73
 8002ef4:	08002f73 	.word	0x08002f73
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f73 	.word	0x08002f73
 8002f00:	08002f73 	.word	0x08002f73
 8002f04:	08002f73 	.word	0x08002f73
 8002f08:	08002f21 	.word	0x08002f21
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	4a76      	ldr	r2, [pc, #472]	; (80030ec <HAL_GPIO_Init+0x2a8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f16:	e02c      	b.n	8002f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	623b      	str	r3, [r7, #32]
          break;
 8002f1e:	e029      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	3304      	adds	r3, #4
 8002f26:	623b      	str	r3, [r7, #32]
          break;
 8002f28:	e024      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	623b      	str	r3, [r7, #32]
          break;
 8002f32:	e01f      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	623b      	str	r3, [r7, #32]
          break;
 8002f3c:	e01a      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f46:	2304      	movs	r3, #4
 8002f48:	623b      	str	r3, [r7, #32]
          break;
 8002f4a:	e013      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f54:	2308      	movs	r3, #8
 8002f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	611a      	str	r2, [r3, #16]
          break;
 8002f5e:	e009      	b.n	8002f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f60:	2308      	movs	r3, #8
 8002f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	615a      	str	r2, [r3, #20]
          break;
 8002f6a:	e003      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          break;
 8002f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d801      	bhi.n	8002f7e <HAL_GPIO_Init+0x13a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_Init+0x13e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2bff      	cmp	r3, #255	; 0xff
 8002f88:	d802      	bhi.n	8002f90 <HAL_GPIO_Init+0x14c>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	e002      	b.n	8002f96 <HAL_GPIO_Init+0x152>
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	3b08      	subs	r3, #8
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	210f      	movs	r1, #15
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a9 	beq.w	8003116 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc4:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a49      	ldr	r2, [pc, #292]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fdc:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_GPIO_Init+0x2b0>)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <HAL_GPIO_Init+0x2b4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00d      	beq.n	8003024 <HAL_GPIO_Init+0x1e0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3c      	ldr	r2, [pc, #240]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <HAL_GPIO_Init+0x1dc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <HAL_GPIO_Init+0x2bc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_GPIO_Init+0x1d8>
 8003018:	2302      	movs	r3, #2
 800301a:	e004      	b.n	8003026 <HAL_GPIO_Init+0x1e2>
 800301c:	2303      	movs	r3, #3
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x1e2>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x1e2>
 8003024:	2300      	movs	r3, #0
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003036:	492f      	ldr	r1, [pc, #188]	; (80030f4 <HAL_GPIO_Init+0x2b0>)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003050:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	492b      	ldr	r1, [pc, #172]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	43db      	mvns	r3, r3
 8003066:	4927      	ldr	r1, [pc, #156]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003068:	4013      	ands	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	4921      	ldr	r1, [pc, #132]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	43db      	mvns	r3, r3
 800308e:	491d      	ldr	r1, [pc, #116]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003090:	4013      	ands	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4917      	ldr	r1, [pc, #92]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4913      	ldr	r1, [pc, #76]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01f      	beq.n	8003108 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	490d      	ldr	r1, [pc, #52]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
 80030d4:	e01f      	b.n	8003116 <HAL_GPIO_Init+0x2d2>
 80030d6:	bf00      	nop
 80030d8:	10320000 	.word	0x10320000
 80030dc:	10310000 	.word	0x10310000
 80030e0:	10220000 	.word	0x10220000
 80030e4:	10210000 	.word	0x10210000
 80030e8:	10120000 	.word	0x10120000
 80030ec:	10110000 	.word	0x10110000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010800 	.word	0x40010800
 80030fc:	40010c00 	.word	0x40010c00
 8003100:	40011000 	.word	0x40011000
 8003104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_GPIO_Init+0x2f4>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4909      	ldr	r1, [pc, #36]	; (8003138 <HAL_GPIO_Init+0x2f4>)
 8003112:	4013      	ands	r3, r2
 8003114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f ae96 	bne.w	8002e58 <HAL_GPIO_Init+0x14>
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	372c      	adds	r7, #44	; 0x2c
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
 8003148:	4613      	mov	r3, r2
 800314a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314c:	787b      	ldrb	r3, [r7, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003158:	e003      	b.n	8003162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	611a      	str	r2, [r3, #16]
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4013      	ands	r3, r2
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43d9      	mvns	r1, r3
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	400b      	ands	r3, r1
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e272      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8087 	beq.w	80032ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c0:	4b92      	ldr	r3, [pc, #584]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d00c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031cc:	4b8f      	ldr	r3, [pc, #572]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d112      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
 80031d8:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d10b      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d06c      	beq.n	80032cc <HAL_RCC_OscConfig+0x12c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d168      	bne.n	80032cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e24c      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x76>
 8003208:	4b80      	ldr	r3, [pc, #512]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7f      	ldr	r2, [pc, #508]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e02e      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b7b      	ldr	r3, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7a      	ldr	r2, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b78      	ldr	r3, [pc, #480]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a77      	ldr	r2, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0xbc>
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a71      	ldr	r2, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6f      	ldr	r3, [pc, #444]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 800325c:	4b6b      	ldr	r3, [pc, #428]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6a      	ldr	r2, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a67      	ldr	r2, [pc, #412]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7ff f87a 	bl	8002374 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7ff f876 	bl	8002374 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e200      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b5d      	ldr	r3, [pc, #372]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xe4>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7ff f866 	bl	8002374 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7ff f862 	bl	8002374 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1ec      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x10c>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032da:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032e6:	4b49      	ldr	r3, [pc, #292]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x18c>
 80032f2:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x176>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1c0      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4939      	ldr	r1, [pc, #228]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7ff f81b 	bl	8002374 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7ff f817 	bl	8002374 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1a1      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4927      	ldr	r1, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <HAL_RCC_OscConfig+0x270>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fffa 	bl	8002374 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fff6 	bl	8002374 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e180      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03a      	beq.n	8003424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d019      	beq.n	80033ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <HAL_RCC_OscConfig+0x274>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe ffda 	bl	8002374 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe ffd6 	bl	8002374 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e160      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f000 fac4 	bl	8003970 <RCC_Delay>
 80033e8:	e01c      	b.n	8003424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_OscConfig+0x274>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fe ffc0 	bl	8002374 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f6:	e00f      	b.n	8003418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f8:	f7fe ffbc 	bl	8002374 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d908      	bls.n	8003418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e146      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	42420000 	.word	0x42420000
 8003414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b92      	ldr	r3, [pc, #584]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e9      	bne.n	80033f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a6 	beq.w	800357e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a87      	ldr	r2, [pc, #540]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b82      	ldr	r3, [pc, #520]	; (8003668 <HAL_RCC_OscConfig+0x4c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346a:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7e      	ldr	r2, [pc, #504]	; (8003668 <HAL_RCC_OscConfig+0x4c8>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fe ff7d 	bl	8002374 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe ff79 	bl	8002374 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	; 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e103      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b75      	ldr	r3, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x4c8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x312>
 80034a4:	4b6f      	ldr	r3, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	e02d      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x334>
 80034ba:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4a69      	ldr	r2, [pc, #420]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6213      	str	r3, [r2, #32]
 80034c6:	4b67      	ldr	r3, [pc, #412]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a66      	ldr	r2, [pc, #408]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	e01c      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d10c      	bne.n	80034f6 <HAL_RCC_OscConfig+0x356>
 80034dc:	4b61      	ldr	r3, [pc, #388]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4a60      	ldr	r2, [pc, #384]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6213      	str	r3, [r2, #32]
 80034e8:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a57      	ldr	r2, [pc, #348]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d015      	beq.n	8003542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003516:	f7fe ff2d 	bl	8002374 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe ff29 	bl	8002374 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0b1      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCC_OscConfig+0x37e>
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe ff17 	bl	8002374 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe ff13 	bl	8002374 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e09b      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	4b40      	ldr	r3, [pc, #256]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b3c      	ldr	r3, [pc, #240]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a3b      	ldr	r2, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8087 	beq.w	8003696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003588:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d061      	beq.n	8003658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d146      	bne.n	800362a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b33      	ldr	r3, [pc, #204]	; (800366c <HAL_RCC_OscConfig+0x4cc>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fe fee7 	bl	8002374 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe fee3 	bl	8002374 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e06d      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035bc:	4b29      	ldr	r3, [pc, #164]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4921      	ldr	r1, [pc, #132]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e4:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a19      	ldr	r1, [r3, #32]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	430b      	orrs	r3, r1
 80035f6:	491b      	ldr	r1, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x4cc>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fe feb7 	bl	8002374 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fe feb3 	bl	8002374 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e03d      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x46a>
 8003628:	e035      	b.n	8003696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <HAL_RCC_OscConfig+0x4cc>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fea0 	bl	8002374 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe fe9c 	bl	8002374 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e026      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x498>
 8003656:	e01e      	b.n	8003696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e019      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_OscConfig+0x500>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	429a      	cmp	r2, r3
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000

080036a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0d0      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d910      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b67      	ldr	r3, [pc, #412]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0207 	bic.w	r2, r3, #7
 80036ce:	4965      	ldr	r1, [pc, #404]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a58      	ldr	r2, [pc, #352]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800370a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d040      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d115      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e073      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06b      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b39      	ldr	r3, [pc, #228]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4936      	ldr	r1, [pc, #216]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe fdee 	bl	8002374 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe fdea 	bl	8002374 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e053      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d210      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	4922      	ldr	r1, [pc, #136]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1cc>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1d0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fd4c 	bl	80022f0 <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40022000 	.word	0x40022000
 8003868:	40021000 	.word	0x40021000
 800386c:	08004c40 	.word	0x08004c40
 8003870:	20000014 	.word	0x20000014
 8003874:	20000018 	.word	0x20000018

08003878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	b490      	push	{r4, r7}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCC_GetSysClockFreq+0xac>)
 8003880:	1d3c      	adds	r4, r7, #4
 8003882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003888:	f240 2301 	movw	r3, #513	; 0x201
 800388c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038a2:	4b21      	ldr	r3, [pc, #132]	; (8003928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x46>
 80038b6:	e02b      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ba:	623b      	str	r3, [r7, #32]
      break;
 80038bc:	e02b      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	0c9b      	lsrs	r3, r3, #18
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3328      	adds	r3, #40	; 0x28
 80038c8:	443b      	add	r3, r7
 80038ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d012      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	0c5b      	lsrs	r3, r3, #17
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	3328      	adds	r3, #40	; 0x28
 80038e6:	443b      	add	r3, r7
 80038e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4a0e      	ldr	r2, [pc, #56]	; (800392c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038f2:	fb03 f202 	mul.w	r2, r3, r2
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	e004      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	623b      	str	r3, [r7, #32]
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003912:	623b      	str	r3, [r7, #32]
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	6a3b      	ldr	r3, [r7, #32]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3728      	adds	r7, #40	; 0x28
 800391c:	46bd      	mov	sp, r7
 800391e:	bc90      	pop	{r4, r7}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	08004c20 	.word	0x08004c20
 8003928:	40021000 	.word	0x40021000
 800392c:	007a1200 	.word	0x007a1200
 8003930:	003d0900 	.word	0x003d0900

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <HAL_RCC_GetHCLKFreq+0x10>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	20000014 	.word	0x20000014

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800394c:	f7ff fff2 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0adb      	lsrs	r3, r3, #11
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08004c50 	.word	0x08004c50

08003970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <RCC_Delay+0x34>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <RCC_Delay+0x38>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a5b      	lsrs	r3, r3, #9
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800398c:	bf00      	nop
  }
  while (Delay --);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <RCC_Delay+0x1c>
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000014 	.word	0x20000014
 80039a8:	10624dd3 	.word	0x10624dd3

080039ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d07d      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039cc:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d8:	4b4c      	ldr	r3, [pc, #304]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	4a4b      	ldr	r2, [pc, #300]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	61d3      	str	r3, [r2, #28]
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d118      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a42      	ldr	r2, [pc, #264]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fcb2 	bl	8002374 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	e008      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a14:	f7fe fcae 	bl	8002374 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e06d      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b3a      	ldr	r3, [pc, #232]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02e      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d027      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a50:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a66:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d014      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fe fc7d 	bl	8002374 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe fc79 	bl	8002374 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e036      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ee      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	490b      	ldr	r1, [pc, #44]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	42420440 	.word	0x42420440

08003b18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b08d      	sub	sp, #52	; 0x34
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b20:	4b58      	ldr	r3, [pc, #352]	; (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003b22:	f107 040c 	add.w	r4, r7, #12
 8003b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b2c:	f240 2301 	movw	r3, #513	; 0x201
 8003b30:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	2300      	movs	r3, #0
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	2300      	movs	r3, #0
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	f200 808e 	bhi.w	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d049      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d079      	beq.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b60:	e086      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003b62:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b68:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d07f      	beq.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	3330      	adds	r3, #48	; 0x30
 8003b7e:	443b      	add	r3, r7
 8003b80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b84:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d017      	beq.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b90:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	0c5b      	lsrs	r3, r3, #17
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	3330      	adds	r3, #48	; 0x30
 8003b9c:	443b      	add	r3, r7
 8003b9e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bae:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bca:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d102      	bne.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bdc:	e04a      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bec:	e042      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	d108      	bne.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c10:	e01f      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003c2a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c30:	e00f      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003c4a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c50:	e012      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003c52:	e011      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c54:	f7ff fe78 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0b9b      	lsrs	r3, r3, #14
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	3301      	adds	r3, #1
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003c70:	bf00      	nop
 8003c72:	e002      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003c78:	bf00      	nop
    }
  }
  return (frequency);
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3734      	adds	r7, #52	; 0x34
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}
 8003c84:	08004c30 	.word	0x08004c30
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	003d0900 	.word	0x003d0900
 8003c94:	aaaaaaab 	.word	0xaaaaaaab

08003c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe fa16 	bl	80020f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f000 fc14 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e035      	b.n	8003dbc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIM_Base_Start_IT+0x90>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x4e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x4e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <HAL_TIM_Base_Start_IT+0x94>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d010      	beq.n	8003dba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	e007      	b.n	8003dba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40000400 	.word	0x40000400

08003dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e041      	b.n	8003e66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe f94a 	bl	8002090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 fb78 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_TIM_PWM_Start+0x24>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e022      	b.n	8003eda <HAL_TIM_PWM_Start+0x6a>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d109      	bne.n	8003eae <HAL_TIM_PWM_Start+0x3e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	bf14      	ite	ne
 8003ea6:	2301      	movne	r3, #1
 8003ea8:	2300      	moveq	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	e015      	b.n	8003eda <HAL_TIM_PWM_Start+0x6a>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d109      	bne.n	8003ec8 <HAL_TIM_PWM_Start+0x58>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	bf14      	ite	ne
 8003ec0:	2301      	movne	r3, #1
 8003ec2:	2300      	moveq	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e008      	b.n	8003eda <HAL_TIM_PWM_Start+0x6a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e059      	b.n	8003f96 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0x82>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef0:	e013      	b.n	8003f1a <HAL_TIM_PWM_Start+0xaa>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x92>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f00:	e00b      	b.n	8003f1a <HAL_TIM_PWM_Start+0xaa>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_PWM_Start+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f10:	e003      	b.n	8003f1a <HAL_TIM_PWM_Start+0xaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fd64 	bl	80049f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_TIM_PWM_Start+0x130>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <HAL_TIM_PWM_Start+0x130>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d009      	beq.n	8003f60 <HAL_TIM_PWM_Start+0xf0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d004      	beq.n	8003f60 <HAL_TIM_PWM_Start+0xf0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <HAL_TIM_PWM_Start+0x134>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d111      	bne.n	8003f84 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d010      	beq.n	8003f94 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f82:	e007      	b.n	8003f94 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400

08003fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d122      	bne.n	8004004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0202 	mvn.w	r2, #2
 8003fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa6f 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa62 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa71 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b04      	cmp	r3, #4
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0204 	mvn.w	r2, #4
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa45 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa38 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa47 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b08      	cmp	r3, #8
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0208 	mvn.w	r2, #8
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2204      	movs	r2, #4
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fa1b 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fa0e 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa1d 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0210 	mvn.w	r2, #16
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2208      	movs	r2, #8
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9f1 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f9e4 	bl	80044bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f9f3 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0201 	mvn.w	r2, #1
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fd fb40 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b80      	cmp	r3, #128	; 0x80
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fd22 	bl	8004b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9b7 	bl	80044f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b20      	cmp	r3, #32
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0220 	mvn.w	r2, #32
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fced 	bl	8004b8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0ac      	b.n	800432c <HAL_TIM_PWM_ConfigChannel+0x174>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	f200 809f 	bhi.w	8004320 <HAL_TIM_PWM_ConfigChannel+0x168>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	08004321 	.word	0x08004321
 80041f0:	08004321 	.word	0x08004321
 80041f4:	08004321 	.word	0x08004321
 80041f8:	0800425d 	.word	0x0800425d
 80041fc:	08004321 	.word	0x08004321
 8004200:	08004321 	.word	0x08004321
 8004204:	08004321 	.word	0x08004321
 8004208:	0800429f 	.word	0x0800429f
 800420c:	08004321 	.word	0x08004321
 8004210:	08004321 	.word	0x08004321
 8004214:	08004321 	.word	0x08004321
 8004218:	080042df 	.word	0x080042df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f9c6 	bl	80045b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0208 	orr.w	r2, r2, #8
 8004236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0204 	bic.w	r2, r2, #4
 8004246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6999      	ldr	r1, [r3, #24]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	619a      	str	r2, [r3, #24]
      break;
 800425a:	e062      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fa0c 	bl	8004680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6999      	ldr	r1, [r3, #24]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	619a      	str	r2, [r3, #24]
      break;
 800429c:	e041      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fa55 	bl	8004754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0208 	orr.w	r2, r2, #8
 80042b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0204 	bic.w	r2, r2, #4
 80042c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69d9      	ldr	r1, [r3, #28]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	61da      	str	r2, [r3, #28]
      break;
 80042dc:	e021      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fa9f 	bl	8004828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69d9      	ldr	r1, [r3, #28]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	021a      	lsls	r2, r3, #8
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	61da      	str	r2, [r3, #28]
      break;
 800431e:	e000      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIM_ConfigClockSource+0x18>
 8004348:	2302      	movs	r3, #2
 800434a:	e0b3      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x180>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800436a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004372:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004384:	d03e      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0xd0>
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438a:	f200 8087 	bhi.w	800449c <HAL_TIM_ConfigClockSource+0x168>
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004392:	f000 8085 	beq.w	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439a:	d87f      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 800439c:	2b70      	cmp	r3, #112	; 0x70
 800439e:	d01a      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0xa2>
 80043a0:	2b70      	cmp	r3, #112	; 0x70
 80043a2:	d87b      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 80043a4:	2b60      	cmp	r3, #96	; 0x60
 80043a6:	d050      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x116>
 80043a8:	2b60      	cmp	r3, #96	; 0x60
 80043aa:	d877      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 80043ac:	2b50      	cmp	r3, #80	; 0x50
 80043ae:	d03c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xf6>
 80043b0:	2b50      	cmp	r3, #80	; 0x50
 80043b2:	d873      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d058      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x136>
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d86f      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 80043bc:	2b30      	cmp	r3, #48	; 0x30
 80043be:	d064      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x156>
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d86b      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d060      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x156>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d867      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x168>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05c      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x156>
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d05a      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043d4:	e062      	b.n	800449c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6899      	ldr	r1, [r3, #8]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f000 fae4 	bl	80049b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	609a      	str	r2, [r3, #8]
      break;
 8004402:	e04e      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f000 facd 	bl	80049b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004426:	609a      	str	r2, [r3, #8]
      break;
 8004428:	e03b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	f000 fa44 	bl	80048c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2150      	movs	r1, #80	; 0x50
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa9b 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 8004448:	e02b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	461a      	mov	r2, r3
 8004458:	f000 fa62 	bl	8004920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2160      	movs	r1, #96	; 0x60
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa8b 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 8004468:	e01b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	461a      	mov	r2, r3
 8004478:	f000 fa24 	bl	80048c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa7b 	bl	800497e <TIM_ITRx_SetConfig>
      break;
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f000 fa72 	bl	800497e <TIM_ITRx_SetConfig>
        break;
 800449a:	e002      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800449c:	bf00      	nop
 800449e:	e000      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a25      	ldr	r2, [pc, #148]	; (80045ac <TIM_Base_SetConfig+0xa8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0x28>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0x28>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <TIM_Base_SetConfig+0xac>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d108      	bne.n	800453e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <TIM_Base_SetConfig+0xa8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x52>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x52>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <TIM_Base_SetConfig+0xac>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <TIM_Base_SetConfig+0xa8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	615a      	str	r2, [r3, #20]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400

080045b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0201 	bic.w	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0303 	bic.w	r3, r3, #3
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a1c      	ldr	r2, [pc, #112]	; (800467c <TIM_OC1_SetConfig+0xc8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10c      	bne.n	800462a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 0308 	bic.w	r3, r3, #8
 8004616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a13      	ldr	r2, [pc, #76]	; (800467c <TIM_OC1_SetConfig+0xc8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d111      	bne.n	8004656 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00

08004680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0320 	bic.w	r3, r3, #32
 80046ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <TIM_OC2_SetConfig+0xd0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10d      	bne.n	80046fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a14      	ldr	r2, [pc, #80]	; (8004750 <TIM_OC2_SetConfig+0xd0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d113      	bne.n	800472c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800470a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00

08004754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800479c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_OC3_SetConfig+0xd0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <TIM_OC3_SetConfig+0xd0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00

08004828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <TIM_OC4_SetConfig+0x98>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d109      	bne.n	800489c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800488e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	019b      	lsls	r3, r3, #6
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	40012c00 	.word	0x40012c00

080048c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f023 030a 	bic.w	r3, r3, #10
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	bf00      	nop
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f023 0210 	bic.w	r2, r3, #16
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800494a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	031b      	lsls	r3, r3, #12
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800495c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	621a      	str	r2, [r3, #32]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	f043 0307 	orr.w	r3, r3, #7
 80049a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b087      	sub	sp, #28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	021a      	lsls	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4313      	orrs	r3, r2
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	609a      	str	r2, [r3, #8]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	2201      	movs	r2, #1
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1a      	ldr	r2, [r3, #32]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1a      	ldr	r2, [r3, #32]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	fa01 f303 	lsl.w	r3, r1, r3
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e041      	b.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9c:	d004      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40000400 	.word	0x40000400

08004ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e03d      	b.n	8004b80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr
	...

08004bb0 <__libc_init_array>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	4d0c      	ldr	r5, [pc, #48]	; (8004be8 <__libc_init_array+0x38>)
 8004bb6:	4c0d      	ldr	r4, [pc, #52]	; (8004bec <__libc_init_array+0x3c>)
 8004bb8:	1b64      	subs	r4, r4, r5
 8004bba:	10a4      	asrs	r4, r4, #2
 8004bbc:	42a6      	cmp	r6, r4
 8004bbe:	d109      	bne.n	8004bd4 <__libc_init_array+0x24>
 8004bc0:	f000 f822 	bl	8004c08 <_init>
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	4d0a      	ldr	r5, [pc, #40]	; (8004bf0 <__libc_init_array+0x40>)
 8004bc8:	4c0a      	ldr	r4, [pc, #40]	; (8004bf4 <__libc_init_array+0x44>)
 8004bca:	1b64      	subs	r4, r4, r5
 8004bcc:	10a4      	asrs	r4, r4, #2
 8004bce:	42a6      	cmp	r6, r4
 8004bd0:	d105      	bne.n	8004bde <__libc_init_array+0x2e>
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd8:	4798      	blx	r3
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7ee      	b.n	8004bbc <__libc_init_array+0xc>
 8004bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be2:	4798      	blx	r3
 8004be4:	3601      	adds	r6, #1
 8004be6:	e7f2      	b.n	8004bce <__libc_init_array+0x1e>
 8004be8:	08004c58 	.word	0x08004c58
 8004bec:	08004c58 	.word	0x08004c58
 8004bf0:	08004c58 	.word	0x08004c58
 8004bf4:	08004c5c 	.word	0x08004c5c

08004bf8 <memset>:
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4402      	add	r2, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
