
PracticeOfMechanicalEngineering.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002310  08005178  08005178  00015178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007488  08007488  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08007488  08007488  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007488  08007488  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08007490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000030  080074c0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  080074c0  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001707b  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309d  00000000  00000000  000370d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e832  00000000  00000000  0003a171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  000489a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001998  00000000  00000000  00049720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b6c  00000000  00000000  0004b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019244  00000000  00000000  00063c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091286  00000000  00000000  0007ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e0ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003070  00000000  00000000  0010e140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	0800515c 	.word	0x0800515c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	0800515c 	.word	0x0800515c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__gesf2>:
 8000d48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000d4c:	e006      	b.n	8000d5c <__cmpsf2+0x4>
 8000d4e:	bf00      	nop

08000d50 <__lesf2>:
 8000d50:	f04f 0c01 	mov.w	ip, #1
 8000d54:	e002      	b.n	8000d5c <__cmpsf2+0x4>
 8000d56:	bf00      	nop

08000d58 <__cmpsf2>:
 8000d58:	f04f 0c01 	mov.w	ip, #1
 8000d5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d6c:	bf18      	it	ne
 8000d6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d72:	d011      	beq.n	8000d98 <__cmpsf2+0x40>
 8000d74:	b001      	add	sp, #4
 8000d76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d7a:	bf18      	it	ne
 8000d7c:	ea90 0f01 	teqne	r0, r1
 8000d80:	bf58      	it	pl
 8000d82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d86:	bf88      	it	hi
 8000d88:	17c8      	asrhi	r0, r1, #31
 8000d8a:	bf38      	it	cc
 8000d8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d90:	bf18      	it	ne
 8000d92:	f040 0001 	orrne.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d9c:	d102      	bne.n	8000da4 <__cmpsf2+0x4c>
 8000d9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000da2:	d105      	bne.n	8000db0 <__cmpsf2+0x58>
 8000da4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da8:	d1e4      	bne.n	8000d74 <__cmpsf2+0x1c>
 8000daa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dae:	d0e1      	beq.n	8000d74 <__cmpsf2+0x1c>
 8000db0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <__aeabi_cfrcmple>:
 8000db8:	4684      	mov	ip, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4661      	mov	r1, ip
 8000dbe:	e7ff      	b.n	8000dc0 <__aeabi_cfcmpeq>

08000dc0 <__aeabi_cfcmpeq>:
 8000dc0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dc2:	f7ff ffc9 	bl	8000d58 <__cmpsf2>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	bf48      	it	mi
 8000dca:	f110 0f00 	cmnmi.w	r0, #0
 8000dce:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dd0 <__aeabi_fcmpeq>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff fff4 	bl	8000dc0 <__aeabi_cfcmpeq>
 8000dd8:	bf0c      	ite	eq
 8000dda:	2001      	moveq	r0, #1
 8000ddc:	2000      	movne	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_fcmplt>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffea 	bl	8000dc0 <__aeabi_cfcmpeq>
 8000dec:	bf34      	ite	cc
 8000dee:	2001      	movcc	r0, #1
 8000df0:	2000      	movcs	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_fcmple>:
 8000df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dfc:	f7ff ffe0 	bl	8000dc0 <__aeabi_cfcmpeq>
 8000e00:	bf94      	ite	ls
 8000e02:	2001      	movls	r0, #1
 8000e04:	2000      	movhi	r0, #0
 8000e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0a:	bf00      	nop

08000e0c <__aeabi_fcmpge>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff ffd2 	bl	8000db8 <__aeabi_cfrcmple>
 8000e14:	bf94      	ite	ls
 8000e16:	2001      	movls	r0, #1
 8000e18:	2000      	movhi	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmpgt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffc8 	bl	8000db8 <__aeabi_cfrcmple>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8000e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	4692      	mov	sl, r2
 8000e3e:	461d      	mov	r5, r3
	// check precision bounds
	if (precision > MAX_PRECISION)
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 8000e40:	2200      	movs	r2, #0
 8000e42:	2300      	movs	r3, #0
{
 8000e44:	4607      	mov	r7, r0
 8000e46:	460e      	mov	r6, r1
	if (f < 0)
 8000e48:	f7ff fdb0 	bl	80009ac <__aeabi_dcmplt>
	{
		f = -f;
		*ptr++ = '-';
 8000e4c:	46d0      	mov	r8, sl
	if (f < 0)
 8000e4e:	b120      	cbz	r0, 8000e5a <ftoa+0x22>
		*ptr++ = '-';
 8000e50:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 8000e52:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		*ptr++ = '-';
 8000e56:	f808 3b01 	strb.w	r3, [r8], #1
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8000e5a:	2d00      	cmp	r5, #0
 8000e5c:	da59      	bge.n	8000f12 <ftoa+0xda>
	{
		if (f < 1.0) precision = 6;
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4638      	mov	r0, r7
 8000e62:	4631      	mov	r1, r6
 8000e64:	4b56      	ldr	r3, [pc, #344]	; (8000fc0 <ftoa+0x188>)
 8000e66:	f7ff fda1 	bl	80009ac <__aeabi_dcmplt>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d163      	bne.n	8000f36 <ftoa+0xfe>
		else if (f < 10.0) precision = 5;
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4638      	mov	r0, r7
 8000e72:	4631      	mov	r1, r6
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <ftoa+0x18c>)
 8000e76:	f7ff fd99 	bl	80009ac <__aeabi_dcmplt>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d15d      	bne.n	8000f3a <ftoa+0x102>
		else if (f < 100.0) precision = 4;
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4638      	mov	r0, r7
 8000e82:	4631      	mov	r1, r6
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <ftoa+0x190>)
 8000e86:	f7ff fd91 	bl	80009ac <__aeabi_dcmplt>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	d157      	bne.n	8000f3e <ftoa+0x106>
		else if (f < 1000.0) precision = 3;
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4638      	mov	r0, r7
 8000e92:	4631      	mov	r1, r6
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <ftoa+0x194>)
 8000e96:	f7ff fd89 	bl	80009ac <__aeabi_dcmplt>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d151      	bne.n	8000f42 <ftoa+0x10a>
		else if (f < 10000.0) precision = 2;
 8000e9e:	a344      	add	r3, pc, #272	; (adr r3, 8000fb0 <ftoa+0x178>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	f7ff fd80 	bl	80009ac <__aeabi_dcmplt>
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d14a      	bne.n	8000f46 <ftoa+0x10e>
		else if (f < 100000.0) precision = 1;
 8000eb0:	a341      	add	r3, pc, #260	; (adr r3, 8000fb8 <ftoa+0x180>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	4631      	mov	r1, r6
 8000eba:	f7ff fd77 	bl	80009ac <__aeabi_dcmplt>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d142      	bne.n	8000f4a <ftoa+0x112>
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	f7ff fd98 	bl	80009fc <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d13e      	bne.n	8000f4e <ftoa+0x116>
		*ptr++ = '0';
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	2330      	movs	r3, #48	; 0x30
 8000ed4:	f805 3b01 	strb.w	r3, [r5], #1
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8000ed8:	b1ac      	cbz	r4, 8000f06 <ftoa+0xce>
	f -= intPart;
 8000eda:	f7ff fa8b 	bl	80003f4 <__aeabi_i2d>
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	f7ff f937 	bl	8000158 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 8000eea:	232e      	movs	r3, #46	; 0x2e
 8000eec:	46ab      	mov	fp, r5

		// convert
		while (precision--)
		{
			f *= 10.0;
 8000eee:	f04f 0800 	mov.w	r8, #0
		*ptr++ = '.';
 8000ef2:	702b      	strb	r3, [r5, #0]
			f *= 10.0;
 8000ef4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8000fc4 <ftoa+0x18c>
 8000ef8:	192b      	adds	r3, r5, r4
 8000efa:	9301      	str	r3, [sp, #4]
		while (precision--)
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	455b      	cmp	r3, fp
 8000f00:	d13d      	bne.n	8000f7e <ftoa+0x146>
 8000f02:	3401      	adds	r4, #1
 8000f04:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 8000f06:	2300      	movs	r3, #0

	return buf;
}
 8000f08:	4650      	mov	r0, sl
	*ptr = 0;
 8000f0a:	702b      	strb	r3, [r5, #0]
}
 8000f0c:	b003      	add	sp, #12
 8000f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f12:	2d0a      	cmp	r5, #10
 8000f14:	462c      	mov	r4, r5
 8000f16:	bfa8      	it	ge
 8000f18:	240a      	movge	r4, #10
	if (precision)
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d0d2      	beq.n	8000ec4 <ftoa+0x8c>
		f += rounders[precision];
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <ftoa+0x198>)
 8000f20:	4638      	mov	r0, r7
 8000f22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000f26:	4631      	mov	r1, r6
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff f916 	bl	800015c <__adddf3>
 8000f30:	4607      	mov	r7, r0
 8000f32:	460e      	mov	r6, r1
 8000f34:	e7c6      	b.n	8000ec4 <ftoa+0x8c>
		if (f < 1.0) precision = 6;
 8000f36:	2406      	movs	r4, #6
 8000f38:	e7f1      	b.n	8000f1e <ftoa+0xe6>
		else if (f < 10.0) precision = 5;
 8000f3a:	2405      	movs	r4, #5
 8000f3c:	e7ef      	b.n	8000f1e <ftoa+0xe6>
		else if (f < 100.0) precision = 4;
 8000f3e:	2404      	movs	r4, #4
 8000f40:	e7ed      	b.n	8000f1e <ftoa+0xe6>
		else if (f < 1000.0) precision = 3;
 8000f42:	2403      	movs	r4, #3
 8000f44:	e7eb      	b.n	8000f1e <ftoa+0xe6>
		else if (f < 10000.0) precision = 2;
 8000f46:	2402      	movs	r4, #2
 8000f48:	e7e9      	b.n	8000f1e <ftoa+0xe6>
		else if (f < 100000.0) precision = 1;
 8000f4a:	2401      	movs	r4, #1
 8000f4c:	e7e7      	b.n	8000f1e <ftoa+0xe6>
 8000f4e:	4603      	mov	r3, r0
		p = ptr;
 8000f50:	4645      	mov	r5, r8
			*p++ = '0' + intPart % 10;
 8000f52:	210a      	movs	r1, #10
 8000f54:	fb93 f2f1 	sdiv	r2, r3, r1
 8000f58:	fb01 3312 	mls	r3, r1, r2, r3
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 8000f62:	4613      	mov	r3, r2
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	d1f5      	bne.n	8000f54 <ftoa+0x11c>
			*p++ = '0' + intPart % 10;
 8000f68:	462b      	mov	r3, r5
		while (p > ptr)
 8000f6a:	4598      	cmp	r8, r3
 8000f6c:	d2b4      	bcs.n	8000ed8 <ftoa+0xa0>
			c = *--p;
 8000f6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 8000f72:	f898 1000 	ldrb.w	r1, [r8]
 8000f76:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 8000f78:	f808 2b01 	strb.w	r2, [r8], #1
 8000f7c:	e7f5      	b.n	8000f6a <ftoa+0x132>
			f *= 10.0;
 8000f7e:	4642      	mov	r2, r8
 8000f80:	464b      	mov	r3, r9
 8000f82:	f7ff faa1 	bl	80004c8 <__aeabi_dmul>
 8000f86:	460f      	mov	r7, r1
 8000f88:	4606      	mov	r6, r0
			c = f;
 8000f8a:	f7ff fd5f 	bl	8000a4c <__aeabi_d2uiz>
 8000f8e:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 8000f90:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8000f94:	f80b 3f01 	strb.w	r3, [fp, #1]!
			f -= c;
 8000f98:	f7ff fa2c 	bl	80003f4 <__aeabi_i2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	4639      	mov	r1, r7
 8000fa4:	f7ff f8d8 	bl	8000158 <__aeabi_dsub>
 8000fa8:	e7a8      	b.n	8000efc <ftoa+0xc4>
 8000faa:	bf00      	nop
 8000fac:	f3af 8000 	nop.w
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	40c38800 	.word	0x40c38800
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40f86a00 	.word	0x40f86a00
 8000fc0:	3ff00000 	.word	0x3ff00000
 8000fc4:	40240000 	.word	0x40240000
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	408f4000 	.word	0x408f4000
 8000fd0:	08007220 	.word	0x08007220

08000fd4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd8:	2220      	movs	r2, #32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	a80c      	add	r0, sp, #48	; 0x30
 8000fde:	f004 f8b5 	bl	800514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe2:	2214      	movs	r2, #20
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	eb0d 0002 	add.w	r0, sp, r2
 8000fea:	f004 f8af 	bl	800514c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2210      	movs	r2, #16
 8000ff2:	a801      	add	r0, sp, #4
 8000ff4:	f004 f8aa 	bl	800514c <memset>
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001002:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100a:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f002 f80e 	bl	800302c <HAL_RCC_OscConfig>
 8001010:	4601      	mov	r1, r0
 8001012:	b108      	cbz	r0, 8001018 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001016:	e7fe      	b.n	8001016 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001018:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001028:	a805      	add	r0, sp, #20
 800102a:	f002 f9d5 	bl	80033d8 <HAL_RCC_ClockConfig>
 800102e:	b108      	cbz	r0, 8001034 <SystemClock_Config+0x60>
 8001030:	b672      	cpsid	i
  while (1)
 8001032:	e7fe      	b.n	8001032 <SystemClock_Config+0x5e>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001034:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001036:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001038:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	f002 fa89 	bl	8003550 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	b108      	cbz	r0, 8001044 <SystemClock_Config+0x70>
 8001040:	b672      	cpsid	i
  while (1)
 8001042:	e7fe      	b.n	8001042 <SystemClock_Config+0x6e>
}
 8001044:	b014      	add	sp, #80	; 0x50
 8001046:	bd10      	pop	{r4, pc}

08001048 <Board_Get_ADCChannelValue>:
{
 8001048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800104a:	2201      	movs	r2, #1
 800104c:	2300      	movs	r3, #0
{
 800104e:	4604      	mov	r4, r0
  ADC_ChanConf.Channel = channel;
 8001050:	9101      	str	r1, [sp, #4]
  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 8001052:	a901      	add	r1, sp, #4
  ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001054:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_ADC_ConfigChannel(hadc, &ADC_ChanConf);
 8001058:	f001 f992 	bl	8002380 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(hadc);
 800105c:	4620      	mov	r0, r4
 800105e:	f001 fa49 	bl	80024f4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10); //轮询转换
 8001062:	210a      	movs	r1, #10
 8001064:	4620      	mov	r0, r4
 8001066:	f001 f8db 	bl	8002220 <HAL_ADC_PollForConversion>
  return (uint16_t)HAL_ADC_GetValue(hadc);
 800106a:	4620      	mov	r0, r4
 800106c:	f001 f984 	bl	8002378 <HAL_ADC_GetValue>
}
 8001070:	b280      	uxth	r0, r0
 8001072:	b004      	add	sp, #16
 8001074:	bd10      	pop	{r4, pc}
	...

08001078 <lineFollower.constprop.0>:
static void lineFollower(float operationTime, float power, int *tg)
 8001078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800107c:	4605      	mov	r5, r0
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 800107e:	4608      	mov	r0, r1
 8001080:	f7ff f9ca 	bl	8000418 <__aeabi_f2d>
 8001084:	2200      	movs	r2, #0
 8001086:	4bb2      	ldr	r3, [pc, #712]	; (8001350 <lineFollower.constprop.0+0x2d8>)
 8001088:	f7ff fa1e 	bl	80004c8 <__aeabi_dmul>
 800108c:	2200      	movs	r2, #0
 800108e:	4bb1      	ldr	r3, [pc, #708]	; (8001354 <lineFollower.constprop.0+0x2dc>)
 8001090:	f7ff fb44 	bl	800071c <__aeabi_ddiv>
 8001094:	2200      	movs	r2, #0
 8001096:	4bae      	ldr	r3, [pc, #696]	; (8001350 <lineFollower.constprop.0+0x2d8>)
 8001098:	f7ff f860 	bl	800015c <__adddf3>
 800109c:	f7ff fcae 	bl	80009fc <__aeabi_d2iz>
 80010a0:	4bad      	ldr	r3, [pc, #692]	; (8001358 <lineFollower.constprop.0+0x2e0>)
  sec = 0;
 80010a2:	4aae      	ldr	r2, [pc, #696]	; (800135c <lineFollower.constprop.0+0x2e4>)
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80010a4:	6018      	str	r0, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80010a6:	4bae      	ldr	r3, [pc, #696]	; (8001360 <lineFollower.constprop.0+0x2e8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6358      	str	r0, [r3, #52]	; 0x34
  sec = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	6013      	str	r3, [r2, #0]
  while (sec <= operationTime)
 80010b0:	4baa      	ldr	r3, [pc, #680]	; (800135c <lineFollower.constprop.0+0x2e4>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	f7ff fdf4 	bl	8000ca0 <__aeabi_i2f>
 80010b8:	4601      	mov	r1, r0
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff fea6 	bl	8000e0c <__aeabi_fcmpge>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f000 80c5 	beq.w	8001250 <lineFollower.constprop.0+0x1d8>
    statecode = 0;
 80010c6:	2400      	movs	r4, #0
 80010c8:	f8df b298 	ldr.w	fp, [pc, #664]	; 8001364 <lineFollower.constprop.0+0x2ec>
    HAL_ADC_Start(&hadc1);
 80010cc:	48a6      	ldr	r0, [pc, #664]	; (8001368 <lineFollower.constprop.0+0x2f0>)
    statecode = 0;
 80010ce:	f8cb 4000 	str.w	r4, [fp]
    HAL_ADC_Start(&hadc1);
 80010d2:	f001 fa0f 	bl	80024f4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 80010d6:	2101      	movs	r1, #1
 80010d8:	48a3      	ldr	r0, [pc, #652]	; (8001368 <lineFollower.constprop.0+0x2f0>)
 80010da:	f001 f8a1 	bl	8002220 <HAL_ADC_PollForConversion>
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 80010de:	4621      	mov	r1, r4
 80010e0:	48a1      	ldr	r0, [pc, #644]	; (8001368 <lineFollower.constprop.0+0x2f0>)
 80010e2:	f7ff ffb1 	bl	8001048 <Board_Get_ADCChannelValue>
 80010e6:	4ea1      	ldr	r6, [pc, #644]	; (800136c <lineFollower.constprop.0+0x2f4>)
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80010e8:	2101      	movs	r1, #1
    value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 80010ea:	6030      	str	r0, [r6, #0]
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80010ec:	489e      	ldr	r0, [pc, #632]	; (8001368 <lineFollower.constprop.0+0x2f0>)
 80010ee:	f7ff ffab 	bl	8001048 <Board_Get_ADCChannelValue>
 80010f2:	4f9f      	ldr	r7, [pc, #636]	; (8001370 <lineFollower.constprop.0+0x2f8>)
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 80010f4:	2102      	movs	r1, #2
    value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 80010f6:	6038      	str	r0, [r7, #0]
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 80010f8:	489b      	ldr	r0, [pc, #620]	; (8001368 <lineFollower.constprop.0+0x2f0>)
 80010fa:	f7ff ffa5 	bl	8001048 <Board_Get_ADCChannelValue>
 80010fe:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8001374 <lineFollower.constprop.0+0x2fc>
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001102:	2103      	movs	r1, #3
    value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001104:	f8c8 0000 	str.w	r0, [r8]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001108:	4897      	ldr	r0, [pc, #604]	; (8001368 <lineFollower.constprop.0+0x2f0>)
 800110a:	f7ff ff9d 	bl	8001048 <Board_Get_ADCChannelValue>
    if (value0 > 1000)
 800110e:	6832      	ldr	r2, [r6, #0]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001110:	4b99      	ldr	r3, [pc, #612]	; (8001378 <lineFollower.constprop.0+0x300>)
    if (value0 > 1000)
 8001112:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0001; // 8
 8001116:	bfc8      	it	gt
 8001118:	f8db 2000 	ldrgt.w	r2, [fp]
    value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 800111c:	6018      	str	r0, [r3, #0]
      statecode = statecode | 0b0001; // 8
 800111e:	bfc4      	itt	gt
 8001120:	f042 0201 	orrgt.w	r2, r2, #1
 8001124:	f8cb 2000 	strgt.w	r2, [fp]
    if (value1 > 1000)
 8001128:	683a      	ldr	r2, [r7, #0]
    tmp += (statecode & 0b0001);
 800112a:	f8df a250 	ldr.w	sl, [pc, #592]	; 800137c <lineFollower.constprop.0+0x304>
    if (value1 > 1000)
 800112e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0010; // 4
 8001132:	bfc2      	ittt	gt
 8001134:	f8db 2000 	ldrgt.w	r2, [fp]
 8001138:	f042 0202 	orrgt.w	r2, r2, #2
 800113c:	f8cb 2000 	strgt.w	r2, [fp]
    if (value2 > 1000)
 8001140:	f8d8 2000 	ldr.w	r2, [r8]
 8001144:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      statecode = statecode | 0b0100; // 2
 8001148:	bfc2      	ittt	gt
 800114a:	f8db 2000 	ldrgt.w	r2, [fp]
 800114e:	f042 0204 	orrgt.w	r2, r2, #4
 8001152:	f8cb 2000 	strgt.w	r2, [fp]
    if (value3 > 1000)
 8001156:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
      statecode = statecode | 0b1000; // 1
 800115a:	bfc2      	ittt	gt
 800115c:	f8db 2000 	ldrgt.w	r2, [fp]
 8001160:	f042 0208 	orrgt.w	r2, r2, #8
 8001164:	f8cb 2000 	strgt.w	r2, [fp]
    tmp = (statecode & 0b1000) >> 3;
 8001168:	f8db 4000 	ldr.w	r4, [fp]
 800116c:	f3c4 00c0 	ubfx	r0, r4, #3, #1
 8001170:	f7ff fd96 	bl	8000ca0 <__aeabi_i2f>
 8001174:	4681      	mov	r9, r0
    tmp += (statecode & 0b0100) >> 2;
 8001176:	f3c4 0080 	ubfx	r0, r4, #2, #1
 800117a:	f7ff fd91 	bl	8000ca0 <__aeabi_i2f>
 800117e:	4601      	mov	r1, r0
 8001180:	4648      	mov	r0, r9
 8001182:	f7ff fcd9 	bl	8000b38 <__addsf3>
 8001186:	4681      	mov	r9, r0
    tmp += (statecode & 0b0010) >> 1;
 8001188:	f3c4 0040 	ubfx	r0, r4, #1, #1
 800118c:	f7ff fd88 	bl	8000ca0 <__aeabi_i2f>
 8001190:	4601      	mov	r1, r0
 8001192:	4648      	mov	r0, r9
 8001194:	f7ff fcd0 	bl	8000b38 <__addsf3>
 8001198:	4681      	mov	r9, r0
    tmp += (statecode & 0b0001);
 800119a:	f004 0001 	and.w	r0, r4, #1
 800119e:	f7ff fd7f 	bl	8000ca0 <__aeabi_i2f>
 80011a2:	4601      	mov	r1, r0
 80011a4:	4648      	mov	r0, r9
 80011a6:	f7ff fcc7 	bl	8000b38 <__addsf3>
    if (tmp > 2)
 80011aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    tmp += (statecode & 0b0001);
 80011ae:	f8ca 0000 	str.w	r0, [sl]
    if (tmp > 2)
 80011b2:	f7ff fe35 	bl	8000e20 <__aeabi_fcmpgt>
 80011b6:	b1b8      	cbz	r0, 80011e8 <lineFollower.constprop.0+0x170>
      statecode = 0b1111;
 80011b8:	220f      	movs	r2, #15
 80011ba:	f8cb 2000 	str.w	r2, [fp]
  pulse_servo1 = 500 + 2000 * angle / 180;
 80011be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80011c2:	496f      	ldr	r1, [pc, #444]	; (8001380 <lineFollower.constprop.0+0x308>)
        HAL_ADC_Start(&hadc1);
 80011c4:	4c68      	ldr	r4, [pc, #416]	; (8001368 <lineFollower.constprop.0+0x2f0>)
  pulse_servo1 = 500 + 2000 * angle / 180;
 80011c6:	600a      	str	r2, [r1, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 80011c8:	496e      	ldr	r1, [pc, #440]	; (8001384 <lineFollower.constprop.0+0x30c>)
 80011ca:	6809      	ldr	r1, [r1, #0]
 80011cc:	634a      	str	r2, [r1, #52]	; 0x34
      while (tmp > 1) //變成白色之前狀態不變
 80011ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80011d2:	f8da 0000 	ldr.w	r0, [sl]
 80011d6:	f7ff fe23 	bl	8000e20 <__aeabi_fcmpgt>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d147      	bne.n	800126e <lineFollower.constprop.0+0x1f6>
      *tg += 1;
 80011de:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <lineFollower.constprop.0+0x310>)
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	6013      	str	r3, [r2, #0]
      break;
 80011e6:	e02c      	b.n	8001242 <lineFollower.constprop.0+0x1ca>
    switch (statecode)
 80011e8:	2c0f      	cmp	r4, #15
 80011ea:	d82a      	bhi.n	8001242 <lineFollower.constprop.0+0x1ca>
 80011ec:	a301      	add	r3, pc, #4	; (adr r3, 80011f4 <lineFollower.constprop.0+0x17c>)
 80011ee:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001269 	.word	0x08001269
 80011f8:	08001263 	.word	0x08001263
 80011fc:	0800125d 	.word	0x0800125d
 8001200:	08001243 	.word	0x08001243
 8001204:	08001257 	.word	0x08001257
 8001208:	08001243 	.word	0x08001243
 800120c:	08001243 	.word	0x08001243
 8001210:	08001243 	.word	0x08001243
 8001214:	08001235 	.word	0x08001235
 8001218:	08001243 	.word	0x08001243
 800121c:	08001243 	.word	0x08001243
 8001220:	08001243 	.word	0x08001243
 8001224:	08001243 	.word	0x08001243
 8001228:	08001243 	.word	0x08001243
 800122c:	08001243 	.word	0x08001243
 8001230:	080011bf 	.word	0x080011bf
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001234:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <lineFollower.constprop.0+0x308>)
 800123a:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <lineFollower.constprop.0+0x30c>)
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	6353      	str	r3, [r2, #52]	; 0x34
    if (operationTime == 100)
 8001242:	4628      	mov	r0, r5
 8001244:	4951      	ldr	r1, [pc, #324]	; (800138c <lineFollower.constprop.0+0x314>)
 8001246:	f7ff fdc3 	bl	8000dd0 <__aeabi_fcmpeq>
 800124a:	2800      	cmp	r0, #0
 800124c:	f43f af30 	beq.w	80010b0 <lineFollower.constprop.0+0x38>
}
 8001250:	b003      	add	sp, #12
 8001252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001256:	f240 535f 	movw	r3, #1375	; 0x55f
 800125a:	e7ed      	b.n	8001238 <lineFollower.constprop.0+0x1c0>
 800125c:	f240 6359 	movw	r3, #1625	; 0x659
 8001260:	e7ea      	b.n	8001238 <lineFollower.constprop.0+0x1c0>
 8001262:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8001266:	e7e7      	b.n	8001238 <lineFollower.constprop.0+0x1c0>
 8001268:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800126c:	e7e4      	b.n	8001238 <lineFollower.constprop.0+0x1c0>
        statecode = 0;
 800126e:	2300      	movs	r3, #0
        HAL_ADC_Start(&hadc1);
 8001270:	4620      	mov	r0, r4
        statecode = 0;
 8001272:	f8cb 3000 	str.w	r3, [fp]
        HAL_ADC_Start(&hadc1);
 8001276:	f001 f93d 	bl	80024f4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1);
 800127a:	2101      	movs	r1, #1
 800127c:	4620      	mov	r0, r4
 800127e:	f000 ffcf 	bl	8002220 <HAL_ADC_PollForConversion>
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001282:	2100      	movs	r1, #0
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fedf 	bl	8001048 <Board_Get_ADCChannelValue>
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 800128a:	2101      	movs	r1, #1
        value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 800128c:	6030      	str	r0, [r6, #0]
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 800128e:	4620      	mov	r0, r4
 8001290:	f7ff feda 	bl	8001048 <Board_Get_ADCChannelValue>
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001294:	2102      	movs	r1, #2
        value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001296:	6038      	str	r0, [r7, #0]
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff fed5 	bl	8001048 <Board_Get_ADCChannelValue>
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 800129e:	2103      	movs	r1, #3
        value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 80012a0:	f8c8 0000 	str.w	r0, [r8]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff fecf 	bl	8001048 <Board_Get_ADCChannelValue>
        if (value0 > 1000)
 80012aa:	6832      	ldr	r2, [r6, #0]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <lineFollower.constprop.0+0x300>)
        if (value0 > 1000)
 80012ae:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          statecode = statecode | 0b1000; // 8
 80012b2:	bfc8      	it	gt
 80012b4:	f8db 2000 	ldrgt.w	r2, [fp]
        value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 80012b8:	6018      	str	r0, [r3, #0]
          statecode = statecode | 0b1000; // 8
 80012ba:	bfc4      	itt	gt
 80012bc:	f042 0208 	orrgt.w	r2, r2, #8
 80012c0:	f8cb 2000 	strgt.w	r2, [fp]
        if (value1 > 1000)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          statecode = statecode | 0b0100; // 4
 80012ca:	bfc2      	ittt	gt
 80012cc:	f8db 2000 	ldrgt.w	r2, [fp]
 80012d0:	f042 0204 	orrgt.w	r2, r2, #4
 80012d4:	f8cb 2000 	strgt.w	r2, [fp]
        if (value2 > 1000)
 80012d8:	f8d8 2000 	ldr.w	r2, [r8]
 80012dc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
          statecode = statecode | 0b0010; // 2
 80012e0:	bfc2      	ittt	gt
 80012e2:	f8db 2000 	ldrgt.w	r2, [fp]
 80012e6:	f042 0202 	orrgt.w	r2, r2, #2
 80012ea:	f8cb 2000 	strgt.w	r2, [fp]
        if (value3 > 1000)
 80012ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
          statecode = statecode | 0b0001; // 1
 80012f2:	bfc2      	ittt	gt
 80012f4:	f8db 2000 	ldrgt.w	r2, [fp]
 80012f8:	f042 0201 	orrgt.w	r2, r2, #1
 80012fc:	f8cb 2000 	strgt.w	r2, [fp]
        tmp = (statecode & 0b1000) >> 3;
 8001300:	f8db 9000 	ldr.w	r9, [fp]
 8001304:	f3c9 00c0 	ubfx	r0, r9, #3, #1
 8001308:	f7ff fcca 	bl	8000ca0 <__aeabi_i2f>
 800130c:	9001      	str	r0, [sp, #4]
        tmp += (statecode & 0b0100) >> 2;
 800130e:	f3c9 0080 	ubfx	r0, r9, #2, #1
 8001312:	f7ff fcc5 	bl	8000ca0 <__aeabi_i2f>
 8001316:	9a01      	ldr	r2, [sp, #4]
 8001318:	4601      	mov	r1, r0
 800131a:	4610      	mov	r0, r2
 800131c:	f7ff fc0c 	bl	8000b38 <__addsf3>
 8001320:	9001      	str	r0, [sp, #4]
        tmp += (statecode & 0b0010) >> 1;
 8001322:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8001326:	f7ff fcbb 	bl	8000ca0 <__aeabi_i2f>
 800132a:	9a01      	ldr	r2, [sp, #4]
 800132c:	4601      	mov	r1, r0
 800132e:	4610      	mov	r0, r2
 8001330:	f7ff fc02 	bl	8000b38 <__addsf3>
 8001334:	9001      	str	r0, [sp, #4]
        tmp += (statecode & 0b0001);
 8001336:	f009 0001 	and.w	r0, r9, #1
 800133a:	f7ff fcb1 	bl	8000ca0 <__aeabi_i2f>
 800133e:	9a01      	ldr	r2, [sp, #4]
 8001340:	4601      	mov	r1, r0
 8001342:	4610      	mov	r0, r2
 8001344:	f7ff fbf8 	bl	8000b38 <__addsf3>
 8001348:	f8ca 0000 	str.w	r0, [sl]
 800134c:	e73f      	b.n	80011ce <lineFollower.constprop.0+0x156>
 800134e:	bf00      	nop
 8001350:	408f4000 	.word	0x408f4000
 8001354:	40590000 	.word	0x40590000
 8001358:	2000021c 	.word	0x2000021c
 800135c:	2000022c 	.word	0x2000022c
 8001360:	2000017c 	.word	0x2000017c
 8001364:	20000230 	.word	0x20000230
 8001368:	20000058 	.word	0x20000058
 800136c:	20000014 	.word	0x20000014
 8001370:	20000018 	.word	0x20000018
 8001374:	2000001c 	.word	0x2000001c
 8001378:	20000020 	.word	0x20000020
 800137c:	20000234 	.word	0x20000234
 8001380:	20000220 	.word	0x20000220
 8001384:	20000134 	.word	0x20000134
 8001388:	20000238 	.word	0x20000238
 800138c:	42c80000 	.word	0x42c80000

08001390 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM3)
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001394:	429a      	cmp	r2, r3
 8001396:	d10c      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x22>
    ms++;
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	3301      	adds	r3, #1
    if (ms == 1000)
 800139e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      ms = 0;
 80013a2:	bf01      	itttt	eq
 80013a4:	2300      	moveq	r3, #0
 80013a6:	6013      	streq	r3, [r2, #0]
      sec++;
 80013a8:	4a04      	ldreq	r2, [pc, #16]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80013aa:	6813      	ldreq	r3, [r2, #0]
 80013ac:	bf08      	it	eq
 80013ae:	3301      	addeq	r3, #1
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	4770      	bx	lr
 80013b4:	40000400 	.word	0x40000400
 80013b8:	20000210 	.word	0x20000210
 80013bc:	2000022c 	.word	0x2000022c

080013c0 <HAL_GPIO_EXTI_Callback>:
  position_encoderR++;
 80013c0:	4a02      	ldr	r2, [pc, #8]	; (80013cc <HAL_GPIO_EXTI_Callback+0xc>)
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000218 	.word	0x20000218

080013d0 <distanceR>:
  disR = position_encoderR * UNIT_DISTANCE;
 80013d0:	2066      	movs	r0, #102	; 0x66
{
 80013d2:	b508      	push	{r3, lr}
  disR = position_encoderR * UNIT_DISTANCE;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <distanceR+0x1c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4343      	muls	r3, r0
 80013da:	209b      	movs	r0, #155	; 0x9b
 80013dc:	fb93 f0f0 	sdiv	r0, r3, r0
 80013e0:	f7ff fc5e 	bl	8000ca0 <__aeabi_i2f>
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <distanceR+0x20>)
 80013e6:	6018      	str	r0, [r3, #0]
}
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop
 80013ec:	20000218 	.word	0x20000218
 80013f0:	20000054 	.word	0x20000054
 80013f4:	00000000 	.word	0x00000000

080013f8 <steeringDegree>:
  if (orientation == 1) //左轉
 80013f8:	2901      	cmp	r1, #1
{
 80013fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fc:	4604      	mov	r4, r0
  if (orientation == 1) //左轉
 80013fe:	d13e      	bne.n	800147e <steeringDegree+0x86>
    angle = 90 - angle + 5;
 8001400:	4601      	mov	r1, r0
 8001402:	4837      	ldr	r0, [pc, #220]	; (80014e0 <steeringDegree+0xe8>)
 8001404:	f7ff fb96 	bl	8000b34 <__aeabi_fsub>
 8001408:	4605      	mov	r5, r0
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) + 7.03)) / M_PI * 180;
 800140a:	f7ff ffe1 	bl	80013d0 <distanceR>
    angle = 90 - angle + 5;
 800140e:	4935      	ldr	r1, [pc, #212]	; (80014e4 <steeringDegree+0xec>)
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) + 7.03)) / M_PI * 180;
 8001410:	4604      	mov	r4, r0
    angle = 90 - angle + 5;
 8001412:	4628      	mov	r0, r5
 8001414:	f7ff fb90 	bl	8000b38 <__addsf3>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) + 7.03)) / M_PI * 180;
 8001418:	f7fe fffe 	bl	8000418 <__aeabi_f2d>
 800141c:	a32c      	add	r3, pc, #176	; (adr r3, 80014d0 <steeringDegree+0xd8>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f851 	bl	80004c8 <__aeabi_dmul>
 8001426:	2200      	movs	r2, #0
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <steeringDegree+0xf0>)
 800142a:	f7ff f977 	bl	800071c <__aeabi_ddiv>
 800142e:	f002 fe05 	bl	800403c <tan>
 8001432:	4606      	mov	r6, r0
 8001434:	4620      	mov	r0, r4
 8001436:	460f      	mov	r7, r1
 8001438:	f7fe ffee 	bl	8000418 <__aeabi_f2d>
 800143c:	4632      	mov	r2, r6
 800143e:	463b      	mov	r3, r7
 8001440:	4604      	mov	r4, r0
 8001442:	460d      	mov	r5, r1
 8001444:	2000      	movs	r0, #0
 8001446:	4929      	ldr	r1, [pc, #164]	; (80014ec <steeringDegree+0xf4>)
 8001448:	f7ff f968 	bl	800071c <__aeabi_ddiv>
 800144c:	a322      	add	r3, pc, #136	; (adr r3, 80014d8 <steeringDegree+0xe0>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7fe fe83 	bl	800015c <__adddf3>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7ff f95d 	bl	800071c <__aeabi_ddiv>
 8001462:	a31b      	add	r3, pc, #108	; (adr r3, 80014d0 <steeringDegree+0xd8>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f958 	bl	800071c <__aeabi_ddiv>
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <steeringDegree+0xf0>)
 800146e:	2200      	movs	r2, #0
 8001470:	f7ff f82a 	bl	80004c8 <__aeabi_dmul>
 8001474:	f7ff fb0a 	bl	8000a8c <__aeabi_d2f>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (orientation == 0) //右
 800147e:	2900      	cmp	r1, #0
 8001480:	d1fb      	bne.n	800147a <steeringDegree+0x82>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 8001482:	f7ff ffa5 	bl	80013d0 <distanceR>
    angle = angle - 90;
 8001486:	4916      	ldr	r1, [pc, #88]	; (80014e0 <steeringDegree+0xe8>)
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 8001488:	4605      	mov	r5, r0
    angle = angle - 90;
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fb52 	bl	8000b34 <__aeabi_fsub>
    result = (distanceR() / (WHEELBASE / tan(angle * M_PI / 180) - 7.03)) / M_PI * 180;
 8001490:	f7fe ffc2 	bl	8000418 <__aeabi_f2d>
 8001494:	a30e      	add	r3, pc, #56	; (adr r3, 80014d0 <steeringDegree+0xd8>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff f815 	bl	80004c8 <__aeabi_dmul>
 800149e:	2200      	movs	r2, #0
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <steeringDegree+0xf0>)
 80014a2:	f7ff f93b 	bl	800071c <__aeabi_ddiv>
 80014a6:	f002 fdc9 	bl	800403c <tan>
 80014aa:	4606      	mov	r6, r0
 80014ac:	4628      	mov	r0, r5
 80014ae:	460f      	mov	r7, r1
 80014b0:	f7fe ffb2 	bl	8000418 <__aeabi_f2d>
 80014b4:	4632      	mov	r2, r6
 80014b6:	463b      	mov	r3, r7
 80014b8:	4604      	mov	r4, r0
 80014ba:	460d      	mov	r5, r1
 80014bc:	2000      	movs	r0, #0
 80014be:	490b      	ldr	r1, [pc, #44]	; (80014ec <steeringDegree+0xf4>)
 80014c0:	f7ff f92c 	bl	800071c <__aeabi_ddiv>
 80014c4:	a304      	add	r3, pc, #16	; (adr r3, 80014d8 <steeringDegree+0xe0>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7fe fe45 	bl	8000158 <__aeabi_dsub>
 80014ce:	e7c2      	b.n	8001456 <steeringDegree+0x5e>
 80014d0:	54442d18 	.word	0x54442d18
 80014d4:	400921fb 	.word	0x400921fb
 80014d8:	51eb851f 	.word	0x51eb851f
 80014dc:	401c1eb8 	.word	0x401c1eb8
 80014e0:	42b40000 	.word	0x42b40000
 80014e4:	40a00000 	.word	0x40a00000
 80014e8:	40668000 	.word	0x40668000
 80014ec:	4031c000 	.word	0x4031c000

080014f0 <main>:
{
 80014f0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f04f 0b00 	mov.w	fp, #0
  pulse_servo1 = MIN_PULSE_LENGTH;
 80014f8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
{
 80014fc:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80014fe:	f000 fe59 	bl	80021b4 <HAL_Init>
  pulse_servo2 = MIN_PULSE_LENGTH;
 8001502:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80017b8 <main+0x2c8>
  pulse_servo1 = MIN_PULSE_LENGTH;
 8001506:	4bad      	ldr	r3, [pc, #692]	; (80017bc <main+0x2cc>)
  pulse_servo3 = MIN_PULSE_LENGTH;
 8001508:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80017c0 <main+0x2d0>
  pulse_BLDC = MIN_PULSE_LENGTH;
 800150c:	4ead      	ldr	r6, [pc, #692]	; (80017c4 <main+0x2d4>)
  pulse_servo1 = MIN_PULSE_LENGTH;
 800150e:	601f      	str	r7, [r3, #0]
  pulse_servo2 = MIN_PULSE_LENGTH;
 8001510:	f8c8 7000 	str.w	r7, [r8]
  pulse_servo3 = MIN_PULSE_LENGTH;
 8001514:	f8c9 7000 	str.w	r7, [r9]
  pulse_BLDC = MIN_PULSE_LENGTH;
 8001518:	6037      	str	r7, [r6, #0]
  SystemClock_Config();
 800151a:	f7ff fd5b 	bl	8000fd4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	4ba9      	ldr	r3, [pc, #676]	; (80017c8 <main+0x2d8>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	48a9      	ldr	r0, [pc, #676]	; (80017cc <main+0x2dc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	a90e      	add	r1, sp, #56	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	619a      	str	r2, [r3, #24]
 8001530:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8001532:	4ca7      	ldr	r4, [pc, #668]	; (80017d0 <main+0x2e0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	f002 0220 	and.w	r2, r2, #32
 8001538:	9202      	str	r2, [sp, #8]
 800153a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153e:	f44f 2560 	mov.w	r5, #917504	; 0xe0000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	f042 0204 	orr.w	r2, r2, #4
 8001546:	619a      	str	r2, [r3, #24]
 8001548:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 800154a:	f8df a288 	ldr.w	sl, [pc, #648]	; 80017d4 <main+0x2e4>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	f002 0204 	and.w	r2, r2, #4
 8001552:	9203      	str	r2, [sp, #12]
 8001554:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	f042 0208 	orr.w	r2, r2, #8
 800155c:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800156c:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <main+0x2e8>)
 800156e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f001 f971 	bl	8002858 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001576:	465a      	mov	r2, fp
 8001578:	4659      	mov	r1, fp
 800157a:	2028      	movs	r0, #40	; 0x28
 800157c:	f001 f8d2 	bl	8002724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001580:	2028      	movs	r0, #40	; 0x28
 8001582:	f001 f901 	bl	8002788 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	e9cd bb0e 	strd	fp, fp, [sp, #56]	; 0x38
 800158a:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800158e:	f8c4 b008 	str.w	fp, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001592:	f884 b00c 	strb.w	fp, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001596:	f884 b014 	strb.w	fp, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159a:	f8c4 b004 	str.w	fp, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 800159e:	f04f 0b01 	mov.w	fp, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a2:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80015a4:	f8c4 a000 	str.w	sl, [r4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a8:	61e5      	str	r5, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 80015aa:	f8c4 b010 	str.w	fp, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ae:	f001 f829 	bl	8002604 <HAL_ADC_Init>
 80015b2:	b108      	cbz	r0, 80015b8 <main+0xc8>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <main+0xc6>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015b8:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	a90e      	add	r1, sp, #56	; 0x38
 80015bc:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015be:	e9cd bb0e 	strd	fp, fp, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c2:	f000 fedd 	bl	8002380 <HAL_ADC_ConfigChannel>
 80015c6:	b108      	cbz	r0, 80015cc <main+0xdc>
 80015c8:	b672      	cpsid	i
  while (1)
 80015ca:	e7fe      	b.n	80015ca <main+0xda>
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE; //扫描（多通道）模式=ENABLE、单次（单通道）模式=DISABLE 因为同时只采集一个通道 所以设置为DISABLE
 80015cc:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;    //连续=ENABLE、单次=DISABLE
 80015ce:	7320      	strb	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d0:	7520      	strb	r0, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d2:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d4:	e9c4 b506 	strd	fp, r5, [r4, #24]
  hadc1.Instance = ADC1;
 80015d8:	f8c4 a000 	str.w	sl, [r4]
  hadc1.Init.NbrOfConversion = 1;
 80015dc:	f8c4 b010 	str.w	fp, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e0:	f001 f810 	bl	8002604 <HAL_ADC_Init>
 80015e4:	b108      	cbz	r0, 80015ea <main+0xfa>
 80015e6:	b672      	cpsid	i
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <main+0xf8>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ea:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ec:	a90e      	add	r1, sp, #56	; 0x38
 80015ee:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f0:	e9cd bb0e 	strd	fp, fp, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	f000 fec4 	bl	8002380 <HAL_ADC_ConfigChannel>
 80015f8:	4605      	mov	r5, r0
 80015fa:	b108      	cbz	r0, 8001600 <main+0x110>
 80015fc:	b672      	cpsid	i
  while (1)
 80015fe:	e7fe      	b.n	80015fe <main+0x10e>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001600:	221c      	movs	r2, #28
 8001602:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	eb0d 0002 	add.w	r0, sp, r2
 800160c:	f003 fd9e 	bl	800514c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001610:	2220      	movs	r2, #32
 8001612:	4629      	mov	r1, r5
 8001614:	a80e      	add	r0, sp, #56	; 0x38
 8001616:	f003 fd99 	bl	800514c <memset>
  htim1.Init.Prescaler = 15;
 800161a:	230f      	movs	r3, #15
  htim1.Instance = TIM1;
 800161c:	4c6f      	ldr	r4, [pc, #444]	; (80017dc <main+0x2ec>)
  htim1.Init.Prescaler = 15;
 800161e:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80017e0 <main+0x2f0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001622:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 15;
 8001624:	e9c4 a300 	strd	sl, r3, [r4]
  htim1.Init.Period = 20000;
 8001628:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	e9c4 5505 	strd	r5, r5, [r4, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001636:	f002 faf7 	bl	8003c28 <HAL_TIM_PWM_Init>
 800163a:	b108      	cbz	r0, 8001640 <main+0x150>
 800163c:	b672      	cpsid	i
  while (1)
 800163e:	e7fe      	b.n	800163e <main+0x14e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001644:	a905      	add	r1, sp, #20
 8001646:	4620      	mov	r0, r4
 8001648:	f002 fca2 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4602      	mov	r2, r0
 800164e:	b108      	cbz	r0, 8001654 <main+0x164>
 8001650:	b672      	cpsid	i
  while (1)
 8001652:	e7fe      	b.n	8001652 <main+0x162>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001654:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001656:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800165a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800165e:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001660:	a907      	add	r1, sp, #28
 8001662:	4620      	mov	r0, r4
  sConfigOC.Pulse = 1000;
 8001664:	e9cd 3707 	strd	r3, r7, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001668:	f002 fb36 	bl	8003cd8 <HAL_TIM_PWM_ConfigChannel>
 800166c:	b108      	cbz	r0, 8001672 <main+0x182>
 800166e:	b672      	cpsid	i
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x180>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001672:	2204      	movs	r2, #4
 8001674:	4620      	mov	r0, r4
 8001676:	a907      	add	r1, sp, #28
 8001678:	f002 fb2e 	bl	8003cd8 <HAL_TIM_PWM_ConfigChannel>
 800167c:	b108      	cbz	r0, 8001682 <main+0x192>
 800167e:	b672      	cpsid	i
  while (1)
 8001680:	e7fe      	b.n	8001680 <main+0x190>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001682:	2208      	movs	r2, #8
 8001684:	4620      	mov	r0, r4
 8001686:	a907      	add	r1, sp, #28
 8001688:	f002 fb26 	bl	8003cd8 <HAL_TIM_PWM_ConfigChannel>
 800168c:	b108      	cbz	r0, 8001692 <main+0x1a2>
 800168e:	b672      	cpsid	i
  while (1)
 8001690:	e7fe      	b.n	8001690 <main+0x1a0>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001696:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 800169a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800169e:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a0:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016a2:	a90e      	add	r1, sp, #56	; 0x38
 80016a4:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016a8:	f002 fca0 	bl	8003fec <HAL_TIMEx_ConfigBreakDeadTime>
 80016ac:	b108      	cbz	r0, 80016b2 <main+0x1c2>
 80016ae:	b672      	cpsid	i
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <main+0x1c0>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	2700      	movs	r7, #0
  HAL_TIM_MspPostInit(&htim1);
 80016b4:	4849      	ldr	r0, [pc, #292]	; (80017dc <main+0x2ec>)
 80016b6:	f000 fccb 	bl	8002050 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ba:	221c      	movs	r2, #28
 80016bc:	4639      	mov	r1, r7
 80016be:	a80e      	add	r0, sp, #56	; 0x38
  htim2.Init.Prescaler = 15;
 80016c0:	f04f 0a0f 	mov.w	sl, #15
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	e9cd 7707 	strd	r7, r7, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c8:	f003 fd40 	bl	800514c <memset>
  htim2.Init.Prescaler = 15;
 80016cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80016d0:	4d44      	ldr	r5, [pc, #272]	; (80017e4 <main+0x2f4>)
  htim2.Init.Prescaler = 15;
 80016d2:	e9c5 3a00 	strd	r3, sl, [r5]
  htim2.Init.Period = 20000;
 80016d6:	f644 6320 	movw	r3, #20000	; 0x4e20
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016da:	4628      	mov	r0, r5
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	e9c5 3703 	strd	r3, r7, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	60af      	str	r7, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016e4:	f002 faa0 	bl	8003c28 <HAL_TIM_PWM_Init>
 80016e8:	b108      	cbz	r0, 80016ee <main+0x1fe>
 80016ea:	b672      	cpsid	i
  while (1)
 80016ec:	e7fe      	b.n	80016ec <main+0x1fc>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f2:	a907      	add	r1, sp, #28
 80016f4:	4628      	mov	r0, r5
 80016f6:	f002 fc4b 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4602      	mov	r2, r0
 80016fc:	b108      	cbz	r0, 8001702 <main+0x212>
 80016fe:	b672      	cpsid	i
  while (1)
 8001700:	e7fe      	b.n	8001700 <main+0x210>
  sConfigOC.Pulse = 1000;
 8001702:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170a:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170e:	a90e      	add	r1, sp, #56	; 0x38
 8001710:	4628      	mov	r0, r5
  sConfigOC.Pulse = 1000;
 8001712:	e9cd e30e 	strd	lr, r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	f002 fadf 	bl	8003cd8 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4607      	mov	r7, r0
 800171c:	b108      	cbz	r0, 8001722 <main+0x232>
 800171e:	b672      	cpsid	i
  while (1)
 8001720:	e7fe      	b.n	8001720 <main+0x230>
  HAL_TIM_MspPostInit(&htim2);
 8001722:	4628      	mov	r0, r5
 8001724:	f000 fc94 	bl	8002050 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001728:	2210      	movs	r2, #16
 800172a:	4639      	mov	r1, r7
 800172c:	a80e      	add	r0, sp, #56	; 0x38
 800172e:	f003 fd0d 	bl	800514c <memset>
  htim3.Instance = TIM3;
 8001732:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80017e8 <main+0x2f8>
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <main+0x2fc>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001738:	4658      	mov	r0, fp
  htim3.Init.Prescaler = 15;
 800173a:	e9cb 3a00 	strd	r3, sl, [fp]
  htim3.Init.Period = 1000;
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	e9cd 7707 	strd	r7, r7, [sp, #28]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	e9cb 3703 	strd	r3, r7, [fp, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	f8cb 7008 	str.w	r7, [fp, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	f8cb 7018 	str.w	r7, [fp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001752:	f002 fa3d 	bl	8003bd0 <HAL_TIM_Base_Init>
 8001756:	b108      	cbz	r0, 800175c <main+0x26c>
 8001758:	b672      	cpsid	i
  while (1)
 800175a:	e7fe      	b.n	800175a <main+0x26a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001760:	4658      	mov	r0, fp
 8001762:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001766:	f002 fb1c 	bl	8003da2 <HAL_TIM_ConfigClockSource>
 800176a:	b108      	cbz	r0, 8001770 <main+0x280>
 800176c:	b672      	cpsid	i
  while (1)
 800176e:	e7fe      	b.n	800176e <main+0x27e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001774:	a907      	add	r1, sp, #28
 8001776:	4658      	mov	r0, fp
 8001778:	f002 fc0a 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	b108      	cbz	r0, 8001784 <main+0x294>
 8001780:	b672      	cpsid	i
  while (1)
 8001782:	e7fe      	b.n	8001782 <main+0x292>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001784:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178a:	4f1a      	ldr	r7, [pc, #104]	; (80017f4 <main+0x304>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800178c:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001790:	e9c0 7200 	strd	r7, r2, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001794:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001796:	270a      	movs	r7, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001798:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017a6:	e9c0 c206 	strd	ip, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80017aa:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ac:	f001 ffbc 	bl	8003728 <HAL_SPI_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b308      	cbz	r0, 80017f8 <main+0x308>
 80017b4:	b672      	cpsid	i
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <main+0x2c6>
 80017b8:	20000224 	.word	0x20000224
 80017bc:	20000220 	.word	0x20000220
 80017c0:	20000228 	.word	0x20000228
 80017c4:	2000021c 	.word	0x2000021c
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	20000058 	.word	0x20000058
 80017d4:	40012400 	.word	0x40012400
 80017d8:	10310000 	.word	0x10310000
 80017dc:	20000134 	.word	0x20000134
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	2000017c 	.word	0x2000017c
 80017e8:	200001c4 	.word	0x200001c4
 80017ec:	40000400 	.word	0x40000400
 80017f0:	200000dc 	.word	0x200000dc
 80017f4:	40013000 	.word	0x40013000
  hi2c1.Instance = I2C1;
 80017f8:	48a8      	ldr	r0, [pc, #672]	; (8001a9c <main+0x5ac>)
  hi2c1.Init.ClockSpeed = 400000;
 80017fa:	49a9      	ldr	r1, [pc, #676]	; (8001aa0 <main+0x5b0>)
 80017fc:	4aa9      	ldr	r2, [pc, #676]	; (8001aa4 <main+0x5b4>)
  hi2c1.Init.OwnAddress1 = 0;
 80017fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001802:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001812:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001814:	f001 f9d8 	bl	8002bc8 <HAL_I2C_Init>
 8001818:	4682      	mov	sl, r0
 800181a:	b108      	cbz	r0, 8001820 <main+0x330>
 800181c:	b672      	cpsid	i
  while (1)
 800181e:	e7fe      	b.n	800181e <main+0x32e>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);                 // Servo 1
 8001820:	4601      	mov	r1, r0
 8001822:	48a1      	ldr	r0, [pc, #644]	; (8001aa8 <main+0x5b8>)
 8001824:	f002 fbb2 	bl	8003f8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);                 // Servo 2
 8001828:	2104      	movs	r1, #4
 800182a:	489f      	ldr	r0, [pc, #636]	; (8001aa8 <main+0x5b8>)
 800182c:	f002 fbae 	bl	8003f8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);                 // Servo 3
 8001830:	2108      	movs	r1, #8
 8001832:	489d      	ldr	r0, [pc, #628]	; (8001aa8 <main+0x5b8>)
 8001834:	f002 fbaa 	bl	8003f8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);                 // 無刷馬達
 8001838:	4651      	mov	r1, sl
 800183a:	4628      	mov	r0, r5
 800183c:	f002 fba6 	bl	8003f8c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);                            // 開啟中斷
 8001840:	4658      	mov	r0, fp
 8001842:	f002 f8bd 	bl	80039c0 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); // 無刷馬達下限轉速
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	6832      	ldr	r2, [r6, #0]
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 800184a:	f240 7129 	movw	r1, #1833	; 0x729
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC); // 無刷馬達下限轉速
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001850:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001854:	4b95      	ldr	r3, [pc, #596]	; (8001aac <main+0x5bc>)
  HAL_Delay(3000);
 8001856:	f640 30b8 	movw	r0, #3000	; 0xbb8
  pulse_servo1 = 500 + 2000 * angle / 180;
 800185a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 800185c:	6823      	ldr	r3, [r4, #0]
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 800185e:	f8c8 1000 	str.w	r1, [r8]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
  pulse_servo3 = 500 + 2000 * 60 / 180;
 8001864:	f240 428e 	movw	r2, #1166	; 0x48e
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 8001868:	6399      	str	r1, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800186a:	63da      	str	r2, [r3, #60]	; 0x3c
  pulse_servo3 = 500 + 2000 * 60 / 180;
 800186c:	f8c9 2000 	str.w	r2, [r9]
  HAL_Delay(3000);
 8001870:	f000 fcc4 	bl	80021fc <HAL_Delay>
  SSD1306_Init();
 8001874:	f000 fa36 	bl	8001ce4 <SSD1306_Init>
  mode = 2;
 8001878:	2302      	movs	r3, #2
 800187a:	4a8d      	ldr	r2, [pc, #564]	; (8001ab0 <main+0x5c0>)
  SSD1306_GotoXY(10, 10);                // goto 10, 10
 800187c:	4639      	mov	r1, r7
 800187e:	4638      	mov	r0, r7
  mode = 2;
 8001880:	6013      	str	r3, [r2, #0]
  SSD1306_GotoXY(10, 10);                // goto 10, 10
 8001882:	f000 f971 	bl	8001b68 <SSD1306_GotoXY>
  SSD1306_Puts("HELLO", &Font_11x18, 1); // print Hello
 8001886:	2201      	movs	r2, #1
 8001888:	498a      	ldr	r1, [pc, #552]	; (8001ab4 <main+0x5c4>)
 800188a:	488b      	ldr	r0, [pc, #556]	; (8001ab8 <main+0x5c8>)
 800188c:	f000 f9c0 	bl	8001c10 <SSD1306_Puts>
  SSD1306_GotoXY(10, 30);
 8001890:	211e      	movs	r1, #30
 8001892:	4638      	mov	r0, r7
 8001894:	f000 f968 	bl	8001b68 <SSD1306_GotoXY>
  SSD1306_Puts("WORLD !!", &Font_11x18, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	4986      	ldr	r1, [pc, #536]	; (8001ab4 <main+0x5c4>)
 800189c:	4887      	ldr	r0, [pc, #540]	; (8001abc <main+0x5cc>)
 800189e:	f000 f9b7 	bl	8001c10 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80018a2:	f000 f9f5 	bl	8001c90 <SSD1306_UpdateScreen>
    switch (mode)
 80018a6:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <main+0x5c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d8fd      	bhi.n	80018aa <main+0x3ba>
 80018ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80018b2:	0006      	.short	0x0006
 80018b4:	000e000b 	.word	0x000e000b
 80018b8:	00ca00c2 	.word	0x00ca00c2
 80018bc:	00d1      	.short	0x00d1
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80018c2:	4a7f      	ldr	r2, [pc, #508]	; (8001ac0 <main+0x5d0>)
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80018c4:	6033      	str	r3, [r6, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80018c6:	e0bb      	b.n	8001a40 <main+0x550>
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80018c8:	f240 434c 	movw	r3, #1100	; 0x44c
 80018cc:	e7f9      	b.n	80018c2 <main+0x3d2>
 80018ce:	f240 4324 	movw	r3, #1060	; 0x424
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80018d2:	682a      	ldr	r2, [r5, #0]
      HAL_Delay(2000);
 80018d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80018d8:	6353      	str	r3, [r2, #52]	; 0x34
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80018da:	6033      	str	r3, [r6, #0]
      HAL_Delay(2000);
 80018dc:	f000 fc8e 	bl	80021fc <HAL_Delay>
      position_encoderR = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	4a78      	ldr	r2, [pc, #480]	; (8001ac4 <main+0x5d4>)
      degree_servo = 77.5;
 80018e4:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8001ac8 <main+0x5d8>
      position_encoderR = 0;
 80018e8:	6013      	str	r3, [r2, #0]
      position_encoderL = 0;
 80018ea:	4a78      	ldr	r2, [pc, #480]	; (8001acc <main+0x5dc>)
        ftoa(steeringDegree(degree_servo, 1), buffer, 2);
 80018ec:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8001ad0 <main+0x5e0>
      position_encoderL = 0;
 80018f0:	6013      	str	r3, [r2, #0]
      degree_servo = 77.5;
 80018f2:	4b78      	ldr	r3, [pc, #480]	; (8001ad4 <main+0x5e4>)
  pulse_servo1 = 500 + 2000 * angle / 180;
 80018f4:	4a6d      	ldr	r2, [pc, #436]	; (8001aac <main+0x5bc>)
      degree_servo = 77.5;
 80018f6:	f8ca 3000 	str.w	r3, [sl]
  pulse_servo1 = 500 + 2000 * angle / 180;
 80018fa:	f240 5351 	movw	r3, #1361	; 0x551
 80018fe:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 8001900:	4a69      	ldr	r2, [pc, #420]	; (8001aa8 <main+0x5b8>)
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	6353      	str	r3, [r2, #52]	; 0x34
  pulse_servo2 = 500 + 2000 * 90 / 180;
 8001906:	f240 53dc 	movw	r3, #1500	; 0x5dc
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 800190a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 800190c:	63d3      	str	r3, [r2, #60]	; 0x3c
  pulse_servo2 = 500 + 2000 * 90 / 180;
 800190e:	f8c8 3000 	str.w	r3, [r8]
  pulse_servo3 = 500 + 2000 * 90 / 180;
 8001912:	f8c9 3000 	str.w	r3, [r9]
      SSD1306_Clear();
 8001916:	f000 f9dd 	bl	8001cd4 <SSD1306_Clear>
      while (steeringDegree(degree_servo, 1) < 90)
 800191a:	2101      	movs	r1, #1
 800191c:	f8da 0000 	ldr.w	r0, [sl]
 8001920:	f7ff fd6a 	bl	80013f8 <steeringDegree>
 8001924:	496c      	ldr	r1, [pc, #432]	; (8001ad8 <main+0x5e8>)
 8001926:	f7ff fa5d 	bl	8000de4 <__aeabi_fcmplt>
 800192a:	4607      	mov	r7, r0
 800192c:	2800      	cmp	r0, #0
 800192e:	d15f      	bne.n	80019f0 <main+0x500>
      SSD1306_Clear();
 8001930:	f000 f9d0 	bl	8001cd4 <SSD1306_Clear>
      ftoa(steeringDegree(degree_servo, 1), buffer, 2);
 8001934:	2101      	movs	r1, #1
 8001936:	f8da 0000 	ldr.w	r0, [sl]
 800193a:	f7ff fd5d 	bl	80013f8 <steeringDegree>
 800193e:	f7fe fd6b 	bl	8000418 <__aeabi_f2d>
 8001942:	2302      	movs	r3, #2
 8001944:	4a62      	ldr	r2, [pc, #392]	; (8001ad0 <main+0x5e0>)
 8001946:	f7ff fa77 	bl	8000e38 <ftoa>
      SSD1306_GotoXY(0, 0);
 800194a:	4639      	mov	r1, r7
 800194c:	4638      	mov	r0, r7
 800194e:	f000 f90b 	bl	8001b68 <SSD1306_GotoXY>
      trigger = 0;
 8001952:	f8df b188 	ldr.w	fp, [pc, #392]	; 8001adc <main+0x5ec>
      SSD1306_Puts(buffer, &Font_16x26, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	4961      	ldr	r1, [pc, #388]	; (8001ae0 <main+0x5f0>)
 800195a:	485d      	ldr	r0, [pc, #372]	; (8001ad0 <main+0x5e0>)
 800195c:	f000 f958 	bl	8001c10 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8001960:	f000 f996 	bl	8001c90 <SSD1306_UpdateScreen>
      lineFollower(4, 6, &trigger);
 8001964:	495f      	ldr	r1, [pc, #380]	; (8001ae4 <main+0x5f4>)
 8001966:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800196a:	f7ff fb85 	bl	8001078 <lineFollower.constprop.0>
      trigger = 0;
 800196e:	f8cb 7000 	str.w	r7, [fp]
        lineFollower(100, 25, &trigger);
 8001972:	495d      	ldr	r1, [pc, #372]	; (8001ae8 <main+0x5f8>)
 8001974:	4f5d      	ldr	r7, [pc, #372]	; (8001aec <main+0x5fc>)
 8001976:	4638      	mov	r0, r7
 8001978:	9101      	str	r1, [sp, #4]
 800197a:	f7ff fb7d 	bl	8001078 <lineFollower.constprop.0>
      while (trigger < 1)
 800197e:	f8db 3000 	ldr.w	r3, [fp]
 8001982:	9901      	ldr	r1, [sp, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	ddf6      	ble.n	8001976 <main+0x486>
      degree_servo = 60;
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <main+0x600>)
  pulse_servo1 = 500 + 2000 * angle / 180;
 800198a:	4a48      	ldr	r2, [pc, #288]	; (8001aac <main+0x5bc>)
      degree_servo = 60;
 800198c:	f8ca 3000 	str.w	r3, [sl]
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001990:	f240 438e 	movw	r3, #1166	; 0x48e
 8001994:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 8001996:	6822      	ldr	r2, [r4, #0]
      pulse_servo2 = 500 + 2000 * degree_servo / 180;
 8001998:	f8c8 3000 	str.w	r3, [r8]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 800199c:	6353      	str	r3, [r2, #52]	; 0x34
      pulse_servo3 = 500 + 2000 * degree_servo / 180; // 130?
 800199e:	f8c9 3000 	str.w	r3, [r9]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019a2:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80019a4:	63d3      	str	r3, [r2, #60]	; 0x3c
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80019a6:	f240 5314 	movw	r3, #1300	; 0x514
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80019aa:	4a45      	ldr	r2, [pc, #276]	; (8001ac0 <main+0x5d0>)
  HAL_ADC_Start(&hadc1);
 80019ac:	4851      	ldr	r0, [pc, #324]	; (8001af4 <main+0x604>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80019ae:	6812      	ldr	r2, [r2, #0]
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 80019b0:	6033      	str	r3, [r6, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 80019b2:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_ADC_Start(&hadc1);
 80019b4:	f000 fd9e 	bl	80024f4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 80019b8:	2101      	movs	r1, #1
 80019ba:	484e      	ldr	r0, [pc, #312]	; (8001af4 <main+0x604>)
 80019bc:	f000 fc30 	bl	8002220 <HAL_ADC_PollForConversion>
  int value = Board_Get_ADCChannelValue(&hadc1, ch);
 80019c0:	2102      	movs	r1, #2
 80019c2:	484c      	ldr	r0, [pc, #304]	; (8001af4 <main+0x604>)
 80019c4:	f7ff fb40 	bl	8001048 <Board_Get_ADCChannelValue>
    HAL_ADC_Start(&hadc1);
 80019c8:	4f4a      	ldr	r7, [pc, #296]	; (8001af4 <main+0x604>)
  while (value < 1000) //變成白色之前狀態不變
 80019ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80019ce:	db26      	blt.n	8001a1e <main+0x52e>
  pulse_servo3 = 500 + 2000 * 60 / 180;
 80019d0:	f240 428e 	movw	r2, #1166	; 0x48e
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 80019d4:	f240 7129 	movw	r1, #1833	; 0x729
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <main+0x5b8>)
  pulse_servo3 = 500 + 2000 * 60 / 180;
 80019da:	f8c9 2000 	str.w	r2, [r9]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019de:	681b      	ldr	r3, [r3, #0]
  pulse_servo2 = 500 + 2000 * (180 - 60) / 180;
 80019e0:	f8c8 1000 	str.w	r1, [r8]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_servo2);
 80019e4:	6399      	str	r1, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_servo3);
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
      mode = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <main+0x5c0>)
 80019ec:	6013      	str	r3, [r2, #0]
      break;
 80019ee:	e75a      	b.n	80018a6 <main+0x3b6>
        ftoa(steeringDegree(degree_servo, 1), buffer, 2);
 80019f0:	2101      	movs	r1, #1
 80019f2:	f8da 0000 	ldr.w	r0, [sl]
 80019f6:	f7ff fcff 	bl	80013f8 <steeringDegree>
 80019fa:	f7fe fd0d 	bl	8000418 <__aeabi_f2d>
 80019fe:	2302      	movs	r3, #2
 8001a00:	465a      	mov	r2, fp
 8001a02:	f7ff fa19 	bl	8000e38 <ftoa>
        SSD1306_GotoXY(0, 0);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	f000 f8ad 	bl	8001b68 <SSD1306_GotoXY>
        SSD1306_Puts(buffer, &Font_11x18, 1);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4928      	ldr	r1, [pc, #160]	; (8001ab4 <main+0x5c4>)
 8001a12:	4658      	mov	r0, fp
 8001a14:	f000 f8fc 	bl	8001c10 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8001a18:	f000 f93a 	bl	8001c90 <SSD1306_UpdateScreen>
 8001a1c:	e77d      	b.n	800191a <main+0x42a>
    HAL_ADC_Start(&hadc1);
 8001a1e:	4638      	mov	r0, r7
 8001a20:	f000 fd68 	bl	80024f4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001a24:	2101      	movs	r1, #1
 8001a26:	4638      	mov	r0, r7
 8001a28:	f000 fbfa 	bl	8002220 <HAL_ADC_PollForConversion>
    value = Board_Get_ADCChannelValue(&hadc1, ch);
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4638      	mov	r0, r7
 8001a30:	f7ff fb0a 	bl	8001048 <Board_Get_ADCChannelValue>
 8001a34:	e7c9      	b.n	80019ca <main+0x4da>
  pulse_servo1 = 500 + 2000 * angle / 180;
 8001a36:	f240 7329 	movw	r3, #1833	; 0x729
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <main+0x5bc>)
 8001a3c:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_servo1);
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <main+0x5b8>)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse_BLDC);
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a44:	e72f      	b.n	80018a6 <main+0x3b6>
      HAL_Delay(3000);
 8001a46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a4a:	f000 fbd7 	bl	80021fc <HAL_Delay>
  pulse_BLDC = (MAX_PULSE_LENGTH - MIN_PULSE_LENGTH) * power / 100 + MIN_PULSE_LENGTH;
 8001a4e:	f240 436a 	movw	r3, #1130	; 0x46a
 8001a52:	e736      	b.n	80018c2 <main+0x3d2>
      HAL_ADC_Start(&hadc1);
 8001a54:	4827      	ldr	r0, [pc, #156]	; (8001af4 <main+0x604>)
 8001a56:	f000 fd4d 	bl	80024f4 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1);
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4825      	ldr	r0, [pc, #148]	; (8001af4 <main+0x604>)
 8001a5e:	f000 fbdf 	bl	8002220 <HAL_ADC_PollForConversion>
      value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001a62:	2100      	movs	r1, #0
 8001a64:	4823      	ldr	r0, [pc, #140]	; (8001af4 <main+0x604>)
 8001a66:	f7ff faef 	bl	8001048 <Board_Get_ADCChannelValue>
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <main+0x608>)
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001a6c:	2101      	movs	r1, #1
      value0 = Board_Get_ADCChannelValue(&hadc1, 0);
 8001a6e:	6018      	str	r0, [r3, #0]
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001a70:	4820      	ldr	r0, [pc, #128]	; (8001af4 <main+0x604>)
 8001a72:	f7ff fae9 	bl	8001048 <Board_Get_ADCChannelValue>
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <main+0x60c>)
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001a78:	2102      	movs	r1, #2
      value1 = Board_Get_ADCChannelValue(&hadc1, 1);
 8001a7a:	6018      	str	r0, [r3, #0]
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001a7c:	481d      	ldr	r0, [pc, #116]	; (8001af4 <main+0x604>)
 8001a7e:	f7ff fae3 	bl	8001048 <Board_Get_ADCChannelValue>
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <main+0x610>)
      value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001a84:	2103      	movs	r1, #3
      value2 = Board_Get_ADCChannelValue(&hadc1, 2);
 8001a86:	6018      	str	r0, [r3, #0]
      value3 = Board_Get_ADCChannelValue(&hadc1, 3);
 8001a88:	481a      	ldr	r0, [pc, #104]	; (8001af4 <main+0x604>)
 8001a8a:	f7ff fadd 	bl	8001048 <Board_Get_ADCChannelValue>
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <main+0x614>)
 8001a90:	6018      	str	r0, [r3, #0]
      HAL_Delay(500);
 8001a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a96:	f000 fbb1 	bl	80021fc <HAL_Delay>
      break;
 8001a9a:	e704      	b.n	80018a6 <main+0x3b6>
 8001a9c:	20000088 	.word	0x20000088
 8001aa0:	40005400 	.word	0x40005400
 8001aa4:	00061a80 	.word	0x00061a80
 8001aa8:	20000134 	.word	0x20000134
 8001aac:	20000220 	.word	0x20000220
 8001ab0:	2000020c 	.word	0x2000020c
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	08007278 	.word	0x08007278
 8001abc:	0800727e 	.word	0x0800727e
 8001ac0:	2000017c 	.word	0x2000017c
 8001ac4:	20000218 	.word	0x20000218
 8001ac8:	20000010 	.word	0x20000010
 8001acc:	20000214 	.word	0x20000214
 8001ad0:	2000004c 	.word	0x2000004c
 8001ad4:	429b0000 	.word	0x429b0000
 8001ad8:	42b40000 	.word	0x42b40000
 8001adc:	20000238 	.word	0x20000238
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	40c00000 	.word	0x40c00000
 8001ae8:	41c80000 	.word	0x41c80000
 8001aec:	42c80000 	.word	0x42c80000
 8001af0:	42700000 	.word	0x42700000
 8001af4:	20000058 	.word	0x20000058
 8001af8:	20000014 	.word	0x20000014
 8001afc:	20000018 	.word	0x20000018
 8001b00:	2000001c 	.word	0x2000001c
 8001b04:	20000020 	.word	0x20000020

08001b08 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0e:	bf14      	ite	ne
 8001b10:	21ff      	movne	r1, #255	; 0xff
 8001b12:	2100      	moveq	r1, #0
 8001b14:	4801      	ldr	r0, [pc, #4]	; (8001b1c <SSD1306_Fill+0x14>)
 8001b16:	f003 bb19 	b.w	800514c <memset>
 8001b1a:	bf00      	nop
 8001b1c:	20000242 	.word	0x20000242

08001b20 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001b20:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b22:	b530      	push	{r4, r5, lr}
	if (
 8001b24:	d811      	bhi.n	8001b4a <SSD1306_DrawPixel+0x2a>
		x >= SSD1306_WIDTH ||
 8001b26:	293f      	cmp	r1, #63	; 0x3f
 8001b28:	d80f      	bhi.n	8001b4a <SSD1306_DrawPixel+0x2a>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <SSD1306_DrawPixel+0x40>)
 8001b2c:	4c0d      	ldr	r4, [pc, #52]	; (8001b64 <SSD1306_DrawPixel+0x44>)
 8001b2e:	791d      	ldrb	r5, [r3, #4]
 8001b30:	08cb      	lsrs	r3, r1, #3
 8001b32:	f001 0107 	and.w	r1, r1, #7
 8001b36:	b14d      	cbz	r5, 8001b4c <SSD1306_DrawPixel+0x2c>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b38:	b952      	cbnz	r2, 8001b50 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b3a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001b3e:	2301      	movs	r3, #1
 8001b40:	fa03 f101 	lsl.w	r1, r3, r1
 8001b44:	5c23      	ldrb	r3, [r4, r0]
 8001b46:	4319      	orrs	r1, r3
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b48:	5421      	strb	r1, [r4, r0]
	}
}
 8001b4a:	bd30      	pop	{r4, r5, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8001b4c:	2a01      	cmp	r2, #1
 8001b4e:	d0f4      	beq.n	8001b3a <SSD1306_DrawPixel+0x1a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b50:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001b54:	2301      	movs	r3, #1
 8001b56:	408b      	lsls	r3, r1
 8001b58:	5c21      	ldrb	r1, [r4, r0]
 8001b5a:	ea21 0103 	bic.w	r1, r1, r3
 8001b5e:	e7f3      	b.n	8001b48 <SSD1306_DrawPixel+0x28>
 8001b60:	2000023c 	.word	0x2000023c
 8001b64:	20000242 	.word	0x20000242

08001b68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b68:	4b01      	ldr	r3, [pc, #4]	; (8001b70 <SSD1306_GotoXY+0x8>)
 8001b6a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001b6c:	8059      	strh	r1, [r3, #2]
}
 8001b6e:	4770      	bx	lr
 8001b70:	2000023c 	.word	0x2000023c

08001b74 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b78:	f8df b090 	ldr.w	fp, [pc, #144]	; 8001c0c <SSD1306_Putc+0x98>
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b7c:	4691      	mov	r9, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b7e:	f8bb 6000 	ldrh.w	r6, [fp]
 8001b82:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b84:	4605      	mov	r5, r0
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b86:	4432      	add	r2, r6
	if (
 8001b88:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	b085      	sub	sp, #20
	if (
 8001b8e:	dc3a      	bgt.n	8001c06 <SSD1306_Putc+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b90:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8001b94:	784a      	ldrb	r2, [r1, #1]
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b9a:	2a3f      	cmp	r2, #63	; 0x3f
 8001b9c:	dc33      	bgt.n	8001c06 <SSD1306_Putc+0x92>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b9e:	2700      	movs	r7, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ba0:	f1a0 0320 	sub.w	r3, r0, #32
 8001ba4:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8001ba6:	7862      	ldrb	r2, [r4, #1]
 8001ba8:	4297      	cmp	r7, r2
 8001baa:	d307      	bcc.n	8001bbc <SSD1306_Putc+0x48>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001bac:	7822      	ldrb	r2, [r4, #0]
 8001bae:	4416      	add	r6, r2
 8001bb0:	f8ab 6000 	strh.w	r6, [fp]
	
	/* Return character written */
	return ch;
}
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	b005      	add	sp, #20
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 8001bbc:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	6861      	ldr	r1, [r4, #4]
 8001bc4:	fb02 7203 	mla	r2, r2, r3, r7
 8001bc8:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8001bcc:	9302      	str	r3, [sp, #8]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bce:	9b01      	ldr	r3, [sp, #4]
 8001bd0:	19d9      	adds	r1, r3, r7
 8001bd2:	fa1f fa81 	uxth.w	sl, r1
		for (j = 0; j < Font->FontWidth; j++) {
 8001bd6:	7822      	ldrb	r2, [r4, #0]
 8001bd8:	4590      	cmp	r8, r2
 8001bda:	d301      	bcc.n	8001be0 <SSD1306_Putc+0x6c>
	for (i = 0; i < Font->FontHeight; i++) {
 8001bdc:	3701      	adds	r7, #1
 8001bde:	e7e2      	b.n	8001ba6 <SSD1306_Putc+0x32>
			if ((b << j) & 0x8000) {
 8001be0:	9b02      	ldr	r3, [sp, #8]
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001be2:	eb06 0008 	add.w	r0, r6, r8
			if ((b << j) & 0x8000) {
 8001be6:	fa03 f208 	lsl.w	r2, r3, r8
 8001bea:	0413      	lsls	r3, r2, #16
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bec:	bf54      	ite	pl
 8001bee:	fab9 f289 	clzpl	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bf2:	464a      	movmi	r2, r9
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bf4:	4651      	mov	r1, sl
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bf6:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bf8:	bf58      	it	pl
 8001bfa:	0952      	lsrpl	r2, r2, #5
 8001bfc:	f7ff ff90 	bl	8001b20 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c00:	f108 0801 	add.w	r8, r8, #1
 8001c04:	e7e7      	b.n	8001bd6 <SSD1306_Putc+0x62>
		return 0;
 8001c06:	2500      	movs	r5, #0
 8001c08:	e7d4      	b.n	8001bb4 <SSD1306_Putc+0x40>
 8001c0a:	bf00      	nop
 8001c0c:	2000023c 	.word	0x2000023c

08001c10 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	460d      	mov	r5, r1
 8001c14:	4616      	mov	r6, r2
 8001c16:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8001c18:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c1c:	b138      	cbz	r0, 8001c2e <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c1e:	4632      	mov	r2, r6
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7ff ffa7 	bl	8001b74 <SSD1306_Putc>
 8001c26:	4603      	mov	r3, r0
 8001c28:	7820      	ldrb	r0, [r4, #0]
 8001c2a:	4283      	cmp	r3, r0
 8001c2c:	d0f4      	beq.n	8001c18 <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}

08001c30 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c30:	b530      	push	{r4, r5, lr}
uint8_t dt[256];
dt[0] = reg;
uint8_t i;
for(i = 0; i < count; i++)
 8001c32:	2400      	movs	r4, #0
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c34:	b0c3      	sub	sp, #268	; 0x10c
dt[0] = reg;
 8001c36:	f88d 1008 	strb.w	r1, [sp, #8]
for(i = 0; i < count; i++)
 8001c3a:	b2e1      	uxtb	r1, r4
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	f104 0501 	add.w	r5, r4, #1
 8001c42:	d30a      	bcc.n	8001c5a <ssd1306_I2C_WriteMulti+0x2a>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c44:	220a      	movs	r2, #10
 8001c46:	3301      	adds	r3, #1
 8001c48:	4601      	mov	r1, r0
 8001c4a:	9200      	str	r2, [sp, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	aa02      	add	r2, sp, #8
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <ssd1306_I2C_WriteMulti+0x38>)
 8001c52:	f001 f861 	bl	8002d18 <HAL_I2C_Master_Transmit>
}
 8001c56:	b043      	add	sp, #268	; 0x10c
 8001c58:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8001c5a:	ac02      	add	r4, sp, #8
 8001c5c:	440c      	add	r4, r1
 8001c5e:	5c51      	ldrb	r1, [r2, r1]
 8001c60:	7061      	strb	r1, [r4, #1]
 8001c62:	462c      	mov	r4, r5
 8001c64:	e7e9      	b.n	8001c3a <ssd1306_I2C_WriteMulti+0xa>
 8001c66:	bf00      	nop
 8001c68:	20000088 	.word	0x20000088

08001c6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c6e:	230a      	movs	r3, #10
	dt[0] = reg;
 8001c70:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8001c74:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c78:	4601      	mov	r1, r0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	aa03      	add	r2, sp, #12
 8001c7e:	2302      	movs	r3, #2
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <ssd1306_I2C_Write+0x20>)
 8001c82:	f001 f849 	bl	8002d18 <HAL_I2C_Master_Transmit>
}
 8001c86:	b005      	add	sp, #20
 8001c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8c:	20000088 	.word	0x20000088

08001c90 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	24b0      	movs	r4, #176	; 0xb0
 8001c94:	4d0e      	ldr	r5, [pc, #56]	; (8001cd0 <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c96:	4622      	mov	r2, r4
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2078      	movs	r0, #120	; 0x78
 8001c9c:	f7ff ffe6 	bl	8001c6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2078      	movs	r0, #120	; 0x78
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	f7ff ffe1 	bl	8001c6c <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8001caa:	3401      	adds	r4, #1
		SSD1306_WRITECOMMAND(0x10);
 8001cac:	2210      	movs	r2, #16
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2078      	movs	r0, #120	; 0x78
 8001cb2:	f7ff ffdb 	bl	8001c6c <ssd1306_I2C_Write>
	for (m = 0; m < 8; m++) {
 8001cb6:	b2e4      	uxtb	r4, r4
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001cb8:	462a      	mov	r2, r5
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	2078      	movs	r0, #120	; 0x78
 8001cc0:	f7ff ffb6 	bl	8001c30 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001cc4:	2cb8      	cmp	r4, #184	; 0xb8
 8001cc6:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8001cca:	d1e4      	bne.n	8001c96 <SSD1306_UpdateScreen+0x6>
}
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000242 	.word	0x20000242

08001cd4 <SSD1306_Clear>:
{
 8001cd4:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff ff16 	bl	8001b08 <SSD1306_Fill>
}
 8001cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 8001ce0:	f7ff bfd6 	b.w	8001c90 <SSD1306_UpdateScreen>

08001ce4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001ce4:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ce6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001cea:	2201      	movs	r2, #1
 8001cec:	2178      	movs	r1, #120	; 0x78
 8001cee:	4852      	ldr	r0, [pc, #328]	; (8001e38 <SSD1306_Init+0x154>)
 8001cf0:	f001 f8ea 	bl	8002ec8 <HAL_I2C_IsDeviceReady>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	f040 809c 	bne.w	8001e34 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001cfc:	4601      	mov	r1, r0
 8001cfe:	22ae      	movs	r2, #174	; 0xae
 8001d00:	2078      	movs	r0, #120	; 0x78
 8001d02:	f7ff ffb3 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001d06:	2220      	movs	r2, #32
 8001d08:	4621      	mov	r1, r4
 8001d0a:	2078      	movs	r0, #120	; 0x78
 8001d0c:	f7ff ffae 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d10:	2210      	movs	r2, #16
 8001d12:	4621      	mov	r1, r4
 8001d14:	2078      	movs	r0, #120	; 0x78
 8001d16:	f7ff ffa9 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d1a:	22b0      	movs	r2, #176	; 0xb0
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	2078      	movs	r0, #120	; 0x78
 8001d20:	f7ff ffa4 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001d24:	22c8      	movs	r2, #200	; 0xc8
 8001d26:	4621      	mov	r1, r4
 8001d28:	2078      	movs	r0, #120	; 0x78
 8001d2a:	f7ff ff9f 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001d2e:	4622      	mov	r2, r4
 8001d30:	4621      	mov	r1, r4
 8001d32:	2078      	movs	r0, #120	; 0x78
 8001d34:	f7ff ff9a 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	2078      	movs	r0, #120	; 0x78
 8001d3e:	f7ff ff95 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	4621      	mov	r1, r4
 8001d46:	2078      	movs	r0, #120	; 0x78
 8001d48:	f7ff ff90 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d4c:	2281      	movs	r2, #129	; 0x81
 8001d4e:	4621      	mov	r1, r4
 8001d50:	2078      	movs	r0, #120	; 0x78
 8001d52:	f7ff ff8b 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	4621      	mov	r1, r4
 8001d5a:	2078      	movs	r0, #120	; 0x78
 8001d5c:	f7ff ff86 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001d60:	22a1      	movs	r2, #161	; 0xa1
 8001d62:	4621      	mov	r1, r4
 8001d64:	2078      	movs	r0, #120	; 0x78
 8001d66:	f7ff ff81 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001d6a:	22a6      	movs	r2, #166	; 0xa6
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	2078      	movs	r0, #120	; 0x78
 8001d70:	f7ff ff7c 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001d74:	22a8      	movs	r2, #168	; 0xa8
 8001d76:	4621      	mov	r1, r4
 8001d78:	2078      	movs	r0, #120	; 0x78
 8001d7a:	f7ff ff77 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001d7e:	223f      	movs	r2, #63	; 0x3f
 8001d80:	4621      	mov	r1, r4
 8001d82:	2078      	movs	r0, #120	; 0x78
 8001d84:	f7ff ff72 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d88:	22a4      	movs	r2, #164	; 0xa4
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	2078      	movs	r0, #120	; 0x78
 8001d8e:	f7ff ff6d 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001d92:	22d3      	movs	r2, #211	; 0xd3
 8001d94:	4621      	mov	r1, r4
 8001d96:	2078      	movs	r0, #120	; 0x78
 8001d98:	f7ff ff68 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	4621      	mov	r1, r4
 8001da0:	2078      	movs	r0, #120	; 0x78
 8001da2:	f7ff ff63 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001da6:	22d5      	movs	r2, #213	; 0xd5
 8001da8:	4621      	mov	r1, r4
 8001daa:	2078      	movs	r0, #120	; 0x78
 8001dac:	f7ff ff5e 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001db0:	22f0      	movs	r2, #240	; 0xf0
 8001db2:	4621      	mov	r1, r4
 8001db4:	2078      	movs	r0, #120	; 0x78
 8001db6:	f7ff ff59 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001dba:	22d9      	movs	r2, #217	; 0xd9
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	2078      	movs	r0, #120	; 0x78
 8001dc0:	f7ff ff54 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001dc4:	2222      	movs	r2, #34	; 0x22
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	2078      	movs	r0, #120	; 0x78
 8001dca:	f7ff ff4f 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001dce:	22da      	movs	r2, #218	; 0xda
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	2078      	movs	r0, #120	; 0x78
 8001dd4:	f7ff ff4a 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001dd8:	2212      	movs	r2, #18
 8001dda:	4621      	mov	r1, r4
 8001ddc:	2078      	movs	r0, #120	; 0x78
 8001dde:	f7ff ff45 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001de2:	22db      	movs	r2, #219	; 0xdb
 8001de4:	4621      	mov	r1, r4
 8001de6:	2078      	movs	r0, #120	; 0x78
 8001de8:	f7ff ff40 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001dec:	2220      	movs	r2, #32
 8001dee:	4621      	mov	r1, r4
 8001df0:	2078      	movs	r0, #120	; 0x78
 8001df2:	f7ff ff3b 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001df6:	228d      	movs	r2, #141	; 0x8d
 8001df8:	4621      	mov	r1, r4
 8001dfa:	2078      	movs	r0, #120	; 0x78
 8001dfc:	f7ff ff36 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001e00:	2214      	movs	r2, #20
 8001e02:	4621      	mov	r1, r4
 8001e04:	2078      	movs	r0, #120	; 0x78
 8001e06:	f7ff ff31 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e0a:	22af      	movs	r2, #175	; 0xaf
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	2078      	movs	r0, #120	; 0x78
 8001e10:	f7ff ff2c 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001e14:	222e      	movs	r2, #46	; 0x2e
 8001e16:	4621      	mov	r1, r4
 8001e18:	2078      	movs	r0, #120	; 0x78
 8001e1a:	f7ff ff27 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff fe72 	bl	8001b08 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001e24:	f7ff ff34 	bl	8001c90 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001e28:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SSD1306_Init+0x158>)
 8001e2c:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e2e:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 8001e30:	7158      	strb	r0, [r3, #5]
}
 8001e32:	bd10      	pop	{r4, pc}
		return 0;
 8001e34:	2000      	movs	r0, #0
 8001e36:	e7fc      	b.n	8001e32 <SSD1306_Init+0x14e>
 8001e38:	20000088 	.word	0x20000088
 8001e3c:	2000023c 	.word	0x2000023c

08001e40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_MspInit+0x3c>)
{
 8001e42:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	619a      	str	r2, [r3, #24]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	f002 0201 	and.w	r2, r2, #1
 8001e52:	9200      	str	r2, [sp, #0]
 8001e54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e5c:	61da      	str	r2, [r3, #28]
 8001e5e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e6a:	6853      	ldr	r3, [r2, #4]
 8001e6c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	b002      	add	sp, #8
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010000 	.word	0x40010000

08001e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4604      	mov	r4, r0
 8001e88:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	a802      	add	r0, sp, #8
 8001e90:	f003 f95c 	bl	800514c <memset>
  if(hadc->Instance==ADC1)
 8001e94:	6822      	ldr	r2, [r4, #0]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_ADC_MspInit+0x54>)
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e9c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001ea0:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	480e      	ldr	r0, [pc, #56]	; (8001edc <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eae:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001eb2:	9200      	str	r2, [sp, #0]
 8001eb4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	619a      	str	r2, [r3, #24]
 8001ebe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f000 fcc2 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ed4:	b006      	add	sp, #24
 8001ed6:	bd10      	pop	{r4, pc}
 8001ed8:	40012400 	.word	0x40012400
 8001edc:	40010800 	.word	0x40010800

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	2100      	movs	r1, #0
 8001eea:	a802      	add	r0, sp, #8
 8001eec:	f003 f92e 	bl	800514c <memset>
  if(hi2c->Instance==I2C1)
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_I2C_MspInit+0x58>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d11c      	bne.n	8001f32 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4c10      	ldr	r4, [pc, #64]	; (8001f3c <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efa:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	4810      	ldr	r0, [pc, #64]	; (8001f40 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	61a3      	str	r3, [r4, #24]
 8001f06:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f12:	2312      	movs	r3, #18
 8001f14:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f000 fc9c 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f20:	69e3      	ldr	r3, [r4, #28]
 8001f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f26:	61e3      	str	r3, [r4, #28]
 8001f28:	69e3      	ldr	r3, [r4, #28]
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f32:	b006      	add	sp, #24
 8001f34:	bd10      	pop	{r4, pc}
 8001f36:	bf00      	nop
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010c00 	.word	0x40010c00

08001f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b510      	push	{r4, lr}
 8001f46:	4604      	mov	r4, r0
 8001f48:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	a802      	add	r0, sp, #8
 8001f50:	f003 f8fc 	bl	800514c <memset>
  if(hspi->Instance==SPI1)
 8001f54:	6822      	ldr	r2, [r4, #0]
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_SPI_MspInit+0x7c>)
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d12e      	bne.n	8001fba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001f60:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	4818      	ldr	r0, [pc, #96]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f68:	619a      	str	r2, [r3, #24]
 8001f6a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f72:	9200      	str	r2, [sp, #0]
 8001f74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	f042 0204 	orr.w	r2, r2, #4
 8001f7e:	619a      	str	r2, [r3, #24]
 8001f80:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f000 fc5f 	bl	8002858 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	4809      	ldr	r0, [pc, #36]	; (8001fc4 <HAL_SPI_MspInit+0x80>)
 8001f9e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f000 fc57 	bl	8002858 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001faa:	2023      	movs	r0, #35	; 0x23
 8001fac:	4622      	mov	r2, r4
 8001fae:	4621      	mov	r1, r4
 8001fb0:	f000 fbb8 	bl	8002724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fb4:	2023      	movs	r0, #35	; 0x23
 8001fb6:	f000 fbe7 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fba:	b006      	add	sp, #24
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40013000 	.word	0x40013000
 8001fc4:	40010800 	.word	0x40010800

08001fc8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001fc8:	6803      	ldr	r3, [r0, #0]
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <HAL_TIM_PWM_MspInit+0x40>)
{
 8001fcc:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10b      	bne.n	8001fea <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_TIM_PWM_MspInit+0x44>)
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fe6:	b002      	add	sp, #8
 8001fe8:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d1fa      	bne.n	8001fe6 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	61da      	str	r2, [r3, #28]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	9b01      	ldr	r3, [sp, #4]
}
 8002006:	e7ee      	b.n	8001fe6 <HAL_TIM_PWM_MspInit+0x1e>
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_TIM_Base_MspInit+0x3c>)
 8002014:	6802      	ldr	r2, [r0, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d115      	bne.n	8002046 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800201a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800201e:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002020:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002022:	f042 0202 	orr.w	r2, r2, #2
 8002026:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800202c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002036:	f000 fb75 	bl	8002724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800203a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800203c:	b003      	add	sp, #12
 800203e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002042:	f000 bba1 	b.w	8002788 <HAL_NVIC_EnableIRQ>
}
 8002046:	b003      	add	sp, #12
 8002048:	f85d fb04 	ldr.w	pc, [sp], #4
 800204c:	40000400 	.word	0x40000400

08002050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
 8002054:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002056:	2210      	movs	r2, #16
 8002058:	2100      	movs	r1, #0
 800205a:	a802      	add	r0, sp, #8
 800205c:	f003 f876 	bl	800514c <memset>
  if(htim->Instance==TIM1)
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_TIM_MspPostInit+0x88>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d115      	bne.n	8002094 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_TIM_MspPostInit+0x8c>)
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	481b      	ldr	r0, [pc, #108]	; (80020e0 <HAL_TIM_MspPostInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	f042 0204 	orr.w	r2, r2, #4
 8002076:	619a      	str	r2, [r3, #24]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f000 fbe4 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002090:	b006      	add	sp, #24
 8002092:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d1fa      	bne.n	8002090 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800209e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	480f      	ldr	r0, [pc, #60]	; (80020e0 <HAL_TIM_MspPostInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	f042 0204 	orr.w	r2, r2, #4
 80020a6:	619a      	str	r2, [r3, #24]
 80020a8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f000 fbca 	bl	8002858 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_TIM_MspPostInit+0x94>)
 80020c6:	6853      	ldr	r3, [r2, #4]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6053      	str	r3, [r2, #4]
}
 80020d6:	e7db      	b.n	8002090 <HAL_TIM_MspPostInit+0x40>
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010800 	.word	0x40010800
 80020e4:	40010000 	.word	0x40010000

080020e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <NMI_Handler>

080020ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <HardFault_Handler>

080020ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler>

080020ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <BusFault_Handler>

080020f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler>

080020f2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f8:	f000 b86e 	b.w	80021d8 <HAL_IncTick>

080020fc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020fc:	4801      	ldr	r0, [pc, #4]	; (8002104 <TIM3_IRQHandler+0x8>)
 80020fe:	f001 bc8d 	b.w	8003a1c <HAL_TIM_IRQHandler>
 8002102:	bf00      	nop
 8002104:	200001c4 	.word	0x200001c4

08002108 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002108:	4801      	ldr	r0, [pc, #4]	; (8002110 <SPI1_IRQHandler+0x8>)
 800210a:	f001 bb67 	b.w	80037dc <HAL_SPI_IRQHandler>
 800210e:	bf00      	nop
 8002110:	200000dc 	.word	0x200000dc

08002114 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002114:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002118:	f000 bc78 	b.w	8002a0c <HAL_GPIO_EXTI_IRQHandler>

0800211c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	4770      	bx	lr
	...

08002120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002122:	490d      	ldr	r1, [pc, #52]	; (8002158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002138:	4c0a      	ldr	r4, [pc, #40]	; (8002164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002146:	f7ff ffe9 	bl	800211c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f002 ffdb 	bl	8005104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214e:	f7ff f9cf 	bl	80014f0 <main>
  bx lr
 8002152:	4770      	bx	lr
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800215c:	08007490 	.word	0x08007490
  ldr r2, =_sbss
 8002160:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8002164:	20000648 	.word	0x20000648

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_InitTick+0x3c>)
{
 8002170:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002172:	7818      	ldrb	r0, [r3, #0]
 8002174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002178:	fbb3 f3f0 	udiv	r3, r3, r0
 800217c:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <HAL_InitTick+0x40>)
 800217e:	6810      	ldr	r0, [r2, #0]
 8002180:	fbb0 f0f3 	udiv	r0, r0, r3
 8002184:	f000 fb0e 	bl	80027a4 <HAL_SYSTICK_Config>
 8002188:	4604      	mov	r4, r0
 800218a:	b958      	cbnz	r0, 80021a4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218c:	2d0f      	cmp	r5, #15
 800218e:	d809      	bhi.n	80021a4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	4602      	mov	r2, r0
 8002192:	4629      	mov	r1, r5
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002198:	f000 fac4 	bl	8002724 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4620      	mov	r0, r4
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_InitTick+0x44>)
 80021a0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
 80021a6:	e7fc      	b.n	80021a2 <HAL_InitTick+0x36>
 80021a8:	20000028 	.word	0x20000028
 80021ac:	20000024 	.word	0x20000024
 80021b0:	2000002c 	.word	0x2000002c

080021b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_Init+0x20>)
{
 80021b6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c2:	f000 fa9d 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	200f      	movs	r0, #15
 80021c8:	f7ff ffd0 	bl	800216c <HAL_InitTick>
  HAL_MspInit();
 80021cc:	f7ff fe38 	bl	8001e40 <HAL_MspInit>
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	bd08      	pop	{r3, pc}
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x10>)
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_IncTick+0x14>)
 80021dc:	6811      	ldr	r1, [r2, #0]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	440b      	add	r3, r1
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000644 	.word	0x20000644
 80021ec:	20000028 	.word	0x20000028

080021f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021f0:	4b01      	ldr	r3, [pc, #4]	; (80021f8 <HAL_GetTick+0x8>)
 80021f2:	6818      	ldr	r0, [r3, #0]
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000644 	.word	0x20000644

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff fff6 	bl	80021f0 <HAL_GetTick>
 8002204:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002208:	bf1e      	ittt	ne
 800220a:	4b04      	ldrne	r3, [pc, #16]	; (800221c <HAL_Delay+0x20>)
 800220c:	781b      	ldrbne	r3, [r3, #0]
 800220e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	1b43      	subs	r3, r0, r5
 8002216:	42a3      	cmp	r3, r4
 8002218:	d3fa      	bcc.n	8002210 <HAL_Delay+0x14>
  {
  }
}
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	20000028 	.word	0x20000028

08002220 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002222:	2600      	movs	r6, #0
{
 8002224:	4604      	mov	r4, r0
 8002226:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002228:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800222a:	f7ff ffe1 	bl	80021f0 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800222e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002230:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	05d2      	lsls	r2, r2, #23
 8002236:	d508      	bpl.n	800224a <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8002238:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800223c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8002246:	b003      	add	sp, #12
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	05d6      	lsls	r6, r2, #23
 800224e:	d403      	bmi.n	8002258 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002252:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002256:	d03f      	beq.n	80022d8 <HAL_ADC_PollForConversion+0xb8>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002258:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_ADC_PollForConversion+0x140>)
 800225a:	2002      	movs	r0, #2
 800225c:	681e      	ldr	r6, [r3, #0]
 800225e:	f001 f9f1 	bl	8003644 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	4a3f      	ldr	r2, [pc, #252]	; (8002364 <HAL_ADC_PollForConversion+0x144>)
 8002266:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002268:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800226c:	4211      	tst	r1, r2
 800226e:	4a3e      	ldr	r2, [pc, #248]	; (8002368 <HAL_ADC_PollForConversion+0x148>)
 8002270:	d153      	bne.n	800231a <HAL_ADC_PollForConversion+0xfa>
 8002272:	68d8      	ldr	r0, [r3, #12]
 8002274:	493d      	ldr	r1, [pc, #244]	; (800236c <HAL_ADC_PollForConversion+0x14c>)
 8002276:	4208      	tst	r0, r1
 8002278:	d14f      	bne.n	800231a <HAL_ADC_PollForConversion+0xfa>
 800227a:	6919      	ldr	r1, [r3, #16]
 800227c:	4211      	tst	r1, r2
 800227e:	d15d      	bne.n	800233c <HAL_ADC_PollForConversion+0x11c>
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_ADC_PollForConversion+0x150>)
 8002284:	421a      	tst	r2, r3
 8002286:	bf14      	ite	ne
 8002288:	2329      	movne	r3, #41	; 0x29
 800228a:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800228c:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	42b3      	cmp	r3, r6
 8002292:	d225      	bcs.n	80022e0 <HAL_ADC_PollForConversion+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8002294:	1c6a      	adds	r2, r5, #1
 8002296:	d05c      	beq.n	8002352 <HAL_ADC_PollForConversion+0x132>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002298:	2d00      	cmp	r5, #0
 800229a:	d155      	bne.n	8002348 <HAL_ADC_PollForConversion+0x128>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800229c:	9b01      	ldr	r3, [sp, #4]
 800229e:	42b3      	cmp	r3, r6
 80022a0:	d257      	bcs.n	8002352 <HAL_ADC_PollForConversion+0x132>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	62a3      	str	r3, [r4, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80022aa:	2300      	movs	r3, #0
 80022ac:	e00b      	b.n	80022c6 <HAL_ADC_PollForConversion+0xa6>
      if(Timeout != HAL_MAX_DELAY)
 80022ae:	1c68      	adds	r0, r5, #1
 80022b0:	d013      	beq.n	80022da <HAL_ADC_PollForConversion+0xba>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022b2:	b965      	cbnz	r5, 80022ce <HAL_ADC_PollForConversion+0xae>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f013 0302 	ands.w	r3, r3, #2
 80022bc:	d10c      	bne.n	80022d8 <HAL_ADC_PollForConversion+0xb8>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022c0:	f042 0204 	orr.w	r2, r2, #4
 80022c4:	62a2      	str	r2, [r4, #40]	; 0x28
            return HAL_TIMEOUT;
 80022c6:	2003      	movs	r0, #3
            __HAL_UNLOCK(hadc);
 80022c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            return HAL_TIMEOUT;
 80022cc:	e7bb      	b.n	8002246 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022ce:	f7ff ff8f 	bl	80021f0 <HAL_GetTick>
 80022d2:	1bc0      	subs	r0, r0, r7
 80022d4:	42a8      	cmp	r0, r5
 80022d6:	d8ed      	bhi.n	80022b4 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	0799      	lsls	r1, r3, #30
 80022de:	d5e6      	bpl.n	80022ae <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e0:	f06f 0312 	mvn.w	r3, #18
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ee:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f0:	6893      	ldr	r3, [r2, #8]
 80022f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022fa:	d12e      	bne.n	800235a <HAL_ADC_PollForConversion+0x13a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022fc:	7b20      	ldrb	r0, [r4, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022fe:	2800      	cmp	r0, #0
 8002300:	d12b      	bne.n	800235a <HAL_ADC_PollForConversion+0x13a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002308:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800230a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800230c:	04db      	lsls	r3, r3, #19
 800230e:	d424      	bmi.n	800235a <HAL_ADC_PollForConversion+0x13a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	62a3      	str	r3, [r4, #40]	; 0x28
 8002318:	e795      	b.n	8002246 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	4211      	tst	r1, r2
 800231e:	d103      	bne.n	8002328 <HAL_ADC_PollForConversion+0x108>
 8002320:	68d9      	ldr	r1, [r3, #12]
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <HAL_ADC_PollForConversion+0x150>)
 8002324:	4211      	tst	r1, r2
 8002326:	d00b      	beq.n	8002340 <HAL_ADC_PollForConversion+0x120>
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_ADC_PollForConversion+0x154>)
 800232c:	4211      	tst	r1, r2
 800232e:	d109      	bne.n	8002344 <HAL_ADC_PollForConversion+0x124>
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4213      	tst	r3, r2
 8002334:	bf14      	ite	ne
 8002336:	23fc      	movne	r3, #252	; 0xfc
 8002338:	2354      	moveq	r3, #84	; 0x54
 800233a:	e7a7      	b.n	800228c <HAL_ADC_PollForConversion+0x6c>
 800233c:	2329      	movs	r3, #41	; 0x29
 800233e:	e7a5      	b.n	800228c <HAL_ADC_PollForConversion+0x6c>
 8002340:	2354      	movs	r3, #84	; 0x54
 8002342:	e7a3      	b.n	800228c <HAL_ADC_PollForConversion+0x6c>
 8002344:	23fc      	movs	r3, #252	; 0xfc
 8002346:	e7a1      	b.n	800228c <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002348:	f7ff ff52 	bl	80021f0 <HAL_GetTick>
 800234c:	1bc0      	subs	r0, r0, r7
 800234e:	42a8      	cmp	r0, r5
 8002350:	d8a4      	bhi.n	800229c <HAL_ADC_PollForConversion+0x7c>
      Conversion_Timeout_CPU_cycles ++;
 8002352:	9b01      	ldr	r3, [sp, #4]
 8002354:	3301      	adds	r3, #1
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	e799      	b.n	800228e <HAL_ADC_PollForConversion+0x6e>
  return HAL_OK;
 800235a:	2000      	movs	r0, #0
 800235c:	e773      	b.n	8002246 <HAL_ADC_PollForConversion+0x26>
 800235e:	bf00      	nop
 8002360:	20000024 	.word	0x20000024
 8002364:	24924924 	.word	0x24924924
 8002368:	12492492 	.word	0x12492492
 800236c:	00924924 	.word	0x00924924
 8002370:	00492492 	.word	0x00492492
 8002374:	00249249 	.word	0x00249249

08002378 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002378:	6803      	ldr	r3, [r0, #0]
 800237a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800237c:	4770      	bx	lr
	...

08002380 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002380:	2300      	movs	r3, #0
{ 
 8002382:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002384:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002386:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800238a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800238c:	2b01      	cmp	r3, #1
 800238e:	d06c      	beq.n	800246a <HAL_ADC_ConfigChannel+0xea>
 8002390:	2301      	movs	r3, #1
 8002392:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002396:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002398:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800239a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800239c:	6808      	ldr	r0, [r1, #0]
 800239e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80023a2:	d822      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023a4:	261f      	movs	r6, #31
 80023a6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80023a8:	3b05      	subs	r3, #5
 80023aa:	409e      	lsls	r6, r3
 80023ac:	ea25 0506 	bic.w	r5, r5, r6
 80023b0:	fa00 f303 	lsl.w	r3, r0, r3
 80023b4:	432b      	orrs	r3, r5
 80023b6:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023b8:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023ba:	688b      	ldr	r3, [r1, #8]
 80023bc:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80023c0:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023c4:	d929      	bls.n	800241a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023c6:	68d6      	ldr	r6, [r2, #12]
 80023c8:	3d1e      	subs	r5, #30
 80023ca:	40a9      	lsls	r1, r5
 80023cc:	ea26 0101 	bic.w	r1, r6, r1
 80023d0:	40ab      	lsls	r3, r5
 80023d2:	430b      	orrs	r3, r1
 80023d4:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023d6:	f1a0 0310 	sub.w	r3, r0, #16
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d925      	bls.n	800242a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023de:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e0:	2300      	movs	r3, #0
 80023e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80023e6:	b002      	add	sp, #8
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80023ea:	2d0c      	cmp	r5, #12
 80023ec:	f04f 051f 	mov.w	r5, #31
 80023f0:	d809      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023f2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80023f4:	3b23      	subs	r3, #35	; 0x23
 80023f6:	409d      	lsls	r5, r3
 80023f8:	ea26 0505 	bic.w	r5, r6, r5
 80023fc:	fa00 f303 	lsl.w	r3, r0, r3
 8002400:	432b      	orrs	r3, r5
 8002402:	6313      	str	r3, [r2, #48]	; 0x30
 8002404:	e7d8      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002406:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8002408:	3b41      	subs	r3, #65	; 0x41
 800240a:	409d      	lsls	r5, r3
 800240c:	ea26 0505 	bic.w	r5, r6, r5
 8002410:	fa00 f303 	lsl.w	r3, r0, r3
 8002414:	432b      	orrs	r3, r5
 8002416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002418:	e7ce      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800241a:	6910      	ldr	r0, [r2, #16]
 800241c:	40a9      	lsls	r1, r5
 800241e:	ea20 0101 	bic.w	r1, r0, r1
 8002422:	40ab      	lsls	r3, r5
 8002424:	430b      	orrs	r3, r1
 8002426:	6113      	str	r3, [r2, #16]
 8002428:	e7d9      	b.n	80023de <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_ADC_ConfigChannel+0xf0>)
 800242c:	429a      	cmp	r2, r3
 800242e:	d116      	bne.n	800245e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002430:	6893      	ldr	r3, [r2, #8]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	d4d3      	bmi.n	80023de <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002436:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002438:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800243e:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002440:	d1cd      	bne.n	80023de <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_ADC_ConfigChannel+0xf4>)
 8002444:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_ADC_ConfigChannel+0xf8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fbb3 f3f2 	udiv	r3, r3, r2
 800244c:	220a      	movs	r2, #10
 800244e:	4353      	muls	r3, r2
            wait_loop_index--;
 8002450:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002452:	9b01      	ldr	r3, [sp, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0c2      	beq.n	80023de <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002458:	9b01      	ldr	r3, [sp, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	e7f8      	b.n	8002450 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002460:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002468:	e7ba      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800246a:	2002      	movs	r0, #2
 800246c:	e7bb      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x66>
 800246e:	bf00      	nop
 8002470:	40012400 	.word	0x40012400
 8002474:	20000024 	.word	0x20000024
 8002478:	000f4240 	.word	0x000f4240

0800247c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800247c:	2300      	movs	r3, #0
{
 800247e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002480:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002482:	6803      	ldr	r3, [r0, #0]
{
 8002484:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	07d2      	lsls	r2, r2, #31
 800248a:	d502      	bpl.n	8002492 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800248c:	2000      	movs	r0, #0
}
 800248e:	b003      	add	sp, #12
 8002490:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <ADC_Enable+0x70>)
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <ADC_Enable+0x74>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80024a4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	b9e3      	cbnz	r3, 80024e4 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80024aa:	f7ff fea1 	bl	80021f0 <HAL_GetTick>
 80024ae:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	07db      	lsls	r3, r3, #31
 80024b6:	d4e9      	bmi.n	800248c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024b8:	f7ff fe9a 	bl	80021f0 <HAL_GetTick>
 80024bc:	1b40      	subs	r0, r0, r5
 80024be:	2802      	cmp	r0, #2
 80024c0:	d9f6      	bls.n	80024b0 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f013 0301 	ands.w	r3, r3, #1
 80024ca:	d1f1      	bne.n	80024b0 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	f042 0210 	orr.w	r2, r2, #16
 80024d4:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80024d8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80024e2:	e7d4      	b.n	800248e <ADC_Enable+0x12>
      wait_loop_index--;
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	e7dc      	b.n	80024a4 <ADC_Enable+0x28>
 80024ea:	bf00      	nop
 80024ec:	20000024 	.word	0x20000024
 80024f0:	000f4240 	.word	0x000f4240

080024f4 <HAL_ADC_Start>:
{
 80024f4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80024f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80024fa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d054      	beq.n	80025aa <HAL_ADC_Start+0xb6>
 8002500:	2301      	movs	r3, #1
 8002502:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002506:	f7ff ffb9 	bl	800247c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800250a:	2800      	cmp	r0, #0
 800250c:	d149      	bne.n	80025a2 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800250e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	4293      	cmp	r3, r2
 8002524:	d104      	bne.n	8002530 <HAL_ADC_Start+0x3c>
 8002526:	4923      	ldr	r1, [pc, #140]	; (80025b4 <HAL_ADC_Start+0xc0>)
 8002528:	684a      	ldr	r2, [r1, #4]
 800252a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800252e:	d12e      	bne.n	800258e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002530:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002532:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002536:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002538:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800253a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800253c:	bf41      	itttt	mi
 800253e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8002540:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8002544:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8002548:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800254c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002550:	bf1c      	itt	ne
 8002552:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8002554:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002558:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800255a:	2200      	movs	r2, #0
 800255c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002560:	f06f 0202 	mvn.w	r2, #2
 8002564:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800256c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002570:	d113      	bne.n	800259a <HAL_ADC_Start+0xa6>
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <HAL_ADC_Start+0xbc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d105      	bne.n	8002584 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002578:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800257c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800257e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002582:	d10a      	bne.n	800259a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002594:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002596:	684a      	ldr	r2, [r1, #4]
 8002598:	e7cf      	b.n	800253a <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025a0:	e7f3      	b.n	800258a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80025a2:	2300      	movs	r3, #0
 80025a4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80025a8:	e7f0      	b.n	800258c <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 80025aa:	2002      	movs	r0, #2
 80025ac:	e7ee      	b.n	800258c <HAL_ADC_Start+0x98>
 80025ae:	bf00      	nop
 80025b0:	40012800 	.word	0x40012800
 80025b4:	40012400 	.word	0x40012400

080025b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025ba:	6803      	ldr	r3, [r0, #0]
{
 80025bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	07d1      	lsls	r1, r2, #31
 80025c2:	d401      	bmi.n	80025c8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025c4:	2000      	movs	r0, #0
}
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025d0:	f7ff fe0e 	bl	80021f0 <HAL_GetTick>
 80025d4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	07db      	lsls	r3, r3, #31
 80025dc:	d5f2      	bpl.n	80025c4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025de:	f7ff fe07 	bl	80021f0 <HAL_GetTick>
 80025e2:	1b40      	subs	r0, r0, r5
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d9f6      	bls.n	80025d6 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	07da      	lsls	r2, r3, #31
 80025ee:	d5f2      	bpl.n	80025d6 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	f043 0310 	orr.w	r3, r3, #16
 80025f8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002602:	e7e0      	b.n	80025c6 <ADC_ConversionStop_Disable+0xe>

08002604 <HAL_ADC_Init>:
{
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002606:	4604      	mov	r4, r0
 8002608:	2800      	cmp	r0, #0
 800260a:	d06e      	beq.n	80026ea <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800260c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800260e:	b923      	cbnz	r3, 800261a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002612:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002616:	f7ff fc35 	bl	8001e84 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff ffcc 	bl	80025b8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002622:	f013 0310 	ands.w	r3, r3, #16
 8002626:	d162      	bne.n	80026ee <HAL_ADC_Init+0xea>
 8002628:	2800      	cmp	r0, #0
 800262a:	d160      	bne.n	80026ee <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 800262c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800262e:	69e5      	ldr	r5, [r4, #28]
 8002630:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002632:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002636:	f022 0202 	bic.w	r2, r2, #2
 800263a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800263e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002640:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002642:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002644:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002646:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800264a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800264e:	d037      	beq.n	80026c0 <HAL_ADC_Init+0xbc>
 8002650:	2d01      	cmp	r5, #1
 8002652:	bf14      	ite	ne
 8002654:	2700      	movne	r7, #0
 8002656:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800265a:	7d26      	ldrb	r6, [r4, #20]
 800265c:	2e01      	cmp	r6, #1
 800265e:	d106      	bne.n	800266e <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002660:	bb82      	cbnz	r2, 80026c4 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002662:	69a2      	ldr	r2, [r4, #24]
 8002664:	3a01      	subs	r2, #1
 8002666:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 800266a:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800266e:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002670:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002674:	6856      	ldr	r6, [r2, #4]
 8002676:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800267a:	ea46 0607 	orr.w	r6, r6, r7
 800267e:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002680:	6897      	ldr	r7, [r2, #8]
 8002682:	4e1d      	ldr	r6, [pc, #116]	; (80026f8 <HAL_ADC_Init+0xf4>)
 8002684:	ea06 0607 	and.w	r6, r6, r7
 8002688:	ea46 0601 	orr.w	r6, r6, r1
 800268c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800268e:	d001      	beq.n	8002694 <HAL_ADC_Init+0x90>
 8002690:	2d01      	cmp	r5, #1
 8002692:	d102      	bne.n	800269a <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002694:	6923      	ldr	r3, [r4, #16]
 8002696:	3b01      	subs	r3, #1
 8002698:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800269a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800269c:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80026a0:	432b      	orrs	r3, r5
 80026a2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a4:	6892      	ldr	r2, [r2, #8]
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_ADC_Init+0xf8>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	4299      	cmp	r1, r3
 80026ac:	d113      	bne.n	80026d6 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80026ae:	2300      	movs	r3, #0
 80026b0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80026b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026b4:	f023 0303 	bic.w	r3, r3, #3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80026be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026c0:	462f      	mov	r7, r5
 80026c2:	e7ca      	b.n	800265a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80026d4:	e7cb      	b.n	800266e <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 80026d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026d8:	f023 0312 	bic.w	r3, r3, #18
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80026ea:	2001      	movs	r0, #1
 80026ec:	e7e7      	b.n	80026be <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80026f6:	e7f8      	b.n	80026ea <HAL_ADC_Init+0xe6>
 80026f8:	ffe1f7fd 	.word	0xffe1f7fd
 80026fc:	ff1f0efe 	.word	0xff1f0efe

08002700 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002702:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800270e:	0412      	lsls	r2, r2, #16
 8002710:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800271c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b530      	push	{r4, r5, lr}
 8002728:	68dc      	ldr	r4, [r3, #12]
 800272a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	2b04      	cmp	r3, #4
 8002736:	bf28      	it	cs
 8002738:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002740:	bf98      	it	ls
 8002742:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002748:	bf88      	it	hi
 800274a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	ea21 0303 	bic.w	r3, r1, r3
 8002750:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002752:	fa05 f404 	lsl.w	r4, r5, r4
 8002756:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800275a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	bfac      	ite	ge
 8002762:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	4a07      	ldrlt	r2, [pc, #28]	; (8002784 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002768:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800276c:	b2db      	uxtb	r3, r3
 800276e:	bfab      	itete	ge
 8002770:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800277e:	bd30      	pop	{r4, r5, pc}
 8002780:	e000ed00 	.word	0xe000ed00
 8002784:	e000ed14 	.word	0xe000ed14

08002788 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002788:	2800      	cmp	r0, #0
 800278a:	db08      	blt.n	800279e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278c:	2301      	movs	r3, #1
 800278e:	0942      	lsrs	r2, r0, #5
 8002790:	f000 001f 	and.w	r0, r0, #31
 8002794:	fa03 f000 	lsl.w	r0, r3, r0
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <HAL_NVIC_EnableIRQ+0x18>)
 800279a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	3801      	subs	r0, #1
 80027a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80027aa:	d20b      	bcs.n	80027c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	21f0      	movs	r1, #240	; 0xf0
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027bc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027be:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80027c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027ce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	2304      	movs	r3, #4
 80027d8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80027da:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80027dc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f022 020e 	bic.w	r2, r2, #14
 80027e6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027f0:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_DMA_Abort_IT+0x84>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01c      	beq.n	8002830 <HAL_DMA_Abort_IT+0x64>
 80027f6:	3214      	adds	r2, #20
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d01b      	beq.n	8002834 <HAL_DMA_Abort_IT+0x68>
 80027fc:	3214      	adds	r2, #20
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01a      	beq.n	8002838 <HAL_DMA_Abort_IT+0x6c>
 8002802:	3214      	adds	r2, #20
 8002804:	4293      	cmp	r3, r2
 8002806:	d01a      	beq.n	800283e <HAL_DMA_Abort_IT+0x72>
 8002808:	3214      	adds	r2, #20
 800280a:	4293      	cmp	r3, r2
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_Abort_IT+0x78>
 800280e:	3214      	adds	r2, #20
 8002810:	4293      	cmp	r3, r2
 8002812:	bf0c      	ite	eq
 8002814:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002818:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <HAL_DMA_Abort_IT+0x88>)
 800281e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002824:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002826:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002828:	b17b      	cbz	r3, 800284a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 800282a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e7d5      	b.n	80027dc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002830:	2301      	movs	r3, #1
 8002832:	e7f3      	b.n	800281c <HAL_DMA_Abort_IT+0x50>
 8002834:	2310      	movs	r3, #16
 8002836:	e7f1      	b.n	800281c <HAL_DMA_Abort_IT+0x50>
 8002838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283c:	e7ee      	b.n	800281c <HAL_DMA_Abort_IT+0x50>
 800283e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002842:	e7eb      	b.n	800281c <HAL_DMA_Abort_IT+0x50>
 8002844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002848:	e7e8      	b.n	800281c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	4618      	mov	r0, r3
 800284c:	e7c6      	b.n	80027dc <HAL_DMA_Abort_IT+0x10>
 800284e:	bf00      	nop
 8002850:	40020008 	.word	0x40020008
 8002854:	40020000 	.word	0x40020000

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800285e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002860:	4f64      	ldr	r7, [pc, #400]	; (80029f4 <HAL_GPIO_Init+0x19c>)
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002864:	f8df c194 	ldr.w	ip, [pc, #404]	; 80029fc <HAL_GPIO_Init+0x1a4>
 8002868:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002a00 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286c:	680d      	ldr	r5, [r1, #0]
 800286e:	fa35 f406 	lsrs.w	r4, r5, r6
 8002872:	d102      	bne.n	800287a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002874:	b003      	add	sp, #12
 8002876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800287a:	f04f 0801 	mov.w	r8, #1
 800287e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002882:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002886:	ea38 0505 	bics.w	r5, r8, r5
 800288a:	d17b      	bne.n	8002984 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 800288c:	684d      	ldr	r5, [r1, #4]
 800288e:	2d03      	cmp	r5, #3
 8002890:	d807      	bhi.n	80028a2 <HAL_GPIO_Init+0x4a>
 8002892:	3d01      	subs	r5, #1
 8002894:	2d02      	cmp	r5, #2
 8002896:	f200 8088 	bhi.w	80029aa <HAL_GPIO_Init+0x152>
 800289a:	e8df f005 	tbb	[pc, r5]
 800289e:	9b96      	.short	0x9b96
 80028a0:	a1          	.byte	0xa1
 80028a1:	00          	.byte	0x00
 80028a2:	2d12      	cmp	r5, #18
 80028a4:	f000 8099 	beq.w	80029da <HAL_GPIO_Init+0x182>
 80028a8:	d86e      	bhi.n	8002988 <HAL_GPIO_Init+0x130>
 80028aa:	2d11      	cmp	r5, #17
 80028ac:	f000 808f 	beq.w	80029ce <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b0:	2cff      	cmp	r4, #255	; 0xff
 80028b2:	bf98      	it	ls
 80028b4:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ba:	bf88      	it	hi
 80028bc:	f100 0a04 	addhi.w	sl, r0, #4
 80028c0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028c4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c8:	bf88      	it	hi
 80028ca:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028cc:	fa09 fb05 	lsl.w	fp, r9, r5
 80028d0:	ea28 080b 	bic.w	r8, r8, fp
 80028d4:	fa02 f505 	lsl.w	r5, r2, r5
 80028d8:	ea48 0505 	orr.w	r5, r8, r5
 80028dc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80028e4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80028e8:	d04c      	beq.n	8002984 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028ea:	69bd      	ldr	r5, [r7, #24]
 80028ec:	f026 0803 	bic.w	r8, r6, #3
 80028f0:	f045 0501 	orr.w	r5, r5, #1
 80028f4:	61bd      	str	r5, [r7, #24]
 80028f6:	69bd      	ldr	r5, [r7, #24]
 80028f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80028fc:	f005 0501 	and.w	r5, r5, #1
 8002900:	9501      	str	r5, [sp, #4]
 8002902:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002906:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800290a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800290c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002910:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002914:	fa09 f90b 	lsl.w	r9, r9, fp
 8002918:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800291c:	4d39      	ldr	r5, [pc, #228]	; (8002a04 <HAL_GPIO_Init+0x1ac>)
 800291e:	42a8      	cmp	r0, r5
 8002920:	d062      	beq.n	80029e8 <HAL_GPIO_Init+0x190>
 8002922:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002926:	42a8      	cmp	r0, r5
 8002928:	d060      	beq.n	80029ec <HAL_GPIO_Init+0x194>
 800292a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800292e:	42a8      	cmp	r0, r5
 8002930:	d05e      	beq.n	80029f0 <HAL_GPIO_Init+0x198>
 8002932:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002936:	42a8      	cmp	r0, r5
 8002938:	bf0c      	ite	eq
 800293a:	2503      	moveq	r5, #3
 800293c:	2504      	movne	r5, #4
 800293e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002942:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002946:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800294a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002950:	bf14      	ite	ne
 8002952:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002954:	43a5      	biceq	r5, r4
 8002956:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002958:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800295e:	bf14      	ite	ne
 8002960:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002962:	43a5      	biceq	r5, r4
 8002964:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002966:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002968:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800296c:	bf14      	ite	ne
 800296e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002970:	43a5      	biceq	r5, r4
 8002972:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002974:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002976:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800297a:	bf14      	ite	ne
 800297c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800297e:	ea25 0404 	biceq.w	r4, r5, r4
 8002982:	60dc      	str	r4, [r3, #12]
	position++;
 8002984:	3601      	adds	r6, #1
 8002986:	e771      	b.n	800286c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002988:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002a08 <HAL_GPIO_Init+0x1b0>
 800298c:	454d      	cmp	r5, r9
 800298e:	d00c      	beq.n	80029aa <HAL_GPIO_Init+0x152>
 8002990:	d817      	bhi.n	80029c2 <HAL_GPIO_Init+0x16a>
 8002992:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002996:	454d      	cmp	r5, r9
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x152>
 800299a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800299e:	454d      	cmp	r5, r9
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x152>
 80029a2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80029a6:	454d      	cmp	r5, r9
 80029a8:	d182      	bne.n	80028b0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029aa:	688a      	ldr	r2, [r1, #8]
 80029ac:	b1d2      	cbz	r2, 80029e4 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029ae:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80029b0:	bf08      	it	eq
 80029b2:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b6:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80029ba:	bf18      	it	ne
 80029bc:	f8c0 8014 	strne.w	r8, [r0, #20]
 80029c0:	e776      	b.n	80028b0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80029c2:	4565      	cmp	r5, ip
 80029c4:	d0f1      	beq.n	80029aa <HAL_GPIO_Init+0x152>
 80029c6:	4575      	cmp	r5, lr
 80029c8:	e7ee      	b.n	80029a8 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029ca:	68ca      	ldr	r2, [r1, #12]
          break;
 80029cc:	e770      	b.n	80028b0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029ce:	68ca      	ldr	r2, [r1, #12]
 80029d0:	3204      	adds	r2, #4
          break;
 80029d2:	e76d      	b.n	80028b0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029d4:	68ca      	ldr	r2, [r1, #12]
 80029d6:	3208      	adds	r2, #8
          break;
 80029d8:	e76a      	b.n	80028b0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029da:	68ca      	ldr	r2, [r1, #12]
 80029dc:	320c      	adds	r2, #12
          break;
 80029de:	e767      	b.n	80028b0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80029e0:	2200      	movs	r2, #0
 80029e2:	e765      	b.n	80028b0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029e4:	2204      	movs	r2, #4
 80029e6:	e763      	b.n	80028b0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029e8:	2500      	movs	r5, #0
 80029ea:	e7a8      	b.n	800293e <HAL_GPIO_Init+0xe6>
 80029ec:	2501      	movs	r5, #1
 80029ee:	e7a6      	b.n	800293e <HAL_GPIO_Init+0xe6>
 80029f0:	2502      	movs	r5, #2
 80029f2:	e7a4      	b.n	800293e <HAL_GPIO_Init+0xe6>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010400 	.word	0x40010400
 80029fc:	10310000 	.word	0x10310000
 8002a00:	10320000 	.word	0x10320000
 8002a04:	40010800 	.word	0x40010800
 8002a08:	10220000 	.word	0x10220000

08002a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002a0e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a10:	6951      	ldr	r1, [r2, #20]
 8002a12:	4201      	tst	r1, r0
 8002a14:	d002      	beq.n	8002a1c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a16:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a18:	f7fe fcd2 	bl	80013c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a1c:	bd08      	pop	{r3, pc}
 8002a1e:	bf00      	nop
 8002a20:	40010400 	.word	0x40010400

08002a24 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a24:	6801      	ldr	r1, [r0, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	694b      	ldr	r3, [r1, #20]
 8002a2a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002a2e:	d010      	beq.n	8002a52 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002a34:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a36:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a38:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a42:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	4770      	bx	lr
  }
  return HAL_OK;
 8002a52:	4618      	mov	r0, r3
}
 8002a54:	4770      	bx	lr

08002a56 <I2C_WaitOnFlagUntilTimeout>:
{
 8002a56:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002a5a:	4606      	mov	r6, r0
 8002a5c:	460f      	mov	r7, r1
 8002a5e:	4691      	mov	r9, r2
 8002a60:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002a66:	6833      	ldr	r3, [r6, #0]
 8002a68:	f1ba 0f01 	cmp.w	sl, #1
 8002a6c:	bf0c      	ite	eq
 8002a6e:	695c      	ldreq	r4, [r3, #20]
 8002a70:	699c      	ldrne	r4, [r3, #24]
 8002a72:	ea27 0404 	bic.w	r4, r7, r4
 8002a76:	b2a4      	uxth	r4, r4
 8002a78:	fab4 f484 	clz	r4, r4
 8002a7c:	0964      	lsrs	r4, r4, #5
 8002a7e:	45a1      	cmp	r9, r4
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002a82:	2000      	movs	r0, #0
 8002a84:	e017      	b.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	1c6a      	adds	r2, r5, #1
 8002a88:	d0ee      	beq.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7ff fbb1 	bl	80021f0 <HAL_GetTick>
 8002a8e:	9b08      	ldr	r3, [sp, #32]
 8002a90:	1ac0      	subs	r0, r0, r3
 8002a92:	42a8      	cmp	r0, r5
 8002a94:	d801      	bhi.n	8002a9a <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a96:	2d00      	cmp	r5, #0
 8002a98:	d1e5      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a9a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a9c:	2220      	movs	r2, #32
        return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aa0:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aa2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002aac:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	6432      	str	r2, [r6, #64]	; 0x40
}
 8002ab6:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002abe:	4604      	mov	r4, r0
 8002ac0:	460f      	mov	r7, r1
 8002ac2:	4616      	mov	r6, r2
 8002ac4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac6:	6825      	ldr	r5, [r4, #0]
 8002ac8:	6968      	ldr	r0, [r5, #20]
 8002aca:	ea27 0000 	bic.w	r0, r7, r0
 8002ace:	b280      	uxth	r0, r0
 8002ad0:	b1b8      	cbz	r0, 8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad2:	696b      	ldr	r3, [r5, #20]
 8002ad4:	055a      	lsls	r2, r3, #21
 8002ad6:	d516      	bpl.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ada:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002ae6:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002af6:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002afe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	1c73      	adds	r3, r6, #1
 8002b08:	d0de      	beq.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7ff fb71 	bl	80021f0 <HAL_GetTick>
 8002b0e:	eba0 0008 	sub.w	r0, r0, r8
 8002b12:	42b0      	cmp	r0, r6
 8002b14:	d801      	bhi.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002b16:	2e00      	cmp	r6, #0
 8002b18:	d1d5      	bne.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	e7e4      	b.n	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002b30 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
 8002b36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	075b      	lsls	r3, r3, #29
 8002b3e:	d501      	bpl.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002b40:	2000      	movs	r0, #0
}
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff ff6d 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 8002b4a:	b9a8      	cbnz	r0, 8002b78 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002b4c:	1c6a      	adds	r2, r5, #1
 8002b4e:	d0f3      	beq.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b50:	f7ff fb4e 	bl	80021f0 <HAL_GetTick>
 8002b54:	1b80      	subs	r0, r0, r6
 8002b56:	42a8      	cmp	r0, r5
 8002b58:	d801      	bhi.n	8002b5e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002b5a:	2d00      	cmp	r5, #0
 8002b5c:	d1ec      	bne.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
 8002b7a:	e7e2      	b.n	8002b42 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002b7c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	4604      	mov	r4, r0
 8002b80:	460d      	mov	r5, r1
 8002b82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	d501      	bpl.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002b8c:	2000      	movs	r0, #0
}
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7ff ff47 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 8002b96:	b9a8      	cbnz	r0, 8002bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	1c6a      	adds	r2, r5, #1
 8002b9a:	d0f3      	beq.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7ff fb28 	bl	80021f0 <HAL_GetTick>
 8002ba0:	1b80      	subs	r0, r0, r6
 8002ba2:	42a8      	cmp	r0, r5
 8002ba4:	d801      	bhi.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002ba6:	2d00      	cmp	r5, #0
 8002ba8:	d1ec      	bne.n	8002b84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002baa:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bac:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bae:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	f042 0220 	orr.w	r2, r2, #32
 8002bc2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e7e2      	b.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002bc8 <HAL_I2C_Init>:
{
 8002bc8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002bca:	4604      	mov	r4, r0
 8002bcc:	b908      	cbnz	r0, 8002bd2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
}
 8002bd0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bda:	b91b      	cbnz	r3, 8002be4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002bdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002be0:	f7ff f97e 	bl	8001ee0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	2324      	movs	r3, #36	; 0x24
 8002be6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f000 fc84 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c08:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <HAL_I2C_Init+0x140>)
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	4a3e      	ldrls	r2, [pc, #248]	; (8002d0c <HAL_I2C_Init+0x144>)
 8002c12:	4a3f      	ldrhi	r2, [pc, #252]	; (8002d10 <HAL_I2C_Init+0x148>)
 8002c14:	4290      	cmp	r0, r2
 8002c16:	bf8c      	ite	hi
 8002c18:	2200      	movhi	r2, #0
 8002c1a:	2201      	movls	r2, #1
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	d1d6      	bne.n	8002bce <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c20:	4e39      	ldr	r6, [pc, #228]	; (8002d08 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002c22:	493c      	ldr	r1, [pc, #240]	; (8002d14 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c24:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002c26:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c2a:	bf88      	it	hi
 8002c2c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c30:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c32:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c36:	6855      	ldr	r5, [r2, #4]
 8002c38:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002c3c:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c40:	bf82      	ittt	hi
 8002c42:	4371      	mulhi	r1, r6
 8002c44:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002c48:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c4e:	6a15      	ldr	r5, [r2, #32]
 8002c50:	3101      	adds	r1, #1
 8002c52:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002c56:	4329      	orrs	r1, r5
 8002c58:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c5a:	69d1      	ldr	r1, [r2, #28]
 8002c5c:	4d2a      	ldr	r5, [pc, #168]	; (8002d08 <HAL_I2C_Init+0x140>)
 8002c5e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002c62:	42ab      	cmp	r3, r5
 8002c64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002c68:	d832      	bhi.n	8002cd0 <HAL_I2C_Init+0x108>
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002c76:	4203      	tst	r3, r0
 8002c78:	d042      	beq.n	8002d00 <HAL_I2C_Init+0x138>
 8002c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002c88:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002c8c:	4303      	orrs	r3, r0
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c92:	6891      	ldr	r1, [r2, #8]
 8002c94:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002c98:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002c9c:	4303      	orrs	r3, r0
 8002c9e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca6:	68d1      	ldr	r1, [r2, #12]
 8002ca8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002cac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002cb0:	4303      	orrs	r3, r0
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002cb6:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002cce:	e77f      	b.n	8002bd0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd0:	68a5      	ldr	r5, [r4, #8]
 8002cd2:	b955      	cbnz	r5, 8002cea <HAL_I2C_Init+0x122>
 8002cd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	b17b      	cbz	r3, 8002d04 <HAL_I2C_Init+0x13c>
 8002ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce8:	e7c9      	b.n	8002c7e <HAL_I2C_Init+0xb6>
 8002cea:	2519      	movs	r5, #25
 8002cec:	436b      	muls	r3, r5
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	b123      	cbz	r3, 8002d04 <HAL_I2C_Init+0x13c>
 8002cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfe:	e7be      	b.n	8002c7e <HAL_I2C_Init+0xb6>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e7bc      	b.n	8002c7e <HAL_I2C_Init+0xb6>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e7ba      	b.n	8002c7e <HAL_I2C_Init+0xb6>
 8002d08:	000186a0 	.word	0x000186a0
 8002d0c:	001e847f 	.word	0x001e847f
 8002d10:	003d08ff 	.word	0x003d08ff
 8002d14:	000f4240 	.word	0x000f4240

08002d18 <HAL_I2C_Master_Transmit>:
{
 8002d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	b085      	sub	sp, #20
 8002d20:	4698      	mov	r8, r3
 8002d22:	460d      	mov	r5, r1
 8002d24:	4691      	mov	r9, r2
 8002d26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002d28:	f7ff fa62 	bl	80021f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002d30:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d004      	beq.n	8002d40 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8002d36:	2502      	movs	r5, #2
}
 8002d38:	4628      	mov	r0, r5
 8002d3a:	b005      	add	sp, #20
 8002d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d40:	9000      	str	r0, [sp, #0]
 8002d42:	2319      	movs	r3, #25
 8002d44:	2201      	movs	r2, #1
 8002d46:	4620      	mov	r0, r4
 8002d48:	495b      	ldr	r1, [pc, #364]	; (8002eb8 <HAL_I2C_Master_Transmit+0x1a0>)
 8002d4a:	f7ff fe84 	bl	8002a56 <I2C_WaitOnFlagUntilTimeout>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d1f1      	bne.n	8002d36 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8002d52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d0ed      	beq.n	8002d36 <HAL_I2C_Master_Transmit+0x1e>
 8002d5a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d5c:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8002d5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d62:	680b      	ldr	r3, [r1, #0]
 8002d64:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002d66:	bf5e      	ittt	pl
 8002d68:	680b      	ldrpl	r3, [r1, #0]
 8002d6a:	f043 0301 	orrpl.w	r3, r3, #1
 8002d6e:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d70:	680b      	ldr	r3, [r1, #0]
 8002d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d76:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d78:	2321      	movs	r3, #33	; 0x21
 8002d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d7e:	2310      	movs	r3, #16
 8002d80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002d88:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002d8e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002d92:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d94:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_I2C_Master_Transmit+0x1a4>)
 8002d96:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d004      	beq.n	8002da8 <HAL_I2C_Master_Transmit+0x90>
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d002      	beq.n	8002da8 <HAL_I2C_Master_Transmit+0x90>
 8002da2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da6:	d104      	bne.n	8002db2 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da8:	680b      	ldr	r3, [r1, #0]
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e002      	b.n	8002db8 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002db2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d0f7      	beq.n	8002da8 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db8:	2200      	movs	r2, #0
 8002dba:	463b      	mov	r3, r7
 8002dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	9600      	str	r6, [sp, #0]
 8002dc4:	f7ff fe47 	bl	8002a56 <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	b138      	cbz	r0, 8002ddc <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd0:	bf44      	itt	mi
 8002dd2:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8002dd6:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002dd8:	2501      	movs	r5, #1
 8002dda:	e7ad      	b.n	8002d38 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de2:	d121      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002de8:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dea:	4633      	mov	r3, r6
 8002dec:	463a      	mov	r2, r7
 8002dee:	4620      	mov	r0, r4
 8002df0:	4933      	ldr	r1, [pc, #204]	; (8002ec0 <HAL_I2C_Master_Transmit+0x1a8>)
 8002df2:	f7ff fe62 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df6:	4605      	mov	r5, r0
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d1ed      	bne.n	8002dd8 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	9003      	str	r0, [sp, #12]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	9203      	str	r2, [sp, #12]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	9303      	str	r3, [sp, #12]
 8002e08:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002e0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e0c:	b9f3      	cbnz	r3, 8002e4c <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	6821      	ldr	r1, [r4, #0]
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002e1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002e26:	e787      	b.n	8002d38 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e28:	11eb      	asrs	r3, r5, #7
 8002e2a:	f003 0306 	and.w	r3, r3, #6
 8002e2e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002e32:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e34:	4620      	mov	r0, r4
 8002e36:	4633      	mov	r3, r6
 8002e38:	463a      	mov	r2, r7
 8002e3a:	4922      	ldr	r1, [pc, #136]	; (8002ec4 <HAL_I2C_Master_Transmit+0x1ac>)
 8002e3c:	f7ff fe3d 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e40:	2800      	cmp	r0, #0
 8002e42:	d1c9      	bne.n	8002dd8 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	b2ed      	uxtb	r5, r5
 8002e48:	611d      	str	r5, [r3, #16]
 8002e4a:	e7ce      	b.n	8002dea <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4c:	4632      	mov	r2, r6
 8002e4e:	4639      	mov	r1, r7
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff fe93 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e56:	b140      	cbz	r0, 8002e6a <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d1bc      	bne.n	8002dd8 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e7b6      	b.n	8002dd8 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002e74:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002e76:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002e78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e7a:	3a01      	subs	r2, #1
 8002e7c:	b292      	uxth	r2, r2
 8002e7e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e82:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8002e86:	1e51      	subs	r1, r2, #1
 8002e88:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e8a:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8002e8e:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e90:	d00a      	beq.n	8002ea8 <HAL_I2C_Master_Transmit+0x190>
 8002e92:	b149      	cbz	r1, 8002ea8 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8002e96:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e98:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002e9a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002e9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002e9e:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002ea6:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	4632      	mov	r2, r6
 8002eaa:	4639      	mov	r1, r7
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff fe3f 	bl	8002b30 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d0a9      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0xf2>
 8002eb6:	e7cf      	b.n	8002e58 <HAL_I2C_Master_Transmit+0x140>
 8002eb8:	00100002 	.word	0x00100002
 8002ebc:	ffff0000 	.word	0xffff0000
 8002ec0:	00010002 	.word	0x00010002
 8002ec4:	00010008 	.word	0x00010008

08002ec8 <HAL_I2C_IsDeviceReady>:
{
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	4604      	mov	r4, r0
 8002ece:	b085      	sub	sp, #20
 8002ed0:	461e      	mov	r6, r3
 8002ed2:	460f      	mov	r7, r1
 8002ed4:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8002ed6:	f7ff f98b 	bl	80021f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002ede:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d003      	beq.n	8002eec <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002ee4:	2002      	movs	r0, #2
}
 8002ee6:	b005      	add	sp, #20
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	2319      	movs	r3, #25
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	494c      	ldr	r1, [pc, #304]	; (8003028 <HAL_I2C_IsDeviceReady+0x160>)
 8002ef6:	f7ff fdae 	bl	8002a56 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d1f2      	bne.n	8002ee4 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8002efe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_I2C_IsDeviceReady+0x1c>
 8002f06:	2301      	movs	r3, #1
 8002f08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0c:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8002f0e:	f04f 0a01 	mov.w	sl, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f12:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f14:	f8df b110 	ldr.w	fp, [pc, #272]	; 8003028 <HAL_I2C_IsDeviceReady+0x160>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f18:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002f1a:	bf58      	it	pl
 8002f1c:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8002f22:	bf5c      	itt	pl
 8002f24:	f042 0201 	orrpl.w	r2, r2, #1
 8002f28:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f30:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f32:	2324      	movs	r3, #36	; 0x24
 8002f34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002f40:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f48:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f4a:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f52:	4633      	mov	r3, r6
 8002f54:	2200      	movs	r2, #0
 8002f56:	9500      	str	r5, [sp, #0]
 8002f58:	f7ff fd7d 	bl	8002a56 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	b138      	cbz	r0, 8002f70 <HAL_I2C_IsDeviceReady+0xa8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	d502      	bpl.n	8002f6c <HAL_I2C_IsDeviceReady+0xa4>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6a:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	e7ba      	b.n	8002ee6 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f70:	611f      	str	r7, [r3, #16]
      tickstart = HAL_GetTick();
 8002f72:	f7ff f93d 	bl	80021f0 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f76:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      tickstart = HAL_GetTick();
 8002f7a:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f82:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f86:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f8a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002f8e:	29a0      	cmp	r1, #160	; 0xa0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_IsDeviceReady+0xce>
 8002f92:	4313      	orrs	r3, r2
 8002f94:	d01d      	beq.n	8002fd2 <HAL_I2C_IsDeviceReady+0x10a>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	f04f 0820 	mov.w	r8, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f9a:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fac:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fae:	d025      	beq.n	8002ffc <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	9203      	str	r2, [sp, #12]
 8002fb4:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb6:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb8:	9203      	str	r2, [sp, #12]
 8002fba:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fbc:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbe:	9303      	str	r3, [sp, #12]
 8002fc0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc2:	4919      	ldr	r1, [pc, #100]	; (8003028 <HAL_I2C_IsDeviceReady+0x160>)
 8002fc4:	2319      	movs	r3, #25
 8002fc6:	9500      	str	r5, [sp, #0]
 8002fc8:	f7ff fd45 	bl	8002a56 <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	b188      	cbz	r0, 8002ff2 <HAL_I2C_IsDeviceReady+0x12a>
    return HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e789      	b.n	8002ee6 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7ff f90d 	bl	80021f0 <HAL_GetTick>
 8002fd6:	1b40      	subs	r0, r0, r5
 8002fd8:	42b0      	cmp	r0, r6
 8002fda:	d800      	bhi.n	8002fde <HAL_I2C_IsDeviceReady+0x116>
 8002fdc:	b90e      	cbnz	r6, 8002fe2 <HAL_I2C_IsDeviceReady+0x11a>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fde:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fe6:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fe8:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8002ff0:	e7cb      	b.n	8002f8a <HAL_I2C_IsDeviceReady+0xc2>
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002ff6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8002ffa:	e774      	b.n	8002ee6 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003000:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003002:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003004:	4620      	mov	r0, r4
 8003006:	2319      	movs	r3, #25
 8003008:	2201      	movs	r2, #1
 800300a:	9500      	str	r5, [sp, #0]
 800300c:	f7ff fd23 	bl	8002a56 <I2C_WaitOnFlagUntilTimeout>
 8003010:	2800      	cmp	r0, #0
 8003012:	d1dc      	bne.n	8002fce <HAL_I2C_IsDeviceReady+0x106>
      I2C_Trials++;
 8003014:	f10a 0a01 	add.w	sl, sl, #1
    while (I2C_Trials < Trials);
 8003018:	45ca      	cmp	sl, r9
 800301a:	d392      	bcc.n	8002f42 <HAL_I2C_IsDeviceReady+0x7a>
    hi2c->State = HAL_I2C_STATE_READY;
 800301c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003020:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003024:	e7d3      	b.n	8002fce <HAL_I2C_IsDeviceReady+0x106>
 8003026:	bf00      	nop
 8003028:	00100002 	.word	0x00100002

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003030:	4605      	mov	r5, r0
 8003032:	b338      	cbz	r0, 8003084 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003034:	6803      	ldr	r3, [r0, #0]
 8003036:	07db      	lsls	r3, r3, #31
 8003038:	d410      	bmi.n	800305c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	682b      	ldr	r3, [r5, #0]
 800303c:	079f      	lsls	r7, r3, #30
 800303e:	d45e      	bmi.n	80030fe <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	0719      	lsls	r1, r3, #28
 8003044:	f100 8095 	bmi.w	8003172 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	075a      	lsls	r2, r3, #29
 800304c:	f100 80c1 	bmi.w	80031d2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	69e8      	ldr	r0, [r5, #28]
 8003052:	2800      	cmp	r0, #0
 8003054:	f040 812c 	bne.w	80032b0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003058:	2000      	movs	r0, #0
 800305a:	e029      	b.n	80030b0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800305c:	4c90      	ldr	r4, [pc, #576]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 800305e:	6863      	ldr	r3, [r4, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b04      	cmp	r3, #4
 8003066:	d007      	beq.n	8003078 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b08      	cmp	r3, #8
 8003070:	d10a      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c>
 8003072:	6863      	ldr	r3, [r4, #4]
 8003074:	03de      	lsls	r6, r3, #15
 8003076:	d507      	bpl.n	8003088 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	039c      	lsls	r4, r3, #14
 800307c:	d5dd      	bpl.n	800303a <HAL_RCC_OscConfig+0xe>
 800307e:	686b      	ldr	r3, [r5, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1da      	bne.n	800303a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003084:	2001      	movs	r0, #1
 8003086:	e013      	b.n	80030b0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	686b      	ldr	r3, [r5, #4]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d112      	bne.n	80030b6 <HAL_RCC_OscConfig+0x8a>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003098:	f7ff f8aa 	bl	80021f0 <HAL_GetTick>
 800309c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	0398      	lsls	r0, r3, #14
 80030a2:	d4ca      	bmi.n	800303a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7ff f8a4 	bl	80021f0 <HAL_GetTick>
 80030a8:	1b80      	subs	r0, r0, r6
 80030aa:	2864      	cmp	r0, #100	; 0x64
 80030ac:	d9f7      	bls.n	800309e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80030ae:	2003      	movs	r0, #3
}
 80030b0:	b002      	add	sp, #8
 80030b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	b99b      	cbnz	r3, 80030e0 <HAL_RCC_OscConfig+0xb4>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030c8:	f7ff f892 	bl	80021f0 <HAL_GetTick>
 80030cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	0399      	lsls	r1, r3, #14
 80030d2:	d5b2      	bpl.n	800303a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7ff f88c 	bl	80021f0 <HAL_GetTick>
 80030d8:	1b80      	subs	r0, r0, r6
 80030da:	2864      	cmp	r0, #100	; 0x64
 80030dc:	d9f7      	bls.n	80030ce <HAL_RCC_OscConfig+0xa2>
 80030de:	e7e6      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	d103      	bne.n	80030f0 <HAL_RCC_OscConfig+0xc4>
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	e7cf      	b.n	8003090 <HAL_RCC_OscConfig+0x64>
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fc:	e7cb      	b.n	8003096 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	4c68      	ldr	r4, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	f013 0f0c 	tst.w	r3, #12
 8003106:	d007      	beq.n	8003118 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b08      	cmp	r3, #8
 8003110:	d110      	bne.n	8003134 <HAL_RCC_OscConfig+0x108>
 8003112:	6863      	ldr	r3, [r4, #4]
 8003114:	03da      	lsls	r2, r3, #15
 8003116:	d40d      	bmi.n	8003134 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	079b      	lsls	r3, r3, #30
 800311c:	d502      	bpl.n	8003124 <HAL_RCC_OscConfig+0xf8>
 800311e:	692b      	ldr	r3, [r5, #16]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d1af      	bne.n	8003084 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	696a      	ldr	r2, [r5, #20]
 8003128:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800312c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	e785      	b.n	8003040 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003134:	692a      	ldr	r2, [r5, #16]
 8003136:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x278>)
 8003138:	b16a      	cbz	r2, 8003156 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800313e:	f7ff f857 	bl	80021f0 <HAL_GetTick>
 8003142:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	079f      	lsls	r7, r3, #30
 8003148:	d4ec      	bmi.n	8003124 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7ff f851 	bl	80021f0 <HAL_GetTick>
 800314e:	1b80      	subs	r0, r0, r6
 8003150:	2802      	cmp	r0, #2
 8003152:	d9f7      	bls.n	8003144 <HAL_RCC_OscConfig+0x118>
 8003154:	e7ab      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003156:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003158:	f7ff f84a 	bl	80021f0 <HAL_GetTick>
 800315c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	0798      	lsls	r0, r3, #30
 8003162:	f57f af6d 	bpl.w	8003040 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7ff f843 	bl	80021f0 <HAL_GetTick>
 800316a:	1b80      	subs	r0, r0, r6
 800316c:	2802      	cmp	r0, #2
 800316e:	d9f6      	bls.n	800315e <HAL_RCC_OscConfig+0x132>
 8003170:	e79d      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003172:	69aa      	ldr	r2, [r5, #24]
 8003174:	4e4a      	ldr	r6, [pc, #296]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 8003176:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCC_OscConfig+0x278>)
 8003178:	b1e2      	cbz	r2, 80031b4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800317a:	2201      	movs	r2, #1
 800317c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003180:	f7ff f836 	bl	80021f0 <HAL_GetTick>
 8003184:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003188:	079b      	lsls	r3, r3, #30
 800318a:	d50d      	bpl.n	80031a8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800318c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003190:	4b45      	ldr	r3, [pc, #276]	; (80032a8 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fbb3 f3f2 	udiv	r3, r3, r2
 8003198:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800319a:	bf00      	nop
  }
  while (Delay --);
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	1e5a      	subs	r2, r3, #1
 80031a0:	9201      	str	r2, [sp, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f9      	bne.n	800319a <HAL_RCC_OscConfig+0x16e>
 80031a6:	e74f      	b.n	8003048 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7ff f822 	bl	80021f0 <HAL_GetTick>
 80031ac:	1b00      	subs	r0, r0, r4
 80031ae:	2802      	cmp	r0, #2
 80031b0:	d9e9      	bls.n	8003186 <HAL_RCC_OscConfig+0x15a>
 80031b2:	e77c      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80031b4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80031b8:	f7ff f81a 	bl	80021f0 <HAL_GetTick>
 80031bc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80031c0:	079f      	lsls	r7, r3, #30
 80031c2:	f57f af41 	bpl.w	8003048 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7ff f813 	bl	80021f0 <HAL_GetTick>
 80031ca:	1b00      	subs	r0, r0, r4
 80031cc:	2802      	cmp	r0, #2
 80031ce:	d9f6      	bls.n	80031be <HAL_RCC_OscConfig+0x192>
 80031d0:	e76d      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4c33      	ldr	r4, [pc, #204]	; (80032a0 <HAL_RCC_OscConfig+0x274>)
 80031d4:	69e3      	ldr	r3, [r4, #28]
 80031d6:	00d8      	lsls	r0, r3, #3
 80031d8:	d424      	bmi.n	8003224 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80031da:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	69e3      	ldr	r3, [r4, #28]
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	61e3      	str	r3, [r4, #28]
 80031e4:	69e3      	ldr	r3, [r4, #28]
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4e2f      	ldr	r6, [pc, #188]	; (80032ac <HAL_RCC_OscConfig+0x280>)
 80031f0:	6833      	ldr	r3, [r6, #0]
 80031f2:	05d9      	lsls	r1, r3, #23
 80031f4:	d518      	bpl.n	8003228 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f6:	68eb      	ldr	r3, [r5, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d126      	bne.n	800324a <HAL_RCC_OscConfig+0x21e>
 80031fc:	6a23      	ldr	r3, [r4, #32]
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003204:	f7fe fff4 	bl	80021f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800320c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	6a23      	ldr	r3, [r4, #32]
 8003210:	079b      	lsls	r3, r3, #30
 8003212:	d53f      	bpl.n	8003294 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003214:	2f00      	cmp	r7, #0
 8003216:	f43f af1b 	beq.w	8003050 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	69e3      	ldr	r3, [r4, #28]
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	61e3      	str	r3, [r4, #28]
 8003222:	e715      	b.n	8003050 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003224:	2700      	movs	r7, #0
 8003226:	e7e2      	b.n	80031ee <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003228:	6833      	ldr	r3, [r6, #0]
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003230:	f7fe ffde 	bl	80021f0 <HAL_GetTick>
 8003234:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	6833      	ldr	r3, [r6, #0]
 8003238:	05da      	lsls	r2, r3, #23
 800323a:	d4dc      	bmi.n	80031f6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fe ffd8 	bl	80021f0 <HAL_GetTick>
 8003240:	eba0 0008 	sub.w	r0, r0, r8
 8003244:	2864      	cmp	r0, #100	; 0x64
 8003246:	d9f6      	bls.n	8003236 <HAL_RCC_OscConfig+0x20a>
 8003248:	e731      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	b9ab      	cbnz	r3, 8003278 <HAL_RCC_OscConfig+0x24c>
 800324c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6223      	str	r3, [r4, #32]
 8003258:	6a23      	ldr	r3, [r4, #32]
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003260:	f7fe ffc6 	bl	80021f0 <HAL_GetTick>
 8003264:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	6a23      	ldr	r3, [r4, #32]
 8003268:	0798      	lsls	r0, r3, #30
 800326a:	d5d3      	bpl.n	8003214 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe ffc0 	bl	80021f0 <HAL_GetTick>
 8003270:	1b80      	subs	r0, r0, r6
 8003272:	4540      	cmp	r0, r8
 8003274:	d9f7      	bls.n	8003266 <HAL_RCC_OscConfig+0x23a>
 8003276:	e71a      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003278:	2b05      	cmp	r3, #5
 800327a:	6a23      	ldr	r3, [r4, #32]
 800327c:	d103      	bne.n	8003286 <HAL_RCC_OscConfig+0x25a>
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6223      	str	r3, [r4, #32]
 8003284:	e7ba      	b.n	80031fc <HAL_RCC_OscConfig+0x1d0>
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	6223      	str	r3, [r4, #32]
 800328c:	6a23      	ldr	r3, [r4, #32]
 800328e:	f023 0304 	bic.w	r3, r3, #4
 8003292:	e7b6      	b.n	8003202 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe ffac 	bl	80021f0 <HAL_GetTick>
 8003298:	1b80      	subs	r0, r0, r6
 800329a:	4540      	cmp	r0, r8
 800329c:	d9b7      	bls.n	800320e <HAL_RCC_OscConfig+0x1e2>
 800329e:	e706      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
 80032a0:	40021000 	.word	0x40021000
 80032a4:	42420000 	.word	0x42420000
 80032a8:	20000024 	.word	0x20000024
 80032ac:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b0:	4c2a      	ldr	r4, [pc, #168]	; (800335c <HAL_RCC_OscConfig+0x330>)
 80032b2:	6863      	ldr	r3, [r4, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d03e      	beq.n	800333a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032bc:	2200      	movs	r2, #0
 80032be:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCC_OscConfig+0x334>)
 80032c0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80032c2:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	d12c      	bne.n	8003320 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80032c6:	f7fe ff93 	bl	80021f0 <HAL_GetTick>
 80032ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	0199      	lsls	r1, r3, #6
 80032d0:	d420      	bmi.n	8003314 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d2:	6a2b      	ldr	r3, [r5, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d105      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032da:	6862      	ldr	r2, [r4, #4]
 80032dc:	68a9      	ldr	r1, [r5, #8]
 80032de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80032e2:	430a      	orrs	r2, r1
 80032e4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80032e8:	6862      	ldr	r2, [r4, #4]
 80032ea:	430b      	orrs	r3, r1
 80032ec:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80032f0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80032f2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_RCC_OscConfig+0x334>)
 80032f8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80032fa:	f7fe ff79 	bl	80021f0 <HAL_GetTick>
 80032fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	019a      	lsls	r2, r3, #6
 8003304:	f53f aea8 	bmi.w	8003058 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe ff72 	bl	80021f0 <HAL_GetTick>
 800330c:	1b40      	subs	r0, r0, r5
 800330e:	2802      	cmp	r0, #2
 8003310:	d9f6      	bls.n	8003300 <HAL_RCC_OscConfig+0x2d4>
 8003312:	e6cc      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe ff6c 	bl	80021f0 <HAL_GetTick>
 8003318:	1b80      	subs	r0, r0, r6
 800331a:	2802      	cmp	r0, #2
 800331c:	d9d6      	bls.n	80032cc <HAL_RCC_OscConfig+0x2a0>
 800331e:	e6c6      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003320:	f7fe ff66 	bl	80021f0 <HAL_GetTick>
 8003324:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	f57f ae95 	bpl.w	8003058 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe ff5f 	bl	80021f0 <HAL_GetTick>
 8003332:	1b40      	subs	r0, r0, r5
 8003334:	2802      	cmp	r0, #2
 8003336:	d9f6      	bls.n	8003326 <HAL_RCC_OscConfig+0x2fa>
 8003338:	e6b9      	b.n	80030ae <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333a:	2801      	cmp	r0, #1
 800333c:	f43f aeb8 	beq.w	80030b0 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003340:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	6a2a      	ldr	r2, [r5, #32]
 8003344:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003348:	4291      	cmp	r1, r2
 800334a:	f47f ae9b 	bne.w	8003084 <HAL_RCC_OscConfig+0x58>
 800334e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003350:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	4293      	cmp	r3, r2
 8003356:	f43f ae7f 	beq.w	8003058 <HAL_RCC_OscConfig+0x2c>
 800335a:	e693      	b.n	8003084 <HAL_RCC_OscConfig+0x58>
 800335c:	40021000 	.word	0x40021000
 8003360:	42420000 	.word	0x42420000

08003364 <HAL_RCC_GetSysClockFreq>:
{
 8003364:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003368:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800336a:	ac02      	add	r4, sp, #8
 800336c:	f103 0510 	add.w	r5, r3, #16
 8003370:	4622      	mov	r2, r4
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	3308      	adds	r3, #8
 8003378:	c203      	stmia	r2!, {r0, r1}
 800337a:	42ab      	cmp	r3, r5
 800337c:	4614      	mov	r4, r2
 800337e:	d1f7      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003380:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003384:	4911      	ldr	r1, [pc, #68]	; (80033cc <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003386:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800338a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800338c:	f003 020c 	and.w	r2, r3, #12
 8003390:	2a08      	cmp	r2, #8
 8003392:	d117      	bne.n	80033c4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003394:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003398:	3218      	adds	r2, #24
 800339a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800339c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a2:	d50c      	bpl.n	80033be <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ac:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ae:	3318      	adds	r3, #24
 80033b0:	446b      	add	r3, sp
 80033b2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033b6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80033ba:	b007      	add	sp, #28
 80033bc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x70>)
 80033c0:	4358      	muls	r0, r3
 80033c2:	e7fa      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80033c6:	e7f8      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x56>
 80033c8:	0800729f 	.word	0x0800729f
 80033cc:	40021000 	.word	0x40021000
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	003d0900 	.word	0x003d0900

080033d8 <HAL_RCC_ClockConfig>:
{
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80033de:	4604      	mov	r4, r0
 80033e0:	b910      	cbnz	r0, 80033e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80033e2:	2001      	movs	r0, #1
}
 80033e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4a44      	ldr	r2, [pc, #272]	; (80034fc <HAL_RCC_ClockConfig+0x124>)
 80033ea:	6813      	ldr	r3, [r2, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	428b      	cmp	r3, r1
 80033f2:	d328      	bcc.n	8003446 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	6821      	ldr	r1, [r4, #0]
 80033f6:	078e      	lsls	r6, r1, #30
 80033f8:	d430      	bmi.n	800345c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	07ca      	lsls	r2, r1, #31
 80033fc:	d443      	bmi.n	8003486 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fe:	4a3f      	ldr	r2, [pc, #252]	; (80034fc <HAL_RCC_ClockConfig+0x124>)
 8003400:	6813      	ldr	r3, [r2, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	42ab      	cmp	r3, r5
 8003408:	d865      	bhi.n	80034d6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	4d3c      	ldr	r5, [pc, #240]	; (8003500 <HAL_RCC_ClockConfig+0x128>)
 800340e:	f012 0f04 	tst.w	r2, #4
 8003412:	d16c      	bne.n	80034ee <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	0713      	lsls	r3, r2, #28
 8003416:	d506      	bpl.n	8003426 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003418:	686b      	ldr	r3, [r5, #4]
 800341a:	6922      	ldr	r2, [r4, #16]
 800341c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003420:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003424:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003426:	f7ff ff9d 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 800342a:	686b      	ldr	r3, [r5, #4]
 800342c:	4a35      	ldr	r2, [pc, #212]	; (8003504 <HAL_RCC_ClockConfig+0x12c>)
 800342e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	40d8      	lsrs	r0, r3
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_ClockConfig+0x130>)
 8003438:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_RCC_ClockConfig+0x134>)
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	f7fe fe95 	bl	800216c <HAL_InitTick>
  return HAL_OK;
 8003442:	2000      	movs	r0, #0
 8003444:	e7ce      	b.n	80033e4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	f023 0307 	bic.w	r3, r3, #7
 800344c:	430b      	orrs	r3, r1
 800344e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003450:	6813      	ldr	r3, [r2, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	428b      	cmp	r3, r1
 8003458:	d1c3      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xa>
 800345a:	e7cb      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_RCC_ClockConfig+0x128>)
 800345e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003462:	bf1e      	ittt	ne
 8003464:	685a      	ldrne	r2, [r3, #4]
 8003466:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800346a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800346e:	bf42      	ittt	mi
 8003470:	685a      	ldrmi	r2, [r3, #4]
 8003472:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003476:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68a0      	ldr	r0, [r4, #8]
 800347c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003480:	4302      	orrs	r2, r0
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	e7b9      	b.n	80033fa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	6862      	ldr	r2, [r4, #4]
 8003488:	4e1d      	ldr	r6, [pc, #116]	; (8003500 <HAL_RCC_ClockConfig+0x128>)
 800348a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	d11a      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003490:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	d0a5      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349c:	f023 0303 	bic.w	r3, r3, #3
 80034a0:	4313      	orrs	r3, r2
 80034a2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80034a4:	f7fe fea4 	bl	80021f0 <HAL_GetTick>
 80034a8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	6873      	ldr	r3, [r6, #4]
 80034ac:	6862      	ldr	r2, [r4, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034b6:	d0a2      	beq.n	80033fe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe fe9a 	bl	80021f0 <HAL_GetTick>
 80034bc:	1bc0      	subs	r0, r0, r7
 80034be:	4540      	cmp	r0, r8
 80034c0:	d9f3      	bls.n	80034aa <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80034c2:	2003      	movs	r0, #3
 80034c4:	e78e      	b.n	80033e4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c6:	2a02      	cmp	r2, #2
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034ce:	e7e1      	b.n	8003494 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	f013 0f02 	tst.w	r3, #2
 80034d4:	e7de      	b.n	8003494 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	f023 0307 	bic.w	r3, r3, #7
 80034dc:	432b      	orrs	r3, r5
 80034de:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e0:	6813      	ldr	r3, [r2, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	42ab      	cmp	r3, r5
 80034e8:	f47f af7b 	bne.w	80033e2 <HAL_RCC_ClockConfig+0xa>
 80034ec:	e78d      	b.n	800340a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ee:	686b      	ldr	r3, [r5, #4]
 80034f0:	68e1      	ldr	r1, [r4, #12]
 80034f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034f6:	430b      	orrs	r3, r1
 80034f8:	606b      	str	r3, [r5, #4]
 80034fa:	e78b      	b.n	8003414 <HAL_RCC_ClockConfig+0x3c>
 80034fc:	40022000 	.word	0x40022000
 8003500:	40021000 	.word	0x40021000
 8003504:	08007287 	.word	0x08007287
 8003508:	20000024 	.word	0x20000024
 800350c:	2000002c 	.word	0x2000002c

08003510 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800351e:	6810      	ldr	r0, [r2, #0]
}
 8003520:	40d8      	lsrs	r0, r3
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000
 8003528:	08007297 	.word	0x08007297
 800352c:	20000024 	.word	0x20000024

08003530 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	4a03      	ldr	r2, [pc, #12]	; (800354c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800353e:	6810      	ldr	r0, [r2, #0]
}
 8003540:	40d8      	lsrs	r0, r3
 8003542:	4770      	bx	lr
 8003544:	40021000 	.word	0x40021000
 8003548:	08007297 	.word	0x08007297
 800354c:	20000024 	.word	0x20000024

08003550 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003550:	6803      	ldr	r3, [r0, #0]
{
 8003552:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003556:	07d9      	lsls	r1, r3, #31
{
 8003558:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800355a:	d520      	bpl.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355c:	4c36      	ldr	r4, [pc, #216]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800355e:	69e3      	ldr	r3, [r4, #28]
 8003560:	00da      	lsls	r2, r3, #3
 8003562:	d432      	bmi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003564:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	69e3      	ldr	r3, [r4, #28]
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	61e3      	str	r3, [r4, #28]
 800356e:	69e3      	ldr	r3, [r4, #28]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	4f30      	ldr	r7, [pc, #192]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	05db      	lsls	r3, r3, #23
 800357e:	d526      	bpl.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003580:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003582:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003586:	d136      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003588:	6a23      	ldr	r3, [r4, #32]
 800358a:	686a      	ldr	r2, [r5, #4]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	4313      	orrs	r3, r2
 8003592:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003594:	b11e      	cbz	r6, 800359e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003596:	69e3      	ldr	r3, [r4, #28]
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359e:	6828      	ldr	r0, [r5, #0]
 80035a0:	0783      	lsls	r3, r0, #30
 80035a2:	d506      	bpl.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a4:	4924      	ldr	r1, [pc, #144]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035a6:	68ab      	ldr	r3, [r5, #8]
 80035a8:	684a      	ldr	r2, [r1, #4]
 80035aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80035ae:	431a      	orrs	r2, r3
 80035b0:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035b2:	f010 0010 	ands.w	r0, r0, #16
 80035b6:	d01b      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035ba:	68e9      	ldr	r1, [r5, #12]
 80035bc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035be:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6053      	str	r3, [r2, #4]
 80035c8:	e012      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 80035ca:	2600      	movs	r6, #0
 80035cc:	e7d4      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80035d6:	f7fe fe0b 	bl	80021f0 <HAL_GetTick>
 80035da:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	05d8      	lsls	r0, r3, #23
 80035e0:	d4ce      	bmi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe fe05 	bl	80021f0 <HAL_GetTick>
 80035e6:	eba0 0008 	sub.w	r0, r0, r8
 80035ea:	2864      	cmp	r0, #100	; 0x64
 80035ec:	d9f6      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80035ee:	2003      	movs	r0, #3
}
 80035f0:	b002      	add	sp, #8
 80035f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035f6:	686a      	ldr	r2, [r5, #4]
 80035f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d0c3      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003600:	2001      	movs	r0, #1
 8003602:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003604:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003606:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003610:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8003614:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003616:	07d9      	lsls	r1, r3, #31
 8003618:	d5b6      	bpl.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800361a:	f7fe fde9 	bl	80021f0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003622:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	6a23      	ldr	r3, [r4, #32]
 8003626:	079a      	lsls	r2, r3, #30
 8003628:	d4ae      	bmi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe fde1 	bl	80021f0 <HAL_GetTick>
 800362e:	1bc0      	subs	r0, r0, r7
 8003630:	4540      	cmp	r0, r8
 8003632:	d9f7      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003634:	e7db      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	42420000 	.word	0x42420000

08003644 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003644:	4602      	mov	r2, r0
 8003646:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
{
 800364a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800364c:	ad02      	add	r5, sp, #8
 800364e:	f103 0610 	add.w	r6, r3, #16
 8003652:	462c      	mov	r4, r5
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	3308      	adds	r3, #8
 800365a:	c403      	stmia	r4!, {r0, r1}
 800365c:	42b3      	cmp	r3, r6
 800365e:	4625      	mov	r5, r4
 8003660:	d1f7      	bne.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003662:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003666:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003668:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800366c:	d047      	beq.n	80036fe <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800366e:	2a10      	cmp	r2, #16
 8003670:	d003      	beq.n	800367a <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8003672:	2a01      	cmp	r2, #1
 8003674:	d024      	beq.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003676:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8003678:	e036      	b.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      temp_reg = RCC->CFGR;
 800367a:	4a28      	ldr	r2, [pc, #160]	; (800371c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800367c:	6851      	ldr	r1, [r2, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800367e:	6810      	ldr	r0, [r2, #0]
 8003680:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003684:	d030      	beq.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003686:	f3c1 4383 	ubfx	r3, r1, #18, #4
 800368a:	3318      	adds	r3, #24
 800368c:	446b      	add	r3, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368e:	03c9      	lsls	r1, r1, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003690:	f813 0c10 	ldrb.w	r0, [r3, #-16]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003694:	bf49      	itett	mi
 8003696:	6853      	ldrmi	r3, [r2, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003698:	4b21      	ldrpl	r3, [pc, #132]	; (8003720 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800369a:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
 800369e:	3318      	addmi	r3, #24
 80036a0:	bf41      	itttt	mi
 80036a2:	446b      	addmi	r3, sp
 80036a4:	f813 1c14 	ldrbmi.w	r1, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036a8:	4b1e      	ldrmi	r3, [pc, #120]	; (8003724 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80036aa:	fbb3 f3f1 	udivmi	r3, r3, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036ae:	4358      	muls	r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036b0:	6853      	ldr	r3, [r2, #4]
 80036b2:	025b      	lsls	r3, r3, #9
 80036b4:	d418      	bmi.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          frequency = (pllclk * 2) / 3;
 80036b6:	2303      	movs	r3, #3
 80036b8:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036ba:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80036be:	e013      	b.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036c0:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80036c6:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036c8:	4019      	ands	r1, r3
 80036ca:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80036ce:	d01f      	beq.n	8003710 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d8:	d108      	bne.n	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        frequency = LSI_VALUE;
 80036da:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036de:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80036e0:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80036e4:	bf18      	it	ne
 80036e6:	4618      	movne	r0, r3
}
 80036e8:	b006      	add	sp, #24
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f0:	d1c1      	bne.n	8003676 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80036f2:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80036f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80036f8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80036fc:	e7f2      	b.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036fe:	f7ff ff17 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	e7d4      	b.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSE_VALUE;
 8003710:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003714:	e7e8      	b.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8003716:	bf00      	nop
 8003718:	0800729f 	.word	0x0800729f
 800371c:	40021000 	.word	0x40021000
 8003720:	003d0900 	.word	0x003d0900
 8003724:	007a1200 	.word	0x007a1200

08003728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003728:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800372a:	4604      	mov	r4, r0
 800372c:	2800      	cmp	r0, #0
 800372e:	d051      	beq.n	80037d4 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003730:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d14a      	bne.n	80037cc <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003736:	6842      	ldr	r2, [r0, #4]
 8003738:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800373c:	d000      	beq.n	8003740 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800373e:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003744:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003748:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800374c:	b923      	cbnz	r3, 8003758 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800374e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003750:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003754:	f7fe fbf6 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003758:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800375a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800375c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003760:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003762:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003768:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800376a:	6863      	ldr	r3, [r4, #4]
 800376c:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003770:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003774:	4303      	orrs	r3, r0
 8003776:	68e0      	ldr	r0, [r4, #12]
 8003778:	69a1      	ldr	r1, [r4, #24]
 800377a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800377e:	4303      	orrs	r3, r0
 8003780:	6920      	ldr	r0, [r4, #16]
 8003782:	f000 0002 	and.w	r0, r0, #2
 8003786:	4303      	orrs	r3, r0
 8003788:	6960      	ldr	r0, [r4, #20]
 800378a:	f000 0001 	and.w	r0, r0, #1
 800378e:	4303      	orrs	r3, r0
 8003790:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003794:	4303      	orrs	r3, r0
 8003796:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003798:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800379a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800379e:	4303      	orrs	r3, r0
 80037a0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037a2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80037aa:	4303      	orrs	r3, r0
 80037ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80037ae:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80037b2:	4303      	orrs	r3, r0
 80037b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037b6:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037b8:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ba:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80037c2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037c4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80037ca:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037cc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037d2:	e7b5      	b.n	8003740 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e7f8      	b.n	80037ca <HAL_SPI_Init+0xa2>

080037d8 <HAL_SPI_ErrorCallback>:
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80037de:	6803      	ldr	r3, [r0, #0]
{
 80037e0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80037e2:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80037e4:	689a      	ldr	r2, [r3, #8]
{
 80037e6:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037e8:	0656      	lsls	r6, r2, #25
 80037ea:	ea4f 1592 	mov.w	r5, r2, lsr #6
 80037ee:	f3c2 1780 	ubfx	r7, r2, #6, #1
 80037f2:	d408      	bmi.n	8003806 <HAL_SPI_IRQHandler+0x2a>
 80037f4:	07d6      	lsls	r6, r2, #31
 80037f6:	d506      	bpl.n	8003806 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037f8:	064e      	lsls	r6, r1, #25
 80037fa:	d504      	bpl.n	8003806 <HAL_SPI_IRQHandler+0x2a>
  {
    hspi->RxISR(hspi);
 80037fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 80037fe:	b005      	add	sp, #20
 8003800:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003804:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003806:	0796      	lsls	r6, r2, #30
 8003808:	d504      	bpl.n	8003814 <HAL_SPI_IRQHandler+0x38>
 800380a:	0608      	lsls	r0, r1, #24
 800380c:	d502      	bpl.n	8003814 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800380e:	4620      	mov	r0, r4
 8003810:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003812:	e7f4      	b.n	80037fe <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003814:	0956      	lsrs	r6, r2, #5
 8003816:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 800381a:	07d2      	lsls	r2, r2, #31
 800381c:	d54c      	bpl.n	80038b8 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800381e:	068d      	lsls	r5, r1, #26
 8003820:	d54a      	bpl.n	80038b8 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003822:	b177      	cbz	r7, 8003842 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003824:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8003828:	2000      	movs	r0, #0
 800382a:	2a03      	cmp	r2, #3
 800382c:	d03e      	beq.n	80038ac <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800382e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003830:	f042 0204 	orr.w	r2, r2, #4
 8003834:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003836:	9001      	str	r0, [sp, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	9201      	str	r2, [sp, #4]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	9201      	str	r2, [sp, #4]
 8003840:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003842:	07f0      	lsls	r0, r6, #31
 8003844:	d50c      	bpl.n	8003860 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003846:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800384e:	2200      	movs	r2, #0
 8003850:	9203      	str	r2, [sp, #12]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	9203      	str	r2, [sp, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003862:	b34a      	cbz	r2, 80038b8 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800386c:	2201      	movs	r2, #1
 800386e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003872:	078a      	lsls	r2, r1, #30
 8003874:	d022      	beq.n	80038bc <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003876:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003878:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800387a:	f022 0203 	bic.w	r2, r2, #3
 800387e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003880:	b140      	cbz	r0, 8003894 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_SPI_IRQHandler+0xe8>)
 8003884:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003886:	f7fe ffa1 	bl	80027cc <HAL_DMA_Abort_IT>
 800388a:	b118      	cbz	r0, 8003894 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800388c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800388e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003892:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003894:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003896:	b178      	cbz	r0, 80038b8 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_SPI_IRQHandler+0xe8>)
 800389a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800389c:	f7fe ff96 	bl	80027cc <HAL_DMA_Abort_IT>
 80038a0:	b150      	cbz	r0, 80038b8 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80038a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	6563      	str	r3, [r4, #84]	; 0x54
 80038aa:	e005      	b.n	80038b8 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ac:	9002      	str	r0, [sp, #8]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	9202      	str	r2, [sp, #8]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	9b02      	ldr	r3, [sp, #8]
}
 80038b8:	b005      	add	sp, #20
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff ff8b 	bl	80037d8 <HAL_SPI_ErrorCallback>
 80038c2:	e7f9      	b.n	80038b8 <HAL_SPI_IRQHandler+0xdc>
 80038c4:	080038c9 	.word	0x080038c9

080038c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 80038ca:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80038ce:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80038d0:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038d2:	f7ff ff81 	bl	80037d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038d6:	bd08      	pop	{r3, pc}

080038d8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038d8:	6a03      	ldr	r3, [r0, #32]
{
 80038da:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80038ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80038f2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80038f6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f8:	4d0a      	ldr	r5, [pc, #40]	; (8003924 <TIM_OC1_SetConfig+0x4c>)
 80038fa:	42a8      	cmp	r0, r5
 80038fc:	d10b      	bne.n	8003916 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003900:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003904:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003906:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800390a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800390e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003910:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003914:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003918:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391a:	684a      	ldr	r2, [r1, #4]
 800391c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391e:	6203      	str	r3, [r0, #32]
}
 8003920:	bd70      	pop	{r4, r5, r6, pc}
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00

08003928 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003928:	6a03      	ldr	r3, [r0, #32]
{
 800392a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800392c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003930:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003936:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003938:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800393a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800393e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003940:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003942:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003946:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800394a:	4d0b      	ldr	r5, [pc, #44]	; (8003978 <TIM_OC3_SetConfig+0x50>)
 800394c:	42a8      	cmp	r0, r5
 800394e:	d10d      	bne.n	800396c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003950:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003956:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800395a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800395e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003962:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003968:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800396e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003970:	684a      	ldr	r2, [r1, #4]
 8003972:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	6203      	str	r3, [r0, #32]
}
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	40012c00 	.word	0x40012c00

0800397c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800397c:	6a03      	ldr	r3, [r0, #32]
{
 800397e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003984:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800398e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003992:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003996:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800399c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	4d06      	ldr	r5, [pc, #24]	; (80039bc <TIM_OC4_SetConfig+0x40>)
 80039a2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a4:	bf02      	ittt	eq
 80039a6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039a8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ac:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039b4:	684a      	ldr	r2, [r1, #4]
 80039b6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	6203      	str	r3, [r0, #32]
}
 80039ba:	bd30      	pop	{r4, r5, pc}
 80039bc:	40012c00 	.word	0x40012c00

080039c0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80039c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d120      	bne.n	8003a0a <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <HAL_TIM_Base_Start_IT+0x50>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00a      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x34>
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d007      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x34>
 80039e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x34>
 80039ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	2a06      	cmp	r2, #6
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003a06:	2000      	movs	r0, #0
}
 8003a08:	4770      	bx	lr
    return HAL_ERROR;
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00

08003a14 <HAL_TIM_OC_DelayElapsedCallback>:
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_IC_CaptureCallback>:
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003a18:	4770      	bx	lr

08003a1a <HAL_TIM_TriggerCallback>:
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a1c:	6803      	ldr	r3, [r0, #0]
{
 8003a1e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a20:	691a      	ldr	r2, [r3, #16]
{
 8003a22:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a24:	0791      	lsls	r1, r2, #30
 8003a26:	d50e      	bpl.n	8003a46 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	0792      	lsls	r2, r2, #30
 8003a2c:	d50b      	bpl.n	8003a46 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2e:	f06f 0202 	mvn.w	r2, #2
 8003a32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a34:	2201      	movs	r2, #1
 8003a36:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	079b      	lsls	r3, r3, #30
 8003a3c:	d077      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	f7ff ffea 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	2300      	movs	r3, #0
 8003a44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	0750      	lsls	r0, r2, #29
 8003a4c:	d510      	bpl.n	8003a70 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	0751      	lsls	r1, r2, #29
 8003a52:	d50d      	bpl.n	8003a70 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5e:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003a60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a62:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003a66:	d068      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a68:	f7ff ffd5 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	0712      	lsls	r2, r2, #28
 8003a76:	d50f      	bpl.n	8003a98 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	0710      	lsls	r0, r2, #28
 8003a7c:	d50c      	bpl.n	8003a98 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a7e:	f06f 0208 	mvn.w	r2, #8
 8003a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a84:	2204      	movs	r2, #4
 8003a86:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a88:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a8c:	0799      	lsls	r1, r3, #30
 8003a8e:	d05a      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a90:	f7ff ffc1 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a94:	2300      	movs	r3, #0
 8003a96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	06d2      	lsls	r2, r2, #27
 8003a9e:	d510      	bpl.n	8003ac2 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	06d0      	lsls	r0, r2, #27
 8003aa4:	d50d      	bpl.n	8003ac2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa6:	f06f 0210 	mvn.w	r2, #16
 8003aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aac:	2208      	movs	r2, #8
 8003aae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab0:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ab8:	d04b      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	f7ff ffac 	bl	8003a16 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	07d1      	lsls	r1, r2, #31
 8003ac8:	d508      	bpl.n	8003adc <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	07d2      	lsls	r2, r2, #31
 8003ace:	d505      	bpl.n	8003adc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ad0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ad6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad8:	f7fd fc5a 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	0610      	lsls	r0, r2, #24
 8003ae2:	d508      	bpl.n	8003af6 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	0611      	lsls	r1, r2, #24
 8003ae8:	d505      	bpl.n	8003af6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aea:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003aee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003af2:	f000 faa2 	bl	800403a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	0652      	lsls	r2, r2, #25
 8003afc:	d508      	bpl.n	8003b10 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	0650      	lsls	r0, r2, #25
 8003b02:	d505      	bpl.n	8003b10 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003b08:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b0a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b0c:	f7ff ff85 	bl	8003a1a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	0691      	lsls	r1, r2, #26
 8003b16:	d522      	bpl.n	8003b5e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	0692      	lsls	r2, r2, #26
 8003b1c:	d51f      	bpl.n	8003b5e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b1e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003b22:	4620      	mov	r0, r4
}
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003b2a:	f000 ba85 	b.w	8004038 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	f7ff ff71 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b32:	4620      	mov	r0, r4
 8003b34:	f7ff ff70 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b38:	e783      	b.n	8003a42 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	f7ff ff6b 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7ff ff6a 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b44:	e792      	b.n	8003a6c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	f7ff ff65 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7ff ff64 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b50:	e7a0      	b.n	8003a94 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	f7ff ff5f 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7ff ff5e 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
 8003b5c:	e7af      	b.n	8003abe <HAL_TIM_IRQHandler+0xa2>
}
 8003b5e:	bd10      	pop	{r4, pc}

08003b60 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003b62:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	4290      	cmp	r0, r2
 8003b66:	d00a      	beq.n	8003b7e <TIM_Base_SetConfig+0x1e>
 8003b68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b6c:	d007      	beq.n	8003b7e <TIM_Base_SetConfig+0x1e>
 8003b6e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b72:	4290      	cmp	r0, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_Base_SetConfig+0x1e>
 8003b76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b7a:	4290      	cmp	r0, r2
 8003b7c:	d115      	bne.n	8003baa <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003b7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b84:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <TIM_Base_SetConfig+0x6c>)
 8003b88:	4290      	cmp	r0, r2
 8003b8a:	d00a      	beq.n	8003ba2 <TIM_Base_SetConfig+0x42>
 8003b8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b90:	d007      	beq.n	8003ba2 <TIM_Base_SetConfig+0x42>
 8003b92:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b96:	4290      	cmp	r0, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_Base_SetConfig+0x42>
 8003b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b9e:	4290      	cmp	r0, r2
 8003ba0:	d103      	bne.n	8003baa <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003baa:	694a      	ldr	r2, [r1, #20]
 8003bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003bb2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	688b      	ldr	r3, [r1, #8]
 8003bb6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bb8:	680b      	ldr	r3, [r1, #0]
 8003bba:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <TIM_Base_SetConfig+0x6c>)
 8003bbe:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc0:	bf04      	itt	eq
 8003bc2:	690b      	ldreq	r3, [r1, #16]
 8003bc4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	6143      	str	r3, [r0, #20]
}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00

08003bd0 <HAL_TIM_Base_Init>:
{
 8003bd0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	b330      	cbz	r0, 8003c24 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bde:	b91b      	cbnz	r3, 8003be8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003be0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003be4:	f7fe fa14 	bl	8002010 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf0:	1d21      	adds	r1, r4, #4
 8003bf2:	f7ff ffb5 	bl	8003b60 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf6:	2301      	movs	r3, #1
  return HAL_OK;
 8003bf8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003c22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c24:	2001      	movs	r0, #1
 8003c26:	e7fc      	b.n	8003c22 <HAL_TIM_Base_Init+0x52>

08003c28 <HAL_TIM_PWM_Init>:
{
 8003c28:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	b330      	cbz	r0, 8003c7c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c36:	b91b      	cbnz	r3, 8003c40 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003c38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003c3c:	f7fe f9c4 	bl	8001fc8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c42:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	1d21      	adds	r1, r4, #4
 8003c4a:	f7ff ff89 	bl	8003b60 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4e:	2301      	movs	r3, #1
  return HAL_OK;
 8003c50:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c5a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003c7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	e7fc      	b.n	8003c7a <HAL_TIM_PWM_Init+0x52>

08003c80 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c80:	6a03      	ldr	r3, [r0, #32]
{
 8003c82:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c84:	f023 0310 	bic.w	r3, r3, #16
 8003c88:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003c8a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003c8c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c8e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c92:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c9a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003c9c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	4d0b      	ldr	r5, [pc, #44]	; (8003cd4 <TIM_OC2_SetConfig+0x54>)
 8003ca6:	42a8      	cmp	r0, r5
 8003ca8:	d10d      	bne.n	8003cc6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003caa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cb8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003cbc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003cc6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003cc8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003cca:	684a      	ldr	r2, [r1, #4]
 8003ccc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003cce:	6203      	str	r3, [r0, #32]
}
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00

08003cd8 <HAL_TIM_PWM_ConfigChannel>:
{
 8003cd8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003cda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003cde:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d052      	beq.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0xb2>
 8003ce4:	2301      	movs	r3, #1
  switch (Channel)
 8003ce6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003ce8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003cec:	d03c      	beq.n	8003d68 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003cee:	d806      	bhi.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x26>
 8003cf0:	b1c2      	cbz	r2, 8003d24 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8003cf2:	2a04      	cmp	r2, #4
 8003cf4:	d027      	beq.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003cfc:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8003cfe:	2a0c      	cmp	r2, #12
 8003d00:	d1f9      	bne.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d02:	6800      	ldr	r0, [r0, #0]
 8003d04:	f7ff fe3a 	bl	800397c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d08:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d22:	e030      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d24:	6800      	ldr	r0, [r0, #0]
 8003d26:	f7ff fdd7 	bl	80038d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	f042 0208 	orr.w	r2, r2, #8
 8003d34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	f022 0204 	bic.w	r2, r2, #4
 8003d3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d42:	619a      	str	r2, [r3, #24]
      break;
 8003d44:	e7d7      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d46:	6800      	ldr	r0, [r0, #0]
 8003d48:	f7ff ff9a 	bl	8003c80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d4e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d66:	e7ec      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d68:	6800      	ldr	r0, [r0, #0]
 8003d6a:	f7ff fddd 	bl	8003928 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d70:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	f042 0208 	orr.w	r2, r2, #8
 8003d78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d86:	61da      	str	r2, [r3, #28]
      break;
 8003d88:	e7b5      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	e7b6      	b.n	8003cfc <HAL_TIM_PWM_ConfigChannel+0x24>

08003d8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d8e:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d90:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d92:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d98:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003d9c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	6082      	str	r2, [r0, #8]
}
 8003da0:	bd10      	pop	{r4, pc}

08003da2 <HAL_TIM_ConfigClockSource>:
{
 8003da2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003da4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003da8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	f04f 0002 	mov.w	r0, #2
 8003db0:	d027      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x60>
 8003db2:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003dba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003dbe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003dc8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003dca:	680b      	ldr	r3, [r1, #0]
 8003dcc:	2b60      	cmp	r3, #96	; 0x60
 8003dce:	d04d      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0xca>
 8003dd0:	d832      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x96>
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d062      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0xfa>
 8003dd6:	d815      	bhi.n	8003e04 <HAL_TIM_ConfigClockSource+0x62>
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d003      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x42>
 8003ddc:	d809      	bhi.n	8003df2 <HAL_TIM_ConfigClockSource+0x50>
 8003dde:	f033 0210 	bics.w	r2, r3, #16
 8003de2:	d108      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8003de4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	e020      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003df2:	2b30      	cmp	r3, #48	; 0x30
 8003df4:	d0f6      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8003df6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003df8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003dfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003dfe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003e04:	2b50      	cmp	r3, #80	; 0x50
 8003e06:	d1f6      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e08:	684a      	ldr	r2, [r1, #4]
 8003e0a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e0c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e10:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e14:	f025 0501 	bic.w	r5, r5, #1
 8003e18:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003e1c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e22:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003e26:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e28:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003e2a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e30:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003e34:	6083      	str	r3, [r0, #8]
}
 8003e36:	e7de      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8003e38:	2b70      	cmp	r3, #112	; 0x70
 8003e3a:	d00c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xb4>
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d1d9      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8003e42:	68cb      	ldr	r3, [r1, #12]
 8003e44:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003e48:	f7ff ffa1 	bl	8003d8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	6893      	ldr	r3, [r2, #8]
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e54:	e008      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	68cb      	ldr	r3, [r1, #12]
 8003e58:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003e5c:	f7ff ff97 	bl	8003d8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e68:	6093      	str	r3, [r2, #8]
      break;
 8003e6a:	e7c4      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e6c:	684d      	ldr	r5, [r1, #4]
 8003e6e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e70:	6a01      	ldr	r1, [r0, #32]
 8003e72:	f021 0110 	bic.w	r1, r1, #16
 8003e76:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e78:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e7a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e7c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e84:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e88:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003e8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e8e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003e90:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e96:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003e9a:	e7cb      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9c:	684a      	ldr	r2, [r1, #4]
 8003e9e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ea0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea8:	f025 0501 	bic.w	r5, r5, #1
 8003eac:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003eb0:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003eba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ebe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003ec8:	e7b4      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x92>

08003eca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eca:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ecc:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ece:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed0:	f001 011f 	and.w	r1, r1, #31
 8003ed4:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003ed6:	ea23 0304 	bic.w	r3, r3, r4
 8003eda:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003edc:	6a03      	ldr	r3, [r0, #32]
 8003ede:	408a      	lsls	r2, r1
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	6202      	str	r2, [r0, #32]
}
 8003ee4:	bd10      	pop	{r4, pc}
	...

08003ee8 <HAL_TIM_OC_Start>:
{
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eec:	b929      	cbnz	r1, 8003efa <HAL_TIM_OC_Start+0x12>
 8003eee:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d021      	beq.n	8003f3a <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8003ef6:	2001      	movs	r0, #1
}
 8003ef8:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	2904      	cmp	r1, #4
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_OC_Start+0x26>
 8003efe:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d1f7      	bne.n	8003ef6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f06:	2302      	movs	r3, #2
 8003f08:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f0c:	e018      	b.n	8003f40 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0e:	2908      	cmp	r1, #8
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_OC_Start+0x3a>
 8003f12:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d1ed      	bne.n	8003ef6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f20:	e00e      	b.n	8003f40 <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d1e5      	bne.n	8003ef6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2a:	2904      	cmp	r1, #4
 8003f2c:	d0eb      	beq.n	8003f06 <HAL_TIM_OC_Start+0x1e>
 8003f2e:	2908      	cmp	r1, #8
 8003f30:	d0f3      	beq.n	8003f1a <HAL_TIM_OC_Start+0x32>
 8003f32:	2302      	movs	r3, #2
 8003f34:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003f38:	e002      	b.n	8003f40 <HAL_TIM_OC_Start+0x58>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f40:	2201      	movs	r2, #1
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	f7ff ffc1 	bl	8003eca <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <HAL_TIM_OC_Start+0x9c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10a      	bne.n	8003f66 <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	2a06      	cmp	r2, #6
 8003f60:	d10b      	bne.n	8003f7a <HAL_TIM_OC_Start+0x92>
  return HAL_OK;
 8003f62:	2000      	movs	r0, #0
 8003f64:	e7c8      	b.n	8003ef8 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d0f5      	beq.n	8003f58 <HAL_TIM_OC_Start+0x70>
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <HAL_TIM_OC_Start+0xa0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d0f2      	beq.n	8003f58 <HAL_TIM_OC_Start+0x70>
 8003f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d0ee      	beq.n	8003f58 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e7ee      	b.n	8003f62 <HAL_TIM_OC_Start+0x7a>
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400

08003f8c <HAL_TIM_PWM_Start>:
 8003f8c:	f7ff bfac 	b.w	8003ee8 <HAL_TIM_OC_Start>

08003f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f90:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003f96:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f04f 0002 	mov.w	r0, #2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003fa6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003faa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fae:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8003fb0:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb2:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d007      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003fc0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	d003      	beq.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003fc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d104      	bne.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fda:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003fdc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fe2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8003fe6:	bd30      	pop	{r4, r5, pc}
 8003fe8:	40012c00 	.word	0x40012c00

08003fec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d01f      	beq.n	8004034 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ff4:	68cb      	ldr	r3, [r1, #12]
 8003ff6:	688a      	ldr	r2, [r1, #8]
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ffe:	684a      	ldr	r2, [r1, #4]
 8004000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004004:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004006:	680a      	ldr	r2, [r1, #0]
 8004008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800400c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800400e:	690a      	ldr	r2, [r1, #16]
 8004010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004014:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004016:	694a      	ldr	r2, [r1, #20]
 8004018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800401c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800401e:	69ca      	ldr	r2, [r1, #28]
 8004020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004024:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004026:	6802      	ldr	r2, [r0, #0]
 8004028:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800402a:	2300      	movs	r3, #0
 800402c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004030:	4618      	mov	r0, r3
 8004032:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004034:	2002      	movs	r0, #2
}
 8004036:	4770      	bx	lr

08004038 <HAL_TIMEx_CommutCallback>:
 8004038:	4770      	bx	lr

0800403a <HAL_TIMEx_BreakCallback>:
 800403a:	4770      	bx	lr

0800403c <tan>:
 800403c:	b530      	push	{r4, r5, lr}
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <tan+0x4c>)
 8004040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004044:	4293      	cmp	r3, r2
 8004046:	b087      	sub	sp, #28
 8004048:	dc06      	bgt.n	8004058 <tan+0x1c>
 800404a:	2301      	movs	r3, #1
 800404c:	2200      	movs	r2, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	f000 fd59 	bl	8004b08 <__kernel_tan>
 8004056:	e006      	b.n	8004066 <tan+0x2a>
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <tan+0x50>)
 800405a:	4293      	cmp	r3, r2
 800405c:	dd05      	ble.n	800406a <tan+0x2e>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	f7fc f879 	bl	8000158 <__aeabi_dsub>
 8004066:	b007      	add	sp, #28
 8004068:	bd30      	pop	{r4, r5, pc}
 800406a:	aa02      	add	r2, sp, #8
 800406c:	f000 f810 	bl	8004090 <__ieee754_rem_pio2>
 8004070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004074:	0040      	lsls	r0, r0, #1
 8004076:	f000 0002 	and.w	r0, r0, #2
 800407a:	f1c0 0001 	rsb	r0, r0, #1
 800407e:	9000      	str	r0, [sp, #0]
 8004080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004084:	e7e5      	b.n	8004052 <tan+0x16>
 8004086:	bf00      	nop
 8004088:	3fe921fb 	.word	0x3fe921fb
 800408c:	7fefffff 	.word	0x7fefffff

08004090 <__ieee754_rem_pio2>:
 8004090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	4614      	mov	r4, r2
 8004096:	4ac4      	ldr	r2, [pc, #784]	; (80043a8 <__ieee754_rem_pio2+0x318>)
 8004098:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800409c:	b08d      	sub	sp, #52	; 0x34
 800409e:	4592      	cmp	sl, r2
 80040a0:	9104      	str	r1, [sp, #16]
 80040a2:	dc07      	bgt.n	80040b4 <__ieee754_rem_pio2+0x24>
 80040a4:	2200      	movs	r2, #0
 80040a6:	2300      	movs	r3, #0
 80040a8:	e9c4 0100 	strd	r0, r1, [r4]
 80040ac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80040b0:	2500      	movs	r5, #0
 80040b2:	e024      	b.n	80040fe <__ieee754_rem_pio2+0x6e>
 80040b4:	4abd      	ldr	r2, [pc, #756]	; (80043ac <__ieee754_rem_pio2+0x31c>)
 80040b6:	4592      	cmp	sl, r2
 80040b8:	dc72      	bgt.n	80041a0 <__ieee754_rem_pio2+0x110>
 80040ba:	9b04      	ldr	r3, [sp, #16]
 80040bc:	4dbc      	ldr	r5, [pc, #752]	; (80043b0 <__ieee754_rem_pio2+0x320>)
 80040be:	2b00      	cmp	r3, #0
 80040c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8004370 <__ieee754_rem_pio2+0x2e0>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	dd36      	ble.n	8004136 <__ieee754_rem_pio2+0xa6>
 80040c8:	f7fc f846 	bl	8000158 <__aeabi_dsub>
 80040cc:	45aa      	cmp	sl, r5
 80040ce:	4606      	mov	r6, r0
 80040d0:	460f      	mov	r7, r1
 80040d2:	d018      	beq.n	8004106 <__ieee754_rem_pio2+0x76>
 80040d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8004378 <__ieee754_rem_pio2+0x2e8>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f7fc f83d 	bl	8000158 <__aeabi_dsub>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4630      	mov	r0, r6
 80040e4:	e9c4 2300 	strd	r2, r3, [r4]
 80040e8:	4639      	mov	r1, r7
 80040ea:	f7fc f835 	bl	8000158 <__aeabi_dsub>
 80040ee:	a3a2      	add	r3, pc, #648	; (adr r3, 8004378 <__ieee754_rem_pio2+0x2e8>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f7fc f830 	bl	8000158 <__aeabi_dsub>
 80040f8:	2501      	movs	r5, #1
 80040fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80040fe:	4628      	mov	r0, r5
 8004100:	b00d      	add	sp, #52	; 0x34
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004106:	a39e      	add	r3, pc, #632	; (adr r3, 8004380 <__ieee754_rem_pio2+0x2f0>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f824 	bl	8000158 <__aeabi_dsub>
 8004110:	a39d      	add	r3, pc, #628	; (adr r3, 8004388 <__ieee754_rem_pio2+0x2f8>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	4606      	mov	r6, r0
 8004118:	460f      	mov	r7, r1
 800411a:	f7fc f81d 	bl	8000158 <__aeabi_dsub>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4630      	mov	r0, r6
 8004124:	e9c4 2300 	strd	r2, r3, [r4]
 8004128:	4639      	mov	r1, r7
 800412a:	f7fc f815 	bl	8000158 <__aeabi_dsub>
 800412e:	a396      	add	r3, pc, #600	; (adr r3, 8004388 <__ieee754_rem_pio2+0x2f8>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	e7de      	b.n	80040f4 <__ieee754_rem_pio2+0x64>
 8004136:	f7fc f811 	bl	800015c <__adddf3>
 800413a:	45aa      	cmp	sl, r5
 800413c:	4606      	mov	r6, r0
 800413e:	460f      	mov	r7, r1
 8004140:	d016      	beq.n	8004170 <__ieee754_rem_pio2+0xe0>
 8004142:	a38d      	add	r3, pc, #564	; (adr r3, 8004378 <__ieee754_rem_pio2+0x2e8>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc f808 	bl	800015c <__adddf3>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4630      	mov	r0, r6
 8004152:	e9c4 2300 	strd	r2, r3, [r4]
 8004156:	4639      	mov	r1, r7
 8004158:	f7fb fffe 	bl	8000158 <__aeabi_dsub>
 800415c:	a386      	add	r3, pc, #536	; (adr r3, 8004378 <__ieee754_rem_pio2+0x2e8>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fb fffb 	bl	800015c <__adddf3>
 8004166:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800416a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800416e:	e7c6      	b.n	80040fe <__ieee754_rem_pio2+0x6e>
 8004170:	a383      	add	r3, pc, #524	; (adr r3, 8004380 <__ieee754_rem_pio2+0x2f0>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fb fff1 	bl	800015c <__adddf3>
 800417a:	a383      	add	r3, pc, #524	; (adr r3, 8004388 <__ieee754_rem_pio2+0x2f8>)
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	4606      	mov	r6, r0
 8004182:	460f      	mov	r7, r1
 8004184:	f7fb ffea 	bl	800015c <__adddf3>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4630      	mov	r0, r6
 800418e:	e9c4 2300 	strd	r2, r3, [r4]
 8004192:	4639      	mov	r1, r7
 8004194:	f7fb ffe0 	bl	8000158 <__aeabi_dsub>
 8004198:	a37b      	add	r3, pc, #492	; (adr r3, 8004388 <__ieee754_rem_pio2+0x2f8>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	e7e0      	b.n	8004162 <__ieee754_rem_pio2+0xd2>
 80041a0:	4a84      	ldr	r2, [pc, #528]	; (80043b4 <__ieee754_rem_pio2+0x324>)
 80041a2:	4592      	cmp	sl, r2
 80041a4:	f300 80d5 	bgt.w	8004352 <__ieee754_rem_pio2+0x2c2>
 80041a8:	f000 feaa 	bl	8004f00 <fabs>
 80041ac:	a378      	add	r3, pc, #480	; (adr r3, 8004390 <__ieee754_rem_pio2+0x300>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	4606      	mov	r6, r0
 80041b4:	460f      	mov	r7, r1
 80041b6:	f7fc f987 	bl	80004c8 <__aeabi_dmul>
 80041ba:	2200      	movs	r2, #0
 80041bc:	4b7e      	ldr	r3, [pc, #504]	; (80043b8 <__ieee754_rem_pio2+0x328>)
 80041be:	f7fb ffcd 	bl	800015c <__adddf3>
 80041c2:	f7fc fc1b 	bl	80009fc <__aeabi_d2iz>
 80041c6:	4605      	mov	r5, r0
 80041c8:	f7fc f914 	bl	80003f4 <__aeabi_i2d>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041d4:	a366      	add	r3, pc, #408	; (adr r3, 8004370 <__ieee754_rem_pio2+0x2e0>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f7fc f975 	bl	80004c8 <__aeabi_dmul>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4630      	mov	r0, r6
 80041e4:	4639      	mov	r1, r7
 80041e6:	f7fb ffb7 	bl	8000158 <__aeabi_dsub>
 80041ea:	a363      	add	r3, pc, #396	; (adr r3, 8004378 <__ieee754_rem_pio2+0x2e8>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	4680      	mov	r8, r0
 80041f2:	4689      	mov	r9, r1
 80041f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f8:	f7fc f966 	bl	80004c8 <__aeabi_dmul>
 80041fc:	2d1f      	cmp	r5, #31
 80041fe:	4606      	mov	r6, r0
 8004200:	460f      	mov	r7, r1
 8004202:	dc0e      	bgt.n	8004222 <__ieee754_rem_pio2+0x192>
 8004204:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <__ieee754_rem_pio2+0x32c>)
 8004206:	1e6a      	subs	r2, r5, #1
 8004208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420c:	4553      	cmp	r3, sl
 800420e:	d008      	beq.n	8004222 <__ieee754_rem_pio2+0x192>
 8004210:	4632      	mov	r2, r6
 8004212:	463b      	mov	r3, r7
 8004214:	4640      	mov	r0, r8
 8004216:	4649      	mov	r1, r9
 8004218:	f7fb ff9e 	bl	8000158 <__aeabi_dsub>
 800421c:	e9c4 0100 	strd	r0, r1, [r4]
 8004220:	e013      	b.n	800424a <__ieee754_rem_pio2+0x1ba>
 8004222:	463b      	mov	r3, r7
 8004224:	4632      	mov	r2, r6
 8004226:	4640      	mov	r0, r8
 8004228:	4649      	mov	r1, r9
 800422a:	f7fb ff95 	bl	8000158 <__aeabi_dsub>
 800422e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8004232:	9305      	str	r3, [sp, #20]
 8004234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004238:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800423c:	f1ba 0f10 	cmp.w	sl, #16
 8004240:	dc1f      	bgt.n	8004282 <__ieee754_rem_pio2+0x1f2>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	e9c4 2300 	strd	r2, r3, [r4]
 800424a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800424e:	4640      	mov	r0, r8
 8004250:	4653      	mov	r3, sl
 8004252:	4649      	mov	r1, r9
 8004254:	f7fb ff80 	bl	8000158 <__aeabi_dsub>
 8004258:	4632      	mov	r2, r6
 800425a:	463b      	mov	r3, r7
 800425c:	f7fb ff7c 	bl	8000158 <__aeabi_dsub>
 8004260:	460b      	mov	r3, r1
 8004262:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004266:	9904      	ldr	r1, [sp, #16]
 8004268:	4602      	mov	r2, r0
 800426a:	2900      	cmp	r1, #0
 800426c:	f6bf af47 	bge.w	80040fe <__ieee754_rem_pio2+0x6e>
 8004270:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004274:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004278:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800427c:	60e3      	str	r3, [r4, #12]
 800427e:	426d      	negs	r5, r5
 8004280:	e73d      	b.n	80040fe <__ieee754_rem_pio2+0x6e>
 8004282:	a33f      	add	r3, pc, #252	; (adr r3, 8004380 <__ieee754_rem_pio2+0x2f0>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800428c:	f7fc f91c 	bl	80004c8 <__aeabi_dmul>
 8004290:	4606      	mov	r6, r0
 8004292:	460f      	mov	r7, r1
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4640      	mov	r0, r8
 800429a:	4649      	mov	r1, r9
 800429c:	f7fb ff5c 	bl	8000158 <__aeabi_dsub>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4682      	mov	sl, r0
 80042a6:	468b      	mov	fp, r1
 80042a8:	4640      	mov	r0, r8
 80042aa:	4649      	mov	r1, r9
 80042ac:	f7fb ff54 	bl	8000158 <__aeabi_dsub>
 80042b0:	4632      	mov	r2, r6
 80042b2:	463b      	mov	r3, r7
 80042b4:	f7fb ff50 	bl	8000158 <__aeabi_dsub>
 80042b8:	a333      	add	r3, pc, #204	; (adr r3, 8004388 <__ieee754_rem_pio2+0x2f8>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	4606      	mov	r6, r0
 80042c0:	460f      	mov	r7, r1
 80042c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c6:	f7fc f8ff 	bl	80004c8 <__aeabi_dmul>
 80042ca:	4632      	mov	r2, r6
 80042cc:	463b      	mov	r3, r7
 80042ce:	f7fb ff43 	bl	8000158 <__aeabi_dsub>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4606      	mov	r6, r0
 80042d8:	460f      	mov	r7, r1
 80042da:	4650      	mov	r0, sl
 80042dc:	4659      	mov	r1, fp
 80042de:	f7fb ff3b 	bl	8000158 <__aeabi_dsub>
 80042e2:	9a05      	ldr	r2, [sp, #20]
 80042e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b31      	cmp	r3, #49	; 0x31
 80042ec:	dc06      	bgt.n	80042fc <__ieee754_rem_pio2+0x26c>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	46d0      	mov	r8, sl
 80042f4:	46d9      	mov	r9, fp
 80042f6:	e9c4 2300 	strd	r2, r3, [r4]
 80042fa:	e7a6      	b.n	800424a <__ieee754_rem_pio2+0x1ba>
 80042fc:	a326      	add	r3, pc, #152	; (adr r3, 8004398 <__ieee754_rem_pio2+0x308>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004306:	f7fc f8df 	bl	80004c8 <__aeabi_dmul>
 800430a:	4606      	mov	r6, r0
 800430c:	460f      	mov	r7, r1
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4650      	mov	r0, sl
 8004314:	4659      	mov	r1, fp
 8004316:	f7fb ff1f 	bl	8000158 <__aeabi_dsub>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4680      	mov	r8, r0
 8004320:	4689      	mov	r9, r1
 8004322:	4650      	mov	r0, sl
 8004324:	4659      	mov	r1, fp
 8004326:	f7fb ff17 	bl	8000158 <__aeabi_dsub>
 800432a:	4632      	mov	r2, r6
 800432c:	463b      	mov	r3, r7
 800432e:	f7fb ff13 	bl	8000158 <__aeabi_dsub>
 8004332:	a31b      	add	r3, pc, #108	; (adr r3, 80043a0 <__ieee754_rem_pio2+0x310>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	4606      	mov	r6, r0
 800433a:	460f      	mov	r7, r1
 800433c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004340:	f7fc f8c2 	bl	80004c8 <__aeabi_dmul>
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	f7fb ff06 	bl	8000158 <__aeabi_dsub>
 800434c:	4606      	mov	r6, r0
 800434e:	460f      	mov	r7, r1
 8004350:	e75e      	b.n	8004210 <__ieee754_rem_pio2+0x180>
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <__ieee754_rem_pio2+0x330>)
 8004354:	4592      	cmp	sl, r2
 8004356:	dd35      	ble.n	80043c4 <__ieee754_rem_pio2+0x334>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	f7fb fefc 	bl	8000158 <__aeabi_dsub>
 8004360:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004364:	e9c4 0100 	strd	r0, r1, [r4]
 8004368:	e6a2      	b.n	80040b0 <__ieee754_rem_pio2+0x20>
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w
 8004370:	54400000 	.word	0x54400000
 8004374:	3ff921fb 	.word	0x3ff921fb
 8004378:	1a626331 	.word	0x1a626331
 800437c:	3dd0b461 	.word	0x3dd0b461
 8004380:	1a600000 	.word	0x1a600000
 8004384:	3dd0b461 	.word	0x3dd0b461
 8004388:	2e037073 	.word	0x2e037073
 800438c:	3ba3198a 	.word	0x3ba3198a
 8004390:	6dc9c883 	.word	0x6dc9c883
 8004394:	3fe45f30 	.word	0x3fe45f30
 8004398:	2e000000 	.word	0x2e000000
 800439c:	3ba3198a 	.word	0x3ba3198a
 80043a0:	252049c1 	.word	0x252049c1
 80043a4:	397b839a 	.word	0x397b839a
 80043a8:	3fe921fb 	.word	0x3fe921fb
 80043ac:	4002d97b 	.word	0x4002d97b
 80043b0:	3ff921fb 	.word	0x3ff921fb
 80043b4:	413921fb 	.word	0x413921fb
 80043b8:	3fe00000 	.word	0x3fe00000
 80043bc:	080072b0 	.word	0x080072b0
 80043c0:	7fefffff 	.word	0x7fefffff
 80043c4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80043c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80043cc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80043d0:	460f      	mov	r7, r1
 80043d2:	4606      	mov	r6, r0
 80043d4:	f7fc fb12 	bl	80009fc <__aeabi_d2iz>
 80043d8:	f7fc f80c 	bl	80003f4 <__aeabi_i2d>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043e8:	f7fb feb6 	bl	8000158 <__aeabi_dsub>
 80043ec:	2200      	movs	r2, #0
 80043ee:	4b22      	ldr	r3, [pc, #136]	; (8004478 <__ieee754_rem_pio2+0x3e8>)
 80043f0:	f7fc f86a 	bl	80004c8 <__aeabi_dmul>
 80043f4:	460f      	mov	r7, r1
 80043f6:	4606      	mov	r6, r0
 80043f8:	f7fc fb00 	bl	80009fc <__aeabi_d2iz>
 80043fc:	f7fb fffa 	bl	80003f4 <__aeabi_i2d>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4630      	mov	r0, r6
 8004406:	4639      	mov	r1, r7
 8004408:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800440c:	f7fb fea4 	bl	8000158 <__aeabi_dsub>
 8004410:	2200      	movs	r2, #0
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <__ieee754_rem_pio2+0x3e8>)
 8004414:	f7fc f858 	bl	80004c8 <__aeabi_dmul>
 8004418:	f04f 0803 	mov.w	r8, #3
 800441c:	2600      	movs	r6, #0
 800441e:	2700      	movs	r7, #0
 8004420:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004424:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8004428:	4632      	mov	r2, r6
 800442a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800442e:	463b      	mov	r3, r7
 8004430:	46c2      	mov	sl, r8
 8004432:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004436:	f7fc faaf 	bl	8000998 <__aeabi_dcmpeq>
 800443a:	2800      	cmp	r0, #0
 800443c:	d1f4      	bne.n	8004428 <__ieee754_rem_pio2+0x398>
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <__ieee754_rem_pio2+0x3ec>)
 8004440:	462a      	mov	r2, r5
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	2302      	movs	r3, #2
 8004446:	4621      	mov	r1, r4
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	a806      	add	r0, sp, #24
 800444c:	4653      	mov	r3, sl
 800444e:	f000 f817 	bl	8004480 <__kernel_rem_pio2>
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	4605      	mov	r5, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	f6bf ae51 	bge.w	80040fe <__ieee754_rem_pio2+0x6e>
 800445c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004464:	e9c4 2300 	strd	r2, r3, [r4]
 8004468:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800446c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004470:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004474:	e703      	b.n	800427e <__ieee754_rem_pio2+0x1ee>
 8004476:	bf00      	nop
 8004478:	41700000 	.word	0x41700000
 800447c:	08007330 	.word	0x08007330

08004480 <__kernel_rem_pio2>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004488:	9308      	str	r3, [sp, #32]
 800448a:	9106      	str	r1, [sp, #24]
 800448c:	4bb6      	ldr	r3, [pc, #728]	; (8004768 <__kernel_rem_pio2+0x2e8>)
 800448e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8004490:	f112 0f14 	cmn.w	r2, #20
 8004494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004498:	bfa8      	it	ge
 800449a:	1ed4      	subge	r4, r2, #3
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	9b08      	ldr	r3, [sp, #32]
 80044a0:	bfb8      	it	lt
 80044a2:	2400      	movlt	r4, #0
 80044a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80044a8:	9307      	str	r3, [sp, #28]
 80044aa:	bfa4      	itt	ge
 80044ac:	2318      	movge	r3, #24
 80044ae:	fb94 f4f3 	sdivge	r4, r4, r3
 80044b2:	f06f 0317 	mvn.w	r3, #23
 80044b6:	fb04 3303 	mla	r3, r4, r3, r3
 80044ba:	eb03 0b02 	add.w	fp, r3, r2
 80044be:	9a07      	ldr	r2, [sp, #28]
 80044c0:	9b02      	ldr	r3, [sp, #8]
 80044c2:	1aa7      	subs	r7, r4, r2
 80044c4:	eb03 0802 	add.w	r8, r3, r2
 80044c8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80044ca:	2500      	movs	r5, #0
 80044cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80044d0:	2200      	movs	r2, #0
 80044d2:	2300      	movs	r3, #0
 80044d4:	9009      	str	r0, [sp, #36]	; 0x24
 80044d6:	ae20      	add	r6, sp, #128	; 0x80
 80044d8:	4545      	cmp	r5, r8
 80044da:	dd14      	ble.n	8004506 <__kernel_rem_pio2+0x86>
 80044dc:	f04f 0800 	mov.w	r8, #0
 80044e0:	9a08      	ldr	r2, [sp, #32]
 80044e2:	ab20      	add	r3, sp, #128	; 0x80
 80044e4:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80044e8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80044ec:	9b02      	ldr	r3, [sp, #8]
 80044ee:	4598      	cmp	r8, r3
 80044f0:	dc35      	bgt.n	800455e <__kernel_rem_pio2+0xde>
 80044f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f4:	2200      	movs	r2, #0
 80044f6:	f1a3 0908 	sub.w	r9, r3, #8
 80044fa:	2300      	movs	r3, #0
 80044fc:	462f      	mov	r7, r5
 80044fe:	2600      	movs	r6, #0
 8004500:	e9cd 2300 	strd	r2, r3, [sp]
 8004504:	e01f      	b.n	8004546 <__kernel_rem_pio2+0xc6>
 8004506:	42ef      	cmn	r7, r5
 8004508:	d40b      	bmi.n	8004522 <__kernel_rem_pio2+0xa2>
 800450a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800450e:	e9cd 2300 	strd	r2, r3, [sp]
 8004512:	f7fb ff6f 	bl	80003f4 <__aeabi_i2d>
 8004516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800451a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800451e:	3501      	adds	r5, #1
 8004520:	e7da      	b.n	80044d8 <__kernel_rem_pio2+0x58>
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	e7f8      	b.n	800451a <__kernel_rem_pio2+0x9a>
 8004528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800452c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004530:	f7fb ffca 	bl	80004c8 <__aeabi_dmul>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	e9dd 0100 	ldrd	r0, r1, [sp]
 800453c:	f7fb fe0e 	bl	800015c <__adddf3>
 8004540:	e9cd 0100 	strd	r0, r1, [sp]
 8004544:	3601      	adds	r6, #1
 8004546:	9b07      	ldr	r3, [sp, #28]
 8004548:	3f08      	subs	r7, #8
 800454a:	429e      	cmp	r6, r3
 800454c:	ddec      	ble.n	8004528 <__kernel_rem_pio2+0xa8>
 800454e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004552:	f108 0801 	add.w	r8, r8, #1
 8004556:	e8ea 2302 	strd	r2, r3, [sl], #8
 800455a:	3508      	adds	r5, #8
 800455c:	e7c6      	b.n	80044ec <__kernel_rem_pio2+0x6c>
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	aa0c      	add	r2, sp, #48	; 0x30
 8004562:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004566:	930b      	str	r3, [sp, #44]	; 0x2c
 8004568:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800456a:	9e02      	ldr	r6, [sp, #8]
 800456c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004570:	930a      	str	r3, [sp, #40]	; 0x28
 8004572:	ab98      	add	r3, sp, #608	; 0x260
 8004574:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004578:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800457c:	ab70      	add	r3, sp, #448	; 0x1c0
 800457e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004582:	46d0      	mov	r8, sl
 8004584:	46b1      	mov	r9, r6
 8004586:	af0c      	add	r7, sp, #48	; 0x30
 8004588:	9700      	str	r7, [sp, #0]
 800458a:	f1b9 0f00 	cmp.w	r9, #0
 800458e:	f1a8 0808 	sub.w	r8, r8, #8
 8004592:	dc71      	bgt.n	8004678 <__kernel_rem_pio2+0x1f8>
 8004594:	465a      	mov	r2, fp
 8004596:	4620      	mov	r0, r4
 8004598:	4629      	mov	r1, r5
 800459a:	f000 fd35 	bl	8005008 <scalbn>
 800459e:	2200      	movs	r2, #0
 80045a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80045a4:	4604      	mov	r4, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	f7fb ff8e 	bl	80004c8 <__aeabi_dmul>
 80045ac:	f000 fcac 	bl	8004f08 <floor>
 80045b0:	2200      	movs	r2, #0
 80045b2:	4b6e      	ldr	r3, [pc, #440]	; (800476c <__kernel_rem_pio2+0x2ec>)
 80045b4:	f7fb ff88 	bl	80004c8 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4620      	mov	r0, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	f7fb fdca 	bl	8000158 <__aeabi_dsub>
 80045c4:	460d      	mov	r5, r1
 80045c6:	4604      	mov	r4, r0
 80045c8:	f7fc fa18 	bl	80009fc <__aeabi_d2iz>
 80045cc:	9004      	str	r0, [sp, #16]
 80045ce:	f7fb ff11 	bl	80003f4 <__aeabi_i2d>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fdbd 	bl	8000158 <__aeabi_dsub>
 80045de:	f1bb 0f00 	cmp.w	fp, #0
 80045e2:	4680      	mov	r8, r0
 80045e4:	4689      	mov	r9, r1
 80045e6:	dd70      	ble.n	80046ca <__kernel_rem_pio2+0x24a>
 80045e8:	1e72      	subs	r2, r6, #1
 80045ea:	ab0c      	add	r3, sp, #48	; 0x30
 80045ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80045f0:	9c04      	ldr	r4, [sp, #16]
 80045f2:	f1cb 0118 	rsb	r1, fp, #24
 80045f6:	fa40 f301 	asr.w	r3, r0, r1
 80045fa:	441c      	add	r4, r3
 80045fc:	408b      	lsls	r3, r1
 80045fe:	1ac0      	subs	r0, r0, r3
 8004600:	ab0c      	add	r3, sp, #48	; 0x30
 8004602:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004606:	f1cb 0317 	rsb	r3, fp, #23
 800460a:	9404      	str	r4, [sp, #16]
 800460c:	fa40 f303 	asr.w	r3, r0, r3
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	9b00      	ldr	r3, [sp, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	dd66      	ble.n	80046e6 <__kernel_rem_pio2+0x266>
 8004618:	2200      	movs	r2, #0
 800461a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800461e:	4614      	mov	r4, r2
 8004620:	9b04      	ldr	r3, [sp, #16]
 8004622:	3301      	adds	r3, #1
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	4296      	cmp	r6, r2
 8004628:	f300 80ac 	bgt.w	8004784 <__kernel_rem_pio2+0x304>
 800462c:	f1bb 0f00 	cmp.w	fp, #0
 8004630:	dd07      	ble.n	8004642 <__kernel_rem_pio2+0x1c2>
 8004632:	f1bb 0f01 	cmp.w	fp, #1
 8004636:	f000 80b4 	beq.w	80047a2 <__kernel_rem_pio2+0x322>
 800463a:	f1bb 0f02 	cmp.w	fp, #2
 800463e:	f000 80ba 	beq.w	80047b6 <__kernel_rem_pio2+0x336>
 8004642:	9b00      	ldr	r3, [sp, #0]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d14e      	bne.n	80046e6 <__kernel_rem_pio2+0x266>
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	2000      	movs	r0, #0
 800464e:	4948      	ldr	r1, [pc, #288]	; (8004770 <__kernel_rem_pio2+0x2f0>)
 8004650:	f7fb fd82 	bl	8000158 <__aeabi_dsub>
 8004654:	4680      	mov	r8, r0
 8004656:	4689      	mov	r9, r1
 8004658:	2c00      	cmp	r4, #0
 800465a:	d044      	beq.n	80046e6 <__kernel_rem_pio2+0x266>
 800465c:	465a      	mov	r2, fp
 800465e:	2000      	movs	r0, #0
 8004660:	4943      	ldr	r1, [pc, #268]	; (8004770 <__kernel_rem_pio2+0x2f0>)
 8004662:	f000 fcd1 	bl	8005008 <scalbn>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fb fd73 	bl	8000158 <__aeabi_dsub>
 8004672:	4680      	mov	r8, r0
 8004674:	4689      	mov	r9, r1
 8004676:	e036      	b.n	80046e6 <__kernel_rem_pio2+0x266>
 8004678:	2200      	movs	r2, #0
 800467a:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <__kernel_rem_pio2+0x2f4>)
 800467c:	4620      	mov	r0, r4
 800467e:	4629      	mov	r1, r5
 8004680:	f7fb ff22 	bl	80004c8 <__aeabi_dmul>
 8004684:	f7fc f9ba 	bl	80009fc <__aeabi_d2iz>
 8004688:	f7fb feb4 	bl	80003f4 <__aeabi_i2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004694:	2200      	movs	r2, #0
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <__kernel_rem_pio2+0x2f8>)
 8004698:	f7fb ff16 	bl	80004c8 <__aeabi_dmul>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4620      	mov	r0, r4
 80046a2:	4629      	mov	r1, r5
 80046a4:	f7fb fd58 	bl	8000158 <__aeabi_dsub>
 80046a8:	f7fc f9a8 	bl	80009fc <__aeabi_d2iz>
 80046ac:	9b00      	ldr	r3, [sp, #0]
 80046ae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80046b2:	f843 0b04 	str.w	r0, [r3], #4
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80046c0:	f7fb fd4c 	bl	800015c <__adddf3>
 80046c4:	4604      	mov	r4, r0
 80046c6:	460d      	mov	r5, r1
 80046c8:	e75f      	b.n	800458a <__kernel_rem_pio2+0x10a>
 80046ca:	d105      	bne.n	80046d8 <__kernel_rem_pio2+0x258>
 80046cc:	1e73      	subs	r3, r6, #1
 80046ce:	aa0c      	add	r2, sp, #48	; 0x30
 80046d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046d4:	15c3      	asrs	r3, r0, #23
 80046d6:	e79b      	b.n	8004610 <__kernel_rem_pio2+0x190>
 80046d8:	2200      	movs	r2, #0
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <__kernel_rem_pio2+0x2fc>)
 80046dc:	f7fc f97a 	bl	80009d4 <__aeabi_dcmpge>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d13e      	bne.n	8004762 <__kernel_rem_pio2+0x2e2>
 80046e4:	9000      	str	r0, [sp, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2300      	movs	r3, #0
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fc f953 	bl	8000998 <__aeabi_dcmpeq>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f000 80b1 	beq.w	800485a <__kernel_rem_pio2+0x3da>
 80046f8:	1e74      	subs	r4, r6, #1
 80046fa:	4623      	mov	r3, r4
 80046fc:	2200      	movs	r2, #0
 80046fe:	9902      	ldr	r1, [sp, #8]
 8004700:	428b      	cmp	r3, r1
 8004702:	da5f      	bge.n	80047c4 <__kernel_rem_pio2+0x344>
 8004704:	2a00      	cmp	r2, #0
 8004706:	d074      	beq.n	80047f2 <__kernel_rem_pio2+0x372>
 8004708:	ab0c      	add	r3, sp, #48	; 0x30
 800470a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800470e:	f1ab 0b18 	sub.w	fp, fp, #24
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 809f 	beq.w	8004856 <__kernel_rem_pio2+0x3d6>
 8004718:	465a      	mov	r2, fp
 800471a:	2000      	movs	r0, #0
 800471c:	4914      	ldr	r1, [pc, #80]	; (8004770 <__kernel_rem_pio2+0x2f0>)
 800471e:	f000 fc73 	bl	8005008 <scalbn>
 8004722:	46a2      	mov	sl, r4
 8004724:	4606      	mov	r6, r0
 8004726:	460f      	mov	r7, r1
 8004728:	f04f 0800 	mov.w	r8, #0
 800472c:	ab70      	add	r3, sp, #448	; 0x1c0
 800472e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004774 <__kernel_rem_pio2+0x2f4>
 8004732:	00e5      	lsls	r5, r4, #3
 8004734:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004738:	f1ba 0f00 	cmp.w	sl, #0
 800473c:	f280 80c3 	bge.w	80048c6 <__kernel_rem_pio2+0x446>
 8004740:	4626      	mov	r6, r4
 8004742:	2e00      	cmp	r6, #0
 8004744:	f2c0 80f5 	blt.w	8004932 <__kernel_rem_pio2+0x4b2>
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <__kernel_rem_pio2+0x300>)
 800474a:	f04f 0a00 	mov.w	sl, #0
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	ab70      	add	r3, sp, #448	; 0x1c0
 8004752:	f04f 0b00 	mov.w	fp, #0
 8004756:	f04f 0800 	mov.w	r8, #0
 800475a:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800475e:	1ba7      	subs	r7, r4, r6
 8004760:	e0db      	b.n	800491a <__kernel_rem_pio2+0x49a>
 8004762:	2302      	movs	r3, #2
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	e757      	b.n	8004618 <__kernel_rem_pio2+0x198>
 8004768:	08007478 	.word	0x08007478
 800476c:	40200000 	.word	0x40200000
 8004770:	3ff00000 	.word	0x3ff00000
 8004774:	3e700000 	.word	0x3e700000
 8004778:	41700000 	.word	0x41700000
 800477c:	3fe00000 	.word	0x3fe00000
 8004780:	08007438 	.word	0x08007438
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	b944      	cbnz	r4, 800479a <__kernel_rem_pio2+0x31a>
 8004788:	b11b      	cbz	r3, 8004792 <__kernel_rem_pio2+0x312>
 800478a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	2301      	movs	r3, #1
 8004792:	461c      	mov	r4, r3
 8004794:	3201      	adds	r2, #1
 8004796:	3704      	adds	r7, #4
 8004798:	e745      	b.n	8004626 <__kernel_rem_pio2+0x1a6>
 800479a:	1acb      	subs	r3, r1, r3
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4623      	mov	r3, r4
 80047a0:	e7f7      	b.n	8004792 <__kernel_rem_pio2+0x312>
 80047a2:	1e72      	subs	r2, r6, #1
 80047a4:	ab0c      	add	r3, sp, #48	; 0x30
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80047ae:	a90c      	add	r1, sp, #48	; 0x30
 80047b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80047b4:	e745      	b.n	8004642 <__kernel_rem_pio2+0x1c2>
 80047b6:	1e72      	subs	r2, r6, #1
 80047b8:	ab0c      	add	r3, sp, #48	; 0x30
 80047ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047be:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80047c2:	e7f4      	b.n	80047ae <__kernel_rem_pio2+0x32e>
 80047c4:	a90c      	add	r1, sp, #48	; 0x30
 80047c6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	430a      	orrs	r2, r1
 80047ce:	e796      	b.n	80046fe <__kernel_rem_pio2+0x27e>
 80047d0:	3401      	adds	r4, #1
 80047d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	d0fa      	beq.n	80047d0 <__kernel_rem_pio2+0x350>
 80047da:	9b08      	ldr	r3, [sp, #32]
 80047dc:	f106 0801 	add.w	r8, r6, #1
 80047e0:	18f5      	adds	r5, r6, r3
 80047e2:	ab20      	add	r3, sp, #128	; 0x80
 80047e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80047e8:	4434      	add	r4, r6
 80047ea:	4544      	cmp	r4, r8
 80047ec:	da04      	bge.n	80047f8 <__kernel_rem_pio2+0x378>
 80047ee:	4626      	mov	r6, r4
 80047f0:	e6bf      	b.n	8004572 <__kernel_rem_pio2+0xf2>
 80047f2:	2401      	movs	r4, #1
 80047f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047f6:	e7ec      	b.n	80047d2 <__kernel_rem_pio2+0x352>
 80047f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fa:	f04f 0900 	mov.w	r9, #0
 80047fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004802:	f7fb fdf7 	bl	80003f4 <__aeabi_i2d>
 8004806:	2600      	movs	r6, #0
 8004808:	2700      	movs	r7, #0
 800480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480c:	e9c5 0100 	strd	r0, r1, [r5]
 8004810:	3b08      	subs	r3, #8
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	9504      	str	r5, [sp, #16]
 8004816:	9b07      	ldr	r3, [sp, #28]
 8004818:	4599      	cmp	r9, r3
 800481a:	dd05      	ble.n	8004828 <__kernel_rem_pio2+0x3a8>
 800481c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004820:	f108 0801 	add.w	r8, r8, #1
 8004824:	3508      	adds	r5, #8
 8004826:	e7e0      	b.n	80047ea <__kernel_rem_pio2+0x36a>
 8004828:	f8dd c010 	ldr.w	ip, [sp, #16]
 800482c:	9900      	ldr	r1, [sp, #0]
 800482e:	f109 0901 	add.w	r9, r9, #1
 8004832:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004836:	9100      	str	r1, [sp, #0]
 8004838:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800483c:	f8cd c010 	str.w	ip, [sp, #16]
 8004840:	f7fb fe42 	bl	80004c8 <__aeabi_dmul>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	f7fb fc86 	bl	800015c <__adddf3>
 8004850:	4606      	mov	r6, r0
 8004852:	460f      	mov	r7, r1
 8004854:	e7df      	b.n	8004816 <__kernel_rem_pio2+0x396>
 8004856:	3c01      	subs	r4, #1
 8004858:	e756      	b.n	8004708 <__kernel_rem_pio2+0x288>
 800485a:	f1cb 0200 	rsb	r2, fp, #0
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	f000 fbd1 	bl	8005008 <scalbn>
 8004866:	2200      	movs	r2, #0
 8004868:	4ba4      	ldr	r3, [pc, #656]	; (8004afc <__kernel_rem_pio2+0x67c>)
 800486a:	4604      	mov	r4, r0
 800486c:	460d      	mov	r5, r1
 800486e:	f7fc f8b1 	bl	80009d4 <__aeabi_dcmpge>
 8004872:	b1f8      	cbz	r0, 80048b4 <__kernel_rem_pio2+0x434>
 8004874:	2200      	movs	r2, #0
 8004876:	4ba2      	ldr	r3, [pc, #648]	; (8004b00 <__kernel_rem_pio2+0x680>)
 8004878:	4620      	mov	r0, r4
 800487a:	4629      	mov	r1, r5
 800487c:	f7fb fe24 	bl	80004c8 <__aeabi_dmul>
 8004880:	f7fc f8bc 	bl	80009fc <__aeabi_d2iz>
 8004884:	4607      	mov	r7, r0
 8004886:	f7fb fdb5 	bl	80003f4 <__aeabi_i2d>
 800488a:	2200      	movs	r2, #0
 800488c:	4b9b      	ldr	r3, [pc, #620]	; (8004afc <__kernel_rem_pio2+0x67c>)
 800488e:	f7fb fe1b 	bl	80004c8 <__aeabi_dmul>
 8004892:	460b      	mov	r3, r1
 8004894:	4602      	mov	r2, r0
 8004896:	4629      	mov	r1, r5
 8004898:	4620      	mov	r0, r4
 800489a:	f7fb fc5d 	bl	8000158 <__aeabi_dsub>
 800489e:	f7fc f8ad 	bl	80009fc <__aeabi_d2iz>
 80048a2:	1c74      	adds	r4, r6, #1
 80048a4:	ab0c      	add	r3, sp, #48	; 0x30
 80048a6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80048aa:	f10b 0b18 	add.w	fp, fp, #24
 80048ae:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80048b2:	e731      	b.n	8004718 <__kernel_rem_pio2+0x298>
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fc f8a0 	bl	80009fc <__aeabi_d2iz>
 80048bc:	ab0c      	add	r3, sp, #48	; 0x30
 80048be:	4634      	mov	r4, r6
 80048c0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80048c4:	e728      	b.n	8004718 <__kernel_rem_pio2+0x298>
 80048c6:	ab0c      	add	r3, sp, #48	; 0x30
 80048c8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80048cc:	f7fb fd92 	bl	80003f4 <__aeabi_i2d>
 80048d0:	4632      	mov	r2, r6
 80048d2:	463b      	mov	r3, r7
 80048d4:	f7fb fdf8 	bl	80004c8 <__aeabi_dmul>
 80048d8:	4642      	mov	r2, r8
 80048da:	e86b 0102 	strd	r0, r1, [fp], #-8
 80048de:	464b      	mov	r3, r9
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fb fdf0 	bl	80004c8 <__aeabi_dmul>
 80048e8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80048ec:	4606      	mov	r6, r0
 80048ee:	460f      	mov	r7, r1
 80048f0:	e722      	b.n	8004738 <__kernel_rem_pio2+0x2b8>
 80048f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80048f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80048fa:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80048fe:	f8cd c01c 	str.w	ip, [sp, #28]
 8004902:	f7fb fde1 	bl	80004c8 <__aeabi_dmul>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4650      	mov	r0, sl
 800490c:	4659      	mov	r1, fp
 800490e:	f7fb fc25 	bl	800015c <__adddf3>
 8004912:	4682      	mov	sl, r0
 8004914:	468b      	mov	fp, r1
 8004916:	f108 0801 	add.w	r8, r8, #1
 800491a:	9b02      	ldr	r3, [sp, #8]
 800491c:	4598      	cmp	r8, r3
 800491e:	dc01      	bgt.n	8004924 <__kernel_rem_pio2+0x4a4>
 8004920:	45b8      	cmp	r8, r7
 8004922:	dde6      	ble.n	80048f2 <__kernel_rem_pio2+0x472>
 8004924:	ab48      	add	r3, sp, #288	; 0x120
 8004926:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800492a:	e9c7 ab00 	strd	sl, fp, [r7]
 800492e:	3e01      	subs	r6, #1
 8004930:	e707      	b.n	8004742 <__kernel_rem_pio2+0x2c2>
 8004932:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004934:	2b02      	cmp	r3, #2
 8004936:	dc09      	bgt.n	800494c <__kernel_rem_pio2+0x4cc>
 8004938:	2b00      	cmp	r3, #0
 800493a:	dc32      	bgt.n	80049a2 <__kernel_rem_pio2+0x522>
 800493c:	d05a      	beq.n	80049f4 <__kernel_rem_pio2+0x574>
 800493e:	9b04      	ldr	r3, [sp, #16]
 8004940:	f003 0007 	and.w	r0, r3, #7
 8004944:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800494e:	2b03      	cmp	r3, #3
 8004950:	d1f5      	bne.n	800493e <__kernel_rem_pio2+0x4be>
 8004952:	ab48      	add	r3, sp, #288	; 0x120
 8004954:	441d      	add	r5, r3
 8004956:	46aa      	mov	sl, r5
 8004958:	46a3      	mov	fp, r4
 800495a:	f1bb 0f00 	cmp.w	fp, #0
 800495e:	dc76      	bgt.n	8004a4e <__kernel_rem_pio2+0x5ce>
 8004960:	46aa      	mov	sl, r5
 8004962:	46a3      	mov	fp, r4
 8004964:	f1bb 0f01 	cmp.w	fp, #1
 8004968:	f300 8090 	bgt.w	8004a8c <__kernel_rem_pio2+0x60c>
 800496c:	2700      	movs	r7, #0
 800496e:	463e      	mov	r6, r7
 8004970:	2c01      	cmp	r4, #1
 8004972:	f300 80aa 	bgt.w	8004aca <__kernel_rem_pio2+0x64a>
 8004976:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800497a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800497e:	9b00      	ldr	r3, [sp, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 80ac 	bne.w	8004ade <__kernel_rem_pio2+0x65e>
 8004986:	4603      	mov	r3, r0
 8004988:	462a      	mov	r2, r5
 800498a:	9806      	ldr	r0, [sp, #24]
 800498c:	e9c0 2300 	strd	r2, r3, [r0]
 8004990:	4622      	mov	r2, r4
 8004992:	460b      	mov	r3, r1
 8004994:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004998:	463a      	mov	r2, r7
 800499a:	4633      	mov	r3, r6
 800499c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80049a0:	e7cd      	b.n	800493e <__kernel_rem_pio2+0x4be>
 80049a2:	2000      	movs	r0, #0
 80049a4:	46a0      	mov	r8, r4
 80049a6:	4601      	mov	r1, r0
 80049a8:	ab48      	add	r3, sp, #288	; 0x120
 80049aa:	441d      	add	r5, r3
 80049ac:	f1b8 0f00 	cmp.w	r8, #0
 80049b0:	da3a      	bge.n	8004a28 <__kernel_rem_pio2+0x5a8>
 80049b2:	9b00      	ldr	r3, [sp, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d03e      	beq.n	8004a36 <__kernel_rem_pio2+0x5b6>
 80049b8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80049bc:	4602      	mov	r2, r0
 80049be:	462b      	mov	r3, r5
 80049c0:	9d06      	ldr	r5, [sp, #24]
 80049c2:	2601      	movs	r6, #1
 80049c4:	e9c5 2300 	strd	r2, r3, [r5]
 80049c8:	460b      	mov	r3, r1
 80049ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80049ce:	f7fb fbc3 	bl	8000158 <__aeabi_dsub>
 80049d2:	4684      	mov	ip, r0
 80049d4:	460f      	mov	r7, r1
 80049d6:	ad48      	add	r5, sp, #288	; 0x120
 80049d8:	42b4      	cmp	r4, r6
 80049da:	f105 0508 	add.w	r5, r5, #8
 80049de:	da2c      	bge.n	8004a3a <__kernel_rem_pio2+0x5ba>
 80049e0:	9b00      	ldr	r3, [sp, #0]
 80049e2:	b10b      	cbz	r3, 80049e8 <__kernel_rem_pio2+0x568>
 80049e4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80049e8:	4662      	mov	r2, ip
 80049ea:	463b      	mov	r3, r7
 80049ec:	9906      	ldr	r1, [sp, #24]
 80049ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80049f2:	e7a4      	b.n	800493e <__kernel_rem_pio2+0x4be>
 80049f4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80049f6:	ab48      	add	r3, sp, #288	; 0x120
 80049f8:	4637      	mov	r7, r6
 80049fa:	441d      	add	r5, r3
 80049fc:	2c00      	cmp	r4, #0
 80049fe:	da09      	bge.n	8004a14 <__kernel_rem_pio2+0x594>
 8004a00:	9b00      	ldr	r3, [sp, #0]
 8004a02:	b10b      	cbz	r3, 8004a08 <__kernel_rem_pio2+0x588>
 8004a04:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004a08:	4632      	mov	r2, r6
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	9906      	ldr	r1, [sp, #24]
 8004a0e:	e9c1 2300 	strd	r2, r3, [r1]
 8004a12:	e794      	b.n	800493e <__kernel_rem_pio2+0x4be>
 8004a14:	4630      	mov	r0, r6
 8004a16:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004a1a:	4639      	mov	r1, r7
 8004a1c:	f7fb fb9e 	bl	800015c <__adddf3>
 8004a20:	3c01      	subs	r4, #1
 8004a22:	4606      	mov	r6, r0
 8004a24:	460f      	mov	r7, r1
 8004a26:	e7e9      	b.n	80049fc <__kernel_rem_pio2+0x57c>
 8004a28:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004a2c:	f7fb fb96 	bl	800015c <__adddf3>
 8004a30:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004a34:	e7ba      	b.n	80049ac <__kernel_rem_pio2+0x52c>
 8004a36:	460d      	mov	r5, r1
 8004a38:	e7c0      	b.n	80049bc <__kernel_rem_pio2+0x53c>
 8004a3a:	4660      	mov	r0, ip
 8004a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a40:	4639      	mov	r1, r7
 8004a42:	f7fb fb8b 	bl	800015c <__adddf3>
 8004a46:	3601      	adds	r6, #1
 8004a48:	4684      	mov	ip, r0
 8004a4a:	460f      	mov	r7, r1
 8004a4c:	e7c4      	b.n	80049d8 <__kernel_rem_pio2+0x558>
 8004a4e:	e9da 6700 	ldrd	r6, r7, [sl]
 8004a52:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004a56:	4632      	mov	r2, r6
 8004a58:	463b      	mov	r3, r7
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb fb7d 	bl	800015c <__adddf3>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	f7fb fb73 	bl	8000158 <__aeabi_dsub>
 8004a72:	4632      	mov	r2, r6
 8004a74:	463b      	mov	r3, r7
 8004a76:	f7fb fb71 	bl	800015c <__adddf3>
 8004a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a7e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004a82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004a86:	e9ca 2300 	strd	r2, r3, [sl]
 8004a8a:	e766      	b.n	800495a <__kernel_rem_pio2+0x4da>
 8004a8c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a90:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	4630      	mov	r0, r6
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f7fb fb5e 	bl	800015c <__adddf3>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7fb fb54 	bl	8000158 <__aeabi_dsub>
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f7fb fb52 	bl	800015c <__adddf3>
 8004ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004abc:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004ac0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004ac4:	e9ca 2300 	strd	r2, r3, [sl]
 8004ac8:	e74c      	b.n	8004964 <__kernel_rem_pio2+0x4e4>
 8004aca:	4638      	mov	r0, r7
 8004acc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	f7fb fb43 	bl	800015c <__adddf3>
 8004ad6:	3c01      	subs	r4, #1
 8004ad8:	4607      	mov	r7, r0
 8004ada:	460e      	mov	r6, r1
 8004adc:	e748      	b.n	8004970 <__kernel_rem_pio2+0x4f0>
 8004ade:	9b06      	ldr	r3, [sp, #24]
 8004ae0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004ae4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004ae8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004aec:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004af0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8004af4:	601d      	str	r5, [r3, #0]
 8004af6:	615e      	str	r6, [r3, #20]
 8004af8:	e721      	b.n	800493e <__kernel_rem_pio2+0x4be>
 8004afa:	bf00      	nop
 8004afc:	41700000 	.word	0x41700000
 8004b00:	3e700000 	.word	0x3e700000
 8004b04:	00000000 	.word	0x00000000

08004b08 <__kernel_tan>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	b08b      	sub	sp, #44	; 0x2c
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4bd9      	ldr	r3, [pc, #868]	; (8004e78 <__kernel_tan+0x370>)
 8004b12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004b16:	429e      	cmp	r6, r3
 8004b18:	4604      	mov	r4, r0
 8004b1a:	460d      	mov	r5, r1
 8004b1c:	4682      	mov	sl, r0
 8004b1e:	468b      	mov	fp, r1
 8004b20:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b22:	9202      	str	r2, [sp, #8]
 8004b24:	9107      	str	r1, [sp, #28]
 8004b26:	dc58      	bgt.n	8004bda <__kernel_tan+0xd2>
 8004b28:	f7fb ff68 	bl	80009fc <__aeabi_d2iz>
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d178      	bne.n	8004c24 <__kernel_tan+0x11c>
 8004b32:	1c7b      	adds	r3, r7, #1
 8004b34:	4323      	orrs	r3, r4
 8004b36:	4333      	orrs	r3, r6
 8004b38:	d110      	bne.n	8004b5c <__kernel_tan+0x54>
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	f000 f9df 	bl	8004f00 <fabs>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	2000      	movs	r0, #0
 8004b48:	49cc      	ldr	r1, [pc, #816]	; (8004e7c <__kernel_tan+0x374>)
 8004b4a:	f7fb fde7 	bl	800071c <__aeabi_ddiv>
 8004b4e:	4682      	mov	sl, r0
 8004b50:	468b      	mov	fp, r1
 8004b52:	4650      	mov	r0, sl
 8004b54:	4659      	mov	r1, fp
 8004b56:	b00b      	add	sp, #44	; 0x2c
 8004b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	2f01      	cmp	r7, #1
 8004b5e:	d0f8      	beq.n	8004b52 <__kernel_tan+0x4a>
 8004b60:	4620      	mov	r0, r4
 8004b62:	4659      	mov	r1, fp
 8004b64:	9a02      	ldr	r2, [sp, #8]
 8004b66:	9b00      	ldr	r3, [sp, #0]
 8004b68:	f7fb faf8 	bl	800015c <__adddf3>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	460f      	mov	r7, r1
 8004b72:	2000      	movs	r0, #0
 8004b74:	49c2      	ldr	r1, [pc, #776]	; (8004e80 <__kernel_tan+0x378>)
 8004b76:	f7fb fdd1 	bl	800071c <__aeabi_ddiv>
 8004b7a:	462e      	mov	r6, r5
 8004b7c:	4689      	mov	r9, r1
 8004b7e:	4652      	mov	r2, sl
 8004b80:	465b      	mov	r3, fp
 8004b82:	4680      	mov	r8, r0
 8004b84:	462c      	mov	r4, r5
 8004b86:	4630      	mov	r0, r6
 8004b88:	460d      	mov	r5, r1
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	f7fb fae4 	bl	8000158 <__aeabi_dsub>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	9802      	ldr	r0, [sp, #8]
 8004b96:	9900      	ldr	r1, [sp, #0]
 8004b98:	f7fb fade 	bl	8000158 <__aeabi_dsub>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	f7fb fc92 	bl	80004c8 <__aeabi_dmul>
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4682      	mov	sl, r0
 8004ba8:	468b      	mov	fp, r1
 8004baa:	464b      	mov	r3, r9
 8004bac:	4630      	mov	r0, r6
 8004bae:	4639      	mov	r1, r7
 8004bb0:	f7fb fc8a 	bl	80004c8 <__aeabi_dmul>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	4bb1      	ldr	r3, [pc, #708]	; (8004e7c <__kernel_tan+0x374>)
 8004bb8:	f7fb fad0 	bl	800015c <__adddf3>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4650      	mov	r0, sl
 8004bc2:	4659      	mov	r1, fp
 8004bc4:	f7fb faca 	bl	800015c <__adddf3>
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	f7fb fc7c 	bl	80004c8 <__aeabi_dmul>
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	462b      	mov	r3, r5
 8004bd4:	f7fb fac2 	bl	800015c <__adddf3>
 8004bd8:	e7b9      	b.n	8004b4e <__kernel_tan+0x46>
 8004bda:	4baa      	ldr	r3, [pc, #680]	; (8004e84 <__kernel_tan+0x37c>)
 8004bdc:	429e      	cmp	r6, r3
 8004bde:	dd21      	ble.n	8004c24 <__kernel_tan+0x11c>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	da06      	bge.n	8004bf2 <__kernel_tan+0xea>
 8004be4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004be8:	469b      	mov	fp, r3
 8004bea:	9b00      	ldr	r3, [sp, #0]
 8004bec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4652      	mov	r2, sl
 8004bf4:	a182      	add	r1, pc, #520	; (adr r1, 8004e00 <__kernel_tan+0x2f8>)
 8004bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bfa:	465b      	mov	r3, fp
 8004bfc:	f7fb faac 	bl	8000158 <__aeabi_dsub>
 8004c00:	4604      	mov	r4, r0
 8004c02:	460d      	mov	r5, r1
 8004c04:	a180      	add	r1, pc, #512	; (adr r1, 8004e08 <__kernel_tan+0x300>)
 8004c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c0a:	9a02      	ldr	r2, [sp, #8]
 8004c0c:	9b00      	ldr	r3, [sp, #0]
 8004c0e:	f7fb faa3 	bl	8000158 <__aeabi_dsub>
 8004c12:	462b      	mov	r3, r5
 8004c14:	4622      	mov	r2, r4
 8004c16:	f7fb faa1 	bl	800015c <__adddf3>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4682      	mov	sl, r0
 8004c1e:	468b      	mov	fp, r1
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4652      	mov	r2, sl
 8004c26:	465b      	mov	r3, fp
 8004c28:	4650      	mov	r0, sl
 8004c2a:	4659      	mov	r1, fp
 8004c2c:	f7fb fc4c 	bl	80004c8 <__aeabi_dmul>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	f7fb fc46 	bl	80004c8 <__aeabi_dmul>
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	464b      	mov	r3, r9
 8004c44:	4650      	mov	r0, sl
 8004c46:	4659      	mov	r1, fp
 8004c48:	f7fb fc3e 	bl	80004c8 <__aeabi_dmul>
 8004c4c:	a370      	add	r3, pc, #448	; (adr r3, 8004e10 <__kernel_tan+0x308>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c56:	4620      	mov	r0, r4
 8004c58:	4629      	mov	r1, r5
 8004c5a:	f7fb fc35 	bl	80004c8 <__aeabi_dmul>
 8004c5e:	a36e      	add	r3, pc, #440	; (adr r3, 8004e18 <__kernel_tan+0x310>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f7fb fa7a 	bl	800015c <__adddf3>
 8004c68:	4622      	mov	r2, r4
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	f7fb fc2c 	bl	80004c8 <__aeabi_dmul>
 8004c70:	a36b      	add	r3, pc, #428	; (adr r3, 8004e20 <__kernel_tan+0x318>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	f7fb fa71 	bl	800015c <__adddf3>
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	f7fb fc23 	bl	80004c8 <__aeabi_dmul>
 8004c82:	a369      	add	r3, pc, #420	; (adr r3, 8004e28 <__kernel_tan+0x320>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f7fb fa68 	bl	800015c <__adddf3>
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	462b      	mov	r3, r5
 8004c90:	f7fb fc1a 	bl	80004c8 <__aeabi_dmul>
 8004c94:	a366      	add	r3, pc, #408	; (adr r3, 8004e30 <__kernel_tan+0x328>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb fa5f 	bl	800015c <__adddf3>
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	f7fb fc11 	bl	80004c8 <__aeabi_dmul>
 8004ca6:	a364      	add	r3, pc, #400	; (adr r3, 8004e38 <__kernel_tan+0x330>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f7fb fa56 	bl	800015c <__adddf3>
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	f7fb fc08 	bl	80004c8 <__aeabi_dmul>
 8004cb8:	a361      	add	r3, pc, #388	; (adr r3, 8004e40 <__kernel_tan+0x338>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb fbff 	bl	80004c8 <__aeabi_dmul>
 8004cca:	a35f      	add	r3, pc, #380	; (adr r3, 8004e48 <__kernel_tan+0x340>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fa44 	bl	800015c <__adddf3>
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	f7fb fbf6 	bl	80004c8 <__aeabi_dmul>
 8004cdc:	a35c      	add	r3, pc, #368	; (adr r3, 8004e50 <__kernel_tan+0x348>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fa3b 	bl	800015c <__adddf3>
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	462b      	mov	r3, r5
 8004cea:	f7fb fbed 	bl	80004c8 <__aeabi_dmul>
 8004cee:	a35a      	add	r3, pc, #360	; (adr r3, 8004e58 <__kernel_tan+0x350>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fa32 	bl	800015c <__adddf3>
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	f7fb fbe4 	bl	80004c8 <__aeabi_dmul>
 8004d00:	a357      	add	r3, pc, #348	; (adr r3, 8004e60 <__kernel_tan+0x358>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fa29 	bl	800015c <__adddf3>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	f7fb fbdb 	bl	80004c8 <__aeabi_dmul>
 8004d12:	a355      	add	r3, pc, #340	; (adr r3, 8004e68 <__kernel_tan+0x360>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fa20 	bl	800015c <__adddf3>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d24:	f7fb fa1a 	bl	800015c <__adddf3>
 8004d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d2c:	f7fb fbcc 	bl	80004c8 <__aeabi_dmul>
 8004d30:	9a02      	ldr	r2, [sp, #8]
 8004d32:	9b00      	ldr	r3, [sp, #0]
 8004d34:	f7fb fa12 	bl	800015c <__adddf3>
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f7fb fbc4 	bl	80004c8 <__aeabi_dmul>
 8004d40:	9a02      	ldr	r2, [sp, #8]
 8004d42:	9b00      	ldr	r3, [sp, #0]
 8004d44:	f7fb fa0a 	bl	800015c <__adddf3>
 8004d48:	a349      	add	r3, pc, #292	; (adr r3, 8004e70 <__kernel_tan+0x368>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d56:	f7fb fbb7 	bl	80004c8 <__aeabi_dmul>
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	462b      	mov	r3, r5
 8004d5e:	f7fb f9fd 	bl	800015c <__adddf3>
 8004d62:	460b      	mov	r3, r1
 8004d64:	e9cd 0100 	strd	r0, r1, [sp]
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	f7fb f9f5 	bl	800015c <__adddf3>
 8004d72:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <__kernel_tan+0x37c>)
 8004d74:	4604      	mov	r4, r0
 8004d76:	429e      	cmp	r6, r3
 8004d78:	460d      	mov	r5, r1
 8004d7a:	f340 8085 	ble.w	8004e88 <__kernel_tan+0x380>
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f7fb fb38 	bl	80003f4 <__aeabi_i2d>
 8004d84:	4622      	mov	r2, r4
 8004d86:	4680      	mov	r8, r0
 8004d88:	4689      	mov	r9, r1
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fb9a 	bl	80004c8 <__aeabi_dmul>
 8004d94:	4642      	mov	r2, r8
 8004d96:	4606      	mov	r6, r0
 8004d98:	460f      	mov	r7, r1
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4629      	mov	r1, r5
 8004da0:	f7fb f9dc 	bl	800015c <__adddf3>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fcb6 	bl	800071c <__aeabi_ddiv>
 8004db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db4:	f7fb f9d0 	bl	8000158 <__aeabi_dsub>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	4659      	mov	r1, fp
 8004dc0:	f7fb f9ca 	bl	8000158 <__aeabi_dsub>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	f7fb f9c8 	bl	800015c <__adddf3>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	f7fb f9c0 	bl	8000158 <__aeabi_dsub>
 8004dd8:	9b07      	ldr	r3, [sp, #28]
 8004dda:	4604      	mov	r4, r0
 8004ddc:	179b      	asrs	r3, r3, #30
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	f1c3 0001 	rsb	r0, r3, #1
 8004de6:	460d      	mov	r5, r1
 8004de8:	f7fb fb04 	bl	80003f4 <__aeabi_i2d>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fb68 	bl	80004c8 <__aeabi_dmul>
 8004df8:	e6a9      	b.n	8004b4e <__kernel_tan+0x46>
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w
 8004e00:	54442d18 	.word	0x54442d18
 8004e04:	3fe921fb 	.word	0x3fe921fb
 8004e08:	33145c07 	.word	0x33145c07
 8004e0c:	3c81a626 	.word	0x3c81a626
 8004e10:	74bf7ad4 	.word	0x74bf7ad4
 8004e14:	3efb2a70 	.word	0x3efb2a70
 8004e18:	32f0a7e9 	.word	0x32f0a7e9
 8004e1c:	3f12b80f 	.word	0x3f12b80f
 8004e20:	1a8d1068 	.word	0x1a8d1068
 8004e24:	3f3026f7 	.word	0x3f3026f7
 8004e28:	fee08315 	.word	0xfee08315
 8004e2c:	3f57dbc8 	.word	0x3f57dbc8
 8004e30:	e96e8493 	.word	0xe96e8493
 8004e34:	3f8226e3 	.word	0x3f8226e3
 8004e38:	1bb341fe 	.word	0x1bb341fe
 8004e3c:	3faba1ba 	.word	0x3faba1ba
 8004e40:	db605373 	.word	0xdb605373
 8004e44:	bef375cb 	.word	0xbef375cb
 8004e48:	a03792a6 	.word	0xa03792a6
 8004e4c:	3f147e88 	.word	0x3f147e88
 8004e50:	f2f26501 	.word	0xf2f26501
 8004e54:	3f4344d8 	.word	0x3f4344d8
 8004e58:	c9560328 	.word	0xc9560328
 8004e5c:	3f6d6d22 	.word	0x3f6d6d22
 8004e60:	8406d637 	.word	0x8406d637
 8004e64:	3f9664f4 	.word	0x3f9664f4
 8004e68:	1110fe7a 	.word	0x1110fe7a
 8004e6c:	3fc11111 	.word	0x3fc11111
 8004e70:	55555563 	.word	0x55555563
 8004e74:	3fd55555 	.word	0x3fd55555
 8004e78:	3e2fffff 	.word	0x3e2fffff
 8004e7c:	3ff00000 	.word	0x3ff00000
 8004e80:	bff00000 	.word	0xbff00000
 8004e84:	3fe59427 	.word	0x3fe59427
 8004e88:	2f01      	cmp	r7, #1
 8004e8a:	d031      	beq.n	8004ef0 <__kernel_tan+0x3e8>
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	2000      	movs	r0, #0
 8004e94:	4918      	ldr	r1, [pc, #96]	; (8004ef8 <__kernel_tan+0x3f0>)
 8004e96:	f7fb fc41 	bl	800071c <__aeabi_ddiv>
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	465b      	mov	r3, fp
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	4639      	mov	r1, r7
 8004eac:	f7fb f954 	bl	8000158 <__aeabi_dsub>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb8:	f7fb f94e 	bl	8000158 <__aeabi_dsub>
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	f7fb fb02 	bl	80004c8 <__aeabi_dmul>
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4682      	mov	sl, r0
 8004ec8:	468b      	mov	fp, r1
 8004eca:	462b      	mov	r3, r5
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4639      	mov	r1, r7
 8004ed0:	f7fb fafa 	bl	80004c8 <__aeabi_dmul>
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <__kernel_tan+0x3f4>)
 8004ed8:	f7fb f940 	bl	800015c <__adddf3>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4650      	mov	r0, sl
 8004ee2:	4659      	mov	r1, fp
 8004ee4:	f7fb f93a 	bl	800015c <__adddf3>
 8004ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eec:	4634      	mov	r4, r6
 8004eee:	e66d      	b.n	8004bcc <__kernel_tan+0xc4>
 8004ef0:	4682      	mov	sl, r0
 8004ef2:	468b      	mov	fp, r1
 8004ef4:	e62d      	b.n	8004b52 <__kernel_tan+0x4a>
 8004ef6:	bf00      	nop
 8004ef8:	bff00000 	.word	0xbff00000
 8004efc:	3ff00000 	.word	0x3ff00000

08004f00 <fabs>:
 8004f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f04:	4770      	bx	lr
	...

08004f08 <floor>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004f10:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004f14:	2e13      	cmp	r6, #19
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4607      	mov	r7, r0
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	4605      	mov	r5, r0
 8004f20:	dc33      	bgt.n	8004f8a <floor+0x82>
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	da14      	bge.n	8004f50 <floor+0x48>
 8004f26:	a334      	add	r3, pc, #208	; (adr r3, 8004ff8 <floor+0xf0>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f7fb f916 	bl	800015c <__adddf3>
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	f7fb fd58 	bl	80009e8 <__aeabi_dcmpgt>
 8004f38:	b138      	cbz	r0, 8004f4a <floor+0x42>
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	da58      	bge.n	8004ff0 <floor+0xe8>
 8004f3e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004f42:	431d      	orrs	r5, r3
 8004f44:	d001      	beq.n	8004f4a <floor+0x42>
 8004f46:	2500      	movs	r5, #0
 8004f48:	4c2d      	ldr	r4, [pc, #180]	; (8005000 <floor+0xf8>)
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	462f      	mov	r7, r5
 8004f4e:	e025      	b.n	8004f9c <floor+0x94>
 8004f50:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <floor+0xfc>)
 8004f52:	fa42 f806 	asr.w	r8, r2, r6
 8004f56:	ea01 0208 	and.w	r2, r1, r8
 8004f5a:	4302      	orrs	r2, r0
 8004f5c:	d01e      	beq.n	8004f9c <floor+0x94>
 8004f5e:	a326      	add	r3, pc, #152	; (adr r3, 8004ff8 <floor+0xf0>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f7fb f8fa 	bl	800015c <__adddf3>
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f7fb fd3c 	bl	80009e8 <__aeabi_dcmpgt>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0ea      	beq.n	8004f4a <floor+0x42>
 8004f74:	2c00      	cmp	r4, #0
 8004f76:	bfbe      	ittt	lt
 8004f78:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004f7c:	fa43 f606 	asrlt.w	r6, r3, r6
 8004f80:	19a4      	addlt	r4, r4, r6
 8004f82:	2500      	movs	r5, #0
 8004f84:	ea24 0408 	bic.w	r4, r4, r8
 8004f88:	e7df      	b.n	8004f4a <floor+0x42>
 8004f8a:	2e33      	cmp	r6, #51	; 0x33
 8004f8c:	dd0a      	ble.n	8004fa4 <floor+0x9c>
 8004f8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f92:	d103      	bne.n	8004f9c <floor+0x94>
 8004f94:	f7fb f8e2 	bl	800015c <__adddf3>
 8004f98:	4607      	mov	r7, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fa8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004fac:	fa22 f808 	lsr.w	r8, r2, r8
 8004fb0:	ea18 0f00 	tst.w	r8, r0
 8004fb4:	d0f2      	beq.n	8004f9c <floor+0x94>
 8004fb6:	a310      	add	r3, pc, #64	; (adr r3, 8004ff8 <floor+0xf0>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb f8ce 	bl	800015c <__adddf3>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f7fb fd10 	bl	80009e8 <__aeabi_dcmpgt>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d0be      	beq.n	8004f4a <floor+0x42>
 8004fcc:	2c00      	cmp	r4, #0
 8004fce:	da02      	bge.n	8004fd6 <floor+0xce>
 8004fd0:	2e14      	cmp	r6, #20
 8004fd2:	d103      	bne.n	8004fdc <floor+0xd4>
 8004fd4:	3401      	adds	r4, #1
 8004fd6:	ea25 0508 	bic.w	r5, r5, r8
 8004fda:	e7b6      	b.n	8004f4a <floor+0x42>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004fe2:	fa03 f606 	lsl.w	r6, r3, r6
 8004fe6:	4435      	add	r5, r6
 8004fe8:	42bd      	cmp	r5, r7
 8004fea:	bf38      	it	cc
 8004fec:	18e4      	addcc	r4, r4, r3
 8004fee:	e7f2      	b.n	8004fd6 <floor+0xce>
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	462c      	mov	r4, r5
 8004ff4:	e7a9      	b.n	8004f4a <floor+0x42>
 8004ff6:	bf00      	nop
 8004ff8:	8800759c 	.word	0x8800759c
 8004ffc:	7e37e43c 	.word	0x7e37e43c
 8005000:	bff00000 	.word	0xbff00000
 8005004:	000fffff 	.word	0x000fffff

08005008 <scalbn>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800500e:	4604      	mov	r4, r0
 8005010:	460d      	mov	r5, r1
 8005012:	4617      	mov	r7, r2
 8005014:	460b      	mov	r3, r1
 8005016:	b996      	cbnz	r6, 800503e <scalbn+0x36>
 8005018:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800501c:	4303      	orrs	r3, r0
 800501e:	d039      	beq.n	8005094 <scalbn+0x8c>
 8005020:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <scalbn+0xe8>)
 8005022:	2200      	movs	r2, #0
 8005024:	f7fb fa50 	bl	80004c8 <__aeabi_dmul>
 8005028:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <scalbn+0xec>)
 800502a:	4604      	mov	r4, r0
 800502c:	429f      	cmp	r7, r3
 800502e:	460d      	mov	r5, r1
 8005030:	da0f      	bge.n	8005052 <scalbn+0x4a>
 8005032:	a32b      	add	r3, pc, #172	; (adr r3, 80050e0 <scalbn+0xd8>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb fa46 	bl	80004c8 <__aeabi_dmul>
 800503c:	e006      	b.n	800504c <scalbn+0x44>
 800503e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005042:	4296      	cmp	r6, r2
 8005044:	d10a      	bne.n	800505c <scalbn+0x54>
 8005046:	4602      	mov	r2, r0
 8005048:	f7fb f888 	bl	800015c <__adddf3>
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	e020      	b.n	8005094 <scalbn+0x8c>
 8005052:	460b      	mov	r3, r1
 8005054:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005058:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800505c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005060:	19b9      	adds	r1, r7, r6
 8005062:	4291      	cmp	r1, r2
 8005064:	dd0e      	ble.n	8005084 <scalbn+0x7c>
 8005066:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800506a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800506e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005072:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005076:	4820      	ldr	r0, [pc, #128]	; (80050f8 <scalbn+0xf0>)
 8005078:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800507c:	a31a      	add	r3, pc, #104	; (adr r3, 80050e8 <scalbn+0xe0>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	e7d9      	b.n	8005038 <scalbn+0x30>
 8005084:	2900      	cmp	r1, #0
 8005086:	dd08      	ble.n	800509a <scalbn+0x92>
 8005088:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800508c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005090:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800509a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800509e:	da12      	bge.n	80050c6 <scalbn+0xbe>
 80050a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80050a4:	429f      	cmp	r7, r3
 80050a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80050aa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80050ae:	dcdc      	bgt.n	800506a <scalbn+0x62>
 80050b0:	a30b      	add	r3, pc, #44	; (adr r3, 80050e0 <scalbn+0xd8>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80050ba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80050be:	480f      	ldr	r0, [pc, #60]	; (80050fc <scalbn+0xf4>)
 80050c0:	f041 011f 	orr.w	r1, r1, #31
 80050c4:	e7b8      	b.n	8005038 <scalbn+0x30>
 80050c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050ca:	3136      	adds	r1, #54	; 0x36
 80050cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80050d4:	4620      	mov	r0, r4
 80050d6:	4629      	mov	r1, r5
 80050d8:	2200      	movs	r2, #0
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <scalbn+0xf8>)
 80050dc:	e7ac      	b.n	8005038 <scalbn+0x30>
 80050de:	bf00      	nop
 80050e0:	c2f8f359 	.word	0xc2f8f359
 80050e4:	01a56e1f 	.word	0x01a56e1f
 80050e8:	8800759c 	.word	0x8800759c
 80050ec:	7e37e43c 	.word	0x7e37e43c
 80050f0:	43500000 	.word	0x43500000
 80050f4:	ffff3cb0 	.word	0xffff3cb0
 80050f8:	8800759c 	.word	0x8800759c
 80050fc:	c2f8f359 	.word	0xc2f8f359
 8005100:	3c900000 	.word	0x3c900000

08005104 <__libc_init_array>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	2600      	movs	r6, #0
 8005108:	4d0c      	ldr	r5, [pc, #48]	; (800513c <__libc_init_array+0x38>)
 800510a:	4c0d      	ldr	r4, [pc, #52]	; (8005140 <__libc_init_array+0x3c>)
 800510c:	1b64      	subs	r4, r4, r5
 800510e:	10a4      	asrs	r4, r4, #2
 8005110:	42a6      	cmp	r6, r4
 8005112:	d109      	bne.n	8005128 <__libc_init_array+0x24>
 8005114:	f000 f822 	bl	800515c <_init>
 8005118:	2600      	movs	r6, #0
 800511a:	4d0a      	ldr	r5, [pc, #40]	; (8005144 <__libc_init_array+0x40>)
 800511c:	4c0a      	ldr	r4, [pc, #40]	; (8005148 <__libc_init_array+0x44>)
 800511e:	1b64      	subs	r4, r4, r5
 8005120:	10a4      	asrs	r4, r4, #2
 8005122:	42a6      	cmp	r6, r4
 8005124:	d105      	bne.n	8005132 <__libc_init_array+0x2e>
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	f855 3b04 	ldr.w	r3, [r5], #4
 800512c:	4798      	blx	r3
 800512e:	3601      	adds	r6, #1
 8005130:	e7ee      	b.n	8005110 <__libc_init_array+0xc>
 8005132:	f855 3b04 	ldr.w	r3, [r5], #4
 8005136:	4798      	blx	r3
 8005138:	3601      	adds	r6, #1
 800513a:	e7f2      	b.n	8005122 <__libc_init_array+0x1e>
 800513c:	08007488 	.word	0x08007488
 8005140:	08007488 	.word	0x08007488
 8005144:	08007488 	.word	0x08007488
 8005148:	0800748c 	.word	0x0800748c

0800514c <memset>:
 800514c:	4603      	mov	r3, r0
 800514e:	4402      	add	r2, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
